{"version":3,"file":"js/chunk-vendors-edee8603.3d455f90.js","mappings":"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","sources":["webpack://@openeo/web-editor/./node_modules/@openeo/js-client/src/authprovider.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-client/src/baseentity.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-client/src/basicprovider.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-client/src/browser.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-client/src/builder/builder.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-client/src/builder/formula.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-client/src/builder/node.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-client/src/builder/parameter.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-client/src/builder/tapdigit.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-client/src/capabilities.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-client/src/connection.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-client/src/env.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-client/src/filetypes.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-client/src/gdc.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-client/src/job.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-client/src/logs.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-client/src/node.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-client/src/oidcprovider.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-client/src/openeo.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-client/src/service.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-client/src/userfile.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-client/src/userprocess.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-commons/src/main.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-commons/src/migrate/capabilities.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-commons/src/migrate/collections.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-commons/src/migrate/commons.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-commons/src/migrate/processes.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-commons/src/processDataType.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-commons/src/processParameter.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-commons/src/processRegistry.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-commons/src/processSchema.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-commons/src/processUtils.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-commons/src/utils.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-commons/src/versions.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-processgraphs/src/error.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-processgraphs/src/errorlist.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-processgraphs/src/jsonschema.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-processgraphs/src/keywords.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-processgraphs/src/main.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-processgraphs/src/node.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-processgraphs/src/process.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-processgraphs/src/processgraph.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-processgraphs/src/registry.js","webpack://@openeo/web-editor/./node_modules/@openeo/js-processgraphs/src/utils.js"],"sourcesContent":["/**\n * The base class for authentication providers such as Basic and OpenID Connect.\n * \n * @abstract\n */\nclass AuthProvider {\n\n\t/**\n\t * Creates a new OidcProvider instance to authenticate using OpenID Connect.\n\t * \n\t * @param {string} type - The type of the authentication procedure as specified by the API, e.g. `oidc` or `basic`.\n\t * @param {Connection} connection - A Connection object representing an established connection to an openEO back-end.\n\t * @param {AuthProviderMeta} options - Options\n\t */\n\tconstructor(type, connection, options) {\n\t\tthis.id = options.id || null;\n\t\tthis.title = options.title || \"\";\n\t\tthis.description = options.description || \"\";\n\t\tthis.type = type;\n\t\t/**\n\t\t * @protected\n\t\t * @type {Connection}\n\t\t */\n\t\tthis.connection = connection;\n\t\tthis.token = null;\n\t}\n\n\t/**\n\t * Get an identifier for the auth provider (combination of the type + provider identifier).\n\t * \n\t * @returns {string}\n\t */\n\tgetId() {\n\t\tlet id = this.getType();\n\t\tif (this.getProviderId().length > 0) {\n\t\t\tid += '.' + this.getProviderId();\n\t\t}\n\t\treturn id;\n\t}\n\n\t/**\n\t * Returns the type of the authentication procedure as specified by the API, e.g. `oidc` or `basic`.\n\t * \n\t * @returns {string}\n\t */\n\tgetType() {\n\t\treturn this.type;\n\t}\n\n\t/**\n\t * Returns the provider identifier, may not be available for all authentication methods.\n\t * \n\t * @returns {string}\n\t */\n\tgetProviderId() {\n\t\treturn typeof this.id === 'string' ? this.id : \"\";\n\t}\n\n\t/**\n\t * Returns the human-readable title for the authentication method / provider.\n\t * \n\t * @returns {string}\n\t */\n\tgetTitle() {\n\t\treturn this.title;\n\t}\n\n\t/**\n\t * Returns the human-readable description for the authentication method / provider.\n\t * \n\t * @returns {string}\n\t */\n\tgetDescription() {\n\t\treturn this.description;\n\t}\n\n\t/**\n\t * Returns the access token that is used as Bearer Token in API requests.\n\t * \n\t * Returns `null` if no access token has been set yet (i.e. not authenticated any longer).\n\t * \n\t * @returns {string | null}\n\t */\n\tgetToken() {\n\t\tif (typeof this.token === 'string') {\n\t\t\treturn this.getType() + \"/\" + this.getProviderId() + \"/\" + this.token;\n\t\t}\n\t\telse {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Sets the access token that is used as Bearer Token in API requests.\n\t * \n\t * Set to `null` to remove the access token.\n\t * \n\t * This also manages which auth provider is set for the connection.\n\t * \n\t * @param {?string} token \n\t */\n\tsetToken(token) {\n\t\tthis.token = token;\n\t\tthis.connection.emit('tokenChanged', token);\n\t\tif (this.token !== null) {\n\t\t\tthis.connection.setAuthProvider(this);\n\t\t}\n\t\telse {\n\t\t\tthis.connection.setAuthProvider(null);\n\t\t}\n\t}\n\n\t/**\n\t * Abstract method that extending classes implement the login process with.\n\t * \n\t * @async\n\t * @param {...*} args \n\t * @throws {Error}\n\t */\n\tasync login(...args) {\n\t\tthrow new Error(\"Not implemented.\", args);\n\t}\n\n\t/**\n\t * Logout from the established session.\n\t * \n\t * This is experimental and just removes the token for now.\n\t * May need to be overridden by sub-classes.\n\t * \n\t * @async\n\t */\n\tasync logout() {\n\t\tthis.setToken(null);\n\t}\n\n}\n\nmodule.exports = AuthProvider;\n","/**\n * The base class for entities such as Job, Process Graph, Service etc.\n * \n * @abstract\n */\nclass BaseEntity {\n\n\t/**\n\t * Creates an instance of this object.\n\t * \n\t * @param {Connection} connection - A Connection object representing an established connection to an openEO back-end.\n\t * @param {Array.<string|Array.<string>>} properties - A mapping from the API property names to the JS client property names (usually to convert between snake_case and camelCase), e.g. `[\"id\", \"title\", [\"process_graph\", \"processGraph\"]]`\n\t */\n\tconstructor(connection, properties = []) {\n\t\t/**\n\t\t * @protected\n\t\t * @type {Connection}\n\t\t */\n\t\tthis.connection = connection;\n\t\t/**\n\t\t * @protected\n\t\t * @type {object.<string, string>}\n\t\t */\n\t\tthis.apiToClientNames = {};\n\t\t/**\n\t\t * @protected\n\t\t * @type {object.<string, string>}\n\t\t */\n\t\tthis.clientToApiNames = {};\n\t\t/**\n\t\t * @protected\n\t\t * @type {number}\n\t\t */\n\t\tthis.lastRefreshTime = 0;\n\t\t/**\n\t\t * Additional (non-standardized) properties received from the API.\n\t\t * \n\t\t * @protected\n\t\t * @type {object.<string, *>}\n\t\t */\n\t\tthis.extra = {};\n\t\t\n\t\tfor(let i in properties) {\n\t\t\tlet backend, client;\n\t\t\tif (Array.isArray(properties[i])) {\n\t\t\t\tbackend = properties[i][0];\n\t\t\t\tclient = properties[i][1];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tbackend = properties[i];\n\t\t\t\tclient = properties[i];\n\t\t\t}\n\t\t\tthis.apiToClientNames[backend] = client;\n\t\t\tthis.clientToApiNames[client] = backend;\n\t\t}\n\t}\n\n\t/**\n\t * Returns a JSON serializable representation of the data that is API compliant.\n\t * \n\t * @returns {object.<string, *>}\n\t */\n\ttoJSON() {\n\t\tlet obj = {};\n\t\tfor(let key in this.clientToApiNames) {\n\t\t\tlet apiKey = this.clientToApiNames[key];\n\t\t\tif (typeof this[key] !== 'undefined') {\n\t\t\t\tobj[apiKey] = this[key];\n\t\t\t}\n\t\t}\n\t\treturn Object.assign(obj, this.extra);\n\t}\n\n\t/**\n\t * Converts the data from an API response into data suitable for our JS client models.\n\t * \n\t * @param {object.<string, *>} metadata - JSON object originating from an API response.\n\t * @returns {BaseEntity} Returns the object itself.\n\t */\n\tsetAll(metadata) {\n\t\tfor(let name in metadata) {\n\t\t\tif (typeof this.apiToClientNames[name] === 'undefined') {\n\t\t\t\tthis.extra[name] = metadata[name];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis[this.apiToClientNames[name]] = metadata[name];\n\t\t\t}\n\t\t}\n\t\tthis.lastRefreshTime = Date.now();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the age of the data in seconds.\n\t * \n\t * @returns {number} Age of the data in seconds as integer.\n\t */\n\tgetDataAge() {\n\t\treturn (Date.now() - this.lastRefreshTime) / 1000;\n\t}\n\n\t/**\n\t * Returns all data in the model.\n\t * \n\t * @returns {object.<string, *>}\n\t */\n\tgetAll() {\n\t\tlet obj = {};\n\t\tfor(let backend in this.apiToClientNames) {\n\t\t\tlet client = this.apiToClientNames[backend];\n\t\t\tif (typeof this[client] !== 'undefined') {\n\t\t\t\tobj[client] = this[client];\n\t\t\t}\n\t\t}\n\t\treturn Object.assign(obj, this.extra);\n\t}\n\n\t/**\n\t * Get a value from the additional data that is not part of the core model, i.e. from proprietary extensions.\n\t * \n\t * @param {string} name - Name of the property.\n\t * @returns {*} The value, which could be of any type.\n\t */\n\tget(name) {\n\t\treturn typeof this.extra[name] !== 'undefined' ? this.extra[name] : null;\n\t}\n\n\t/**\n\t * Converts the object to a valid objects for API requests.\n\t * \n\t * @param {object.<string, *>} parameters\n\t * @returns {object.<string, *>}\n\t * @protected\n\t */\n\t_convertToRequest(parameters) {\n\t\tlet request = {};\n\t\tfor(let key in parameters) {\n\t\t\tif (typeof this.clientToApiNames[key] === 'undefined') {\n\t\t\t\trequest[key] = parameters[key];\n\t\t\t}\n\t\t\telse {\n\t\t\t\trequest[this.clientToApiNames[key]] = parameters[key];\n\t\t\t}\n\t\t}\n\t\treturn request;\n\t}\n\n\t/**\n\t * Checks whether a features is supported by the API.\n\t * \n\t * @param {string} feature\n\t * @returns {boolean}\n\t * @protected\n\t * @see Capabilities#hasFeature\n\t */\n\t_supports(feature) {\n\t\treturn this.connection.capabilities().hasFeature(feature);\n\t}\n\n}\n\nmodule.exports = BaseEntity;\n","const Environment = require('./env');\nconst Utils = require('@openeo/js-commons/src/utils');\nconst AuthProvider = require('./authprovider');\n\n/**\n * The Authentication Provider for HTTP Basic.\n * \n * @augments AuthProvider\n */\nclass BasicProvider extends AuthProvider {\n\n\t/**\n\t * Creates a new BasicProvider instance to authenticate using HTTP Basic.\n\t * \n\t * @param {Connection} connection - A Connection object representing an established connection to an openEO back-end.\n\t */\n\tconstructor(connection) {\n\t\tsuper(\"basic\", connection, {\n\t\t\tid: null,\n\t\t\ttitle: \"HTTP Basic\",\n\t\t\tdescription: \"Login with username and password using the method HTTP Basic.\"\n\t\t});\n\t}\n\n\t/**\n\t * Authenticate with HTTP Basic.\n\t * \n\t * @async\n\t * @param {string} username \n\t * @param {string} password \n\t * @returns {Promise<void>}\n\t * @throws {Error}\n\t */\n\tasync login(username, password) {\n\t\tlet response = await this.connection._send({\n\t\t\tmethod: 'get',\n\t\t\tresponseType: 'json',\n\t\t\turl: '/credentials/basic',\n\t\t\theaders: {'Authorization': 'Basic ' + Environment.base64encode(username + ':' + password)}\n\t\t});\n\t\tif (!Utils.isObject(response.data) || typeof response.data.access_token !== 'string') {\n\t\t\tthrow new Error(\"No access_token returned.\");\n\t\t}\n\t\tthis.setToken(response.data.access_token);\n\t}\n\n}\n\nmodule.exports = BasicProvider;","/**\n * Platform dependant utilities for the openEO JS Client.\n * \n * Browser implementation, don't use in other environments.\n * \n * @hideconstructor\n */\nclass Environment {\n\n\t/**\n\t * Returns the name of the Environment, here `Browser`.\n\t * \n\t * @returns {string}\n\t * @static\n\t */\n\tstatic getName() {\n\t\treturn 'Browser';\n\t}\n\n\t/**\n\t * Returns the current URL of the browser window.\n\t * \n\t * @returns {string}\n\t * @static\n\t */\n\tstatic getUrl() {\n\t\treturn window.location.toString();\n\t}\n\n\t/**\n\t * Sets the URL.\n\t * \n\t * Not supported in Browsers and only throws an Error!\n\t * \n\t * @param {string} uri\n\t * @static\n\t */\n\tstatic setUrl(uri) { // eslint-disable-line no-unused-vars\n\t\tthrow new Error(\"setUrl is not supported in a browser environment.\");\n\t}\n\n\t/**\n\t * Handles errors from the API that are returned as Blobs.\n\t * \n\t * @ignore\n\t * @static\n\t * @param {Blob} error \n\t * @returns {Promise<void>}\n\t */\n\tstatic handleErrorResponse(error) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tlet fileReader = new FileReader();\n\t\t\tfileReader.onerror = event => {\n\t\t\t\tfileReader.abort();\n\t\t\t\treject(event.target.error);\n\t\t\t};\n\t\t\tfileReader.onload = () => {\n\t\t\t\t// ArrayBuffer to String conversion is from https://developers.google.com/web/updates/2012/06/How-to-convert-ArrayBuffer-to-and-from-String\n\t\t\t\tlet res = fileReader.result instanceof ArrayBuffer ? String.fromCharCode.apply(null, new Uint16Array(fileReader.result)) : fileReader.result;\n\t\t\t\tlet obj = typeof res === 'string' ? JSON.parse(res) : res;\n\t\t\t\tresolve(obj);\n\t\t\t};\n\t\t\tfileReader.readAsText(error.response.data);\n\t\t});\n\t}\n\n\t/**\n\t * Returns how binary responses from the servers are returned (`stream` or `blob`).\n\t * \n\t * @returns {string}\n\t * @static\n\t */\n\tstatic getResponseType() {\n\t\treturn 'blob';\n\t}\n\n\t/**\n\t * Encodes a string into Base64 encoding.\n\t * \n\t * @static\n\t * @param {string} str - String to encode.\n\t * @returns {string} String encoded in Base64.\n\t */\n\tstatic base64encode(str) {\n\t\t// btoa is JS's ugly name for encodeBase64\n\t\treturn btoa(str);\n\t}\n\n\t/**\n\t * Detect the file name for the given data source.\n\t * \n\t * @ignore\n\t * @static\n\t * @param {*} source - An object from a file upload form.\n\t * @returns {string}\n\t */\n\tstatic fileNameForUpload(source) {\n\t\treturn source.name.split(/(\\\\|\\/)/g).pop();\n\t}\n\n\t/**\n\t * Get the data from the source that should be uploaded.\n\t * \n\t * @ignore\n\t * @static\n\t * @param {*} source - An object from a file upload form.\n\t * @returns {*}\n\t */\n\tstatic dataForUpload(source) {\n\t\treturn source;\n\t}\n\n\t/**\n\t * Downloads files to local storage and returns a list of file paths.\n\t * \n\t * Not supported in Browsers and only throws an Error!\n\t * \n\t * @static\n\t * @param {Connection} con \n\t * @param {Array.<object.<string, *>>} assets \n\t * @param {string} targetFolder \n\t * @throws {Error}\n\t */\n\tstatic async downloadResults(con, assets, targetFolder) { // eslint-disable-line no-unused-vars\n\t\tthrow new Error(\"downloadResults is not supported in a browser environment.\");\n\t}\n\n\t/**\n\t * Offers data to download in the browser.\n\t * \n\t * This method may fail with overly big data.\n\t * \n\t * @async\n\t * @static\n\t * @param {*} data - Data to download.\n\t * @param {string} filename - File name that is suggested to the user.\n\t * @returns {Promise<void>}\n\t * @see https://github.com/kennethjiang/js-file-download/blob/master/file-download.js\n\t */\n\tstatic saveToFile(data, filename) {\n\t\t/* istanbul ignore next */\n\t\treturn new Promise((resolve, reject) => {\n\t\t\ttry {\n\t\t\t\tif (!(data instanceof Blob)) {\n\t\t\t\t\tdata = new Blob([data], {type: 'application/octet-stream'});\n\t\t\t\t}\n\t\t\t\tlet blobURL = window.URL.createObjectURL(data);\n\t\t\t\tlet tempLink = document.createElement('a');\n\t\t\t\ttempLink.style.display = 'none';\n\t\t\t\ttempLink.href = blobURL;\n\t\t\t\ttempLink.setAttribute('download', filename || 'download');\n\t\t\t\tif (typeof tempLink.download === 'undefined') {\n\t\t\t\t\ttempLink.setAttribute('target', '_blank');\n\t\t\t\t}\n\t\t\t\tdocument.body.appendChild(tempLink);\n\t\t\t\ttempLink.click();\n\t\t\t\tdocument.body.removeChild(tempLink);\n\t\t\t\twindow.URL.revokeObjectURL(blobURL);\n\t\t\t\tresolve();\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t\treject(error);\n\t\t\t}\n\t\t});\n\t}\n}\n\nmodule.exports = Environment;\n","const BuilderNode = require('./node');\nconst Parameter = require('./parameter');\nconst axios = require('axios').default;\nconst Utils = require('@openeo/js-commons/src/utils');\nconst ProcessUtils = require(\"@openeo/js-commons/src/processUtils\");\nconst ProcessRegistry = require('@openeo/js-commons/src/processRegistry');\n\nconst PROCESS_META = [\n\t\"id\", \"summary\", \"description\", \"categories\", \"parameters\", \"returns\",\n\t\"deprecated\", \"experimental\", \"exceptions\", \"examples\", \"links\"\n];\n\n/**\n * A class to construct processes easily.\n * \n * An example (`con` is a object of type `Connection`):\n * \n * ```\n * var builder = await con.buildProcess();\n * \n * var datacube = builder.load_collection(\n *   new Parameter(\"collection-id\", \"string\", \"The ID of the collection to load\"), // collection-id is then a process parameter that can be specified by users.\n *   { \"west\": 16.1, \"east\": 16.6, \"north\": 48.6, \"south\": 47.2 },\n *   [\"2018-01-01\", \"2018-02-01\"],\n *   [\"B02\", \"B04\", \"B08\"]\n * );\n * \n * // Alternative 1 - using the Formula class\n * var eviAlgorithm = new Formula('2.5 * (($B08 - $B04) / (1 + $B08 + 6 * $B04 + -7.5 * $B02))');\n * // Alternative 2 - \"by hand\"\n * var eviAlgorithm = function(data) {\n *   var nir = data[\"B08\"]; // Array access by label, accessing label \"B08\" here\n *   var red = data[\"B04\"];\n *   var blue = data[\"B02\"];\n *   return this.multiply(\n *     2.5,\n *     this.divide(\n *       this.subtract(nir, red),\n *       this.sum([\n *         1,\n *         nir,\n *         this.multiply(6, red),\n *         this.multiply(-7.5, blue)\n *       ])\n *     )\n *   );\n * };\n * datacube = builder.reduce_dimension(datacube, eviAlgorithm, \"bands\")\n *                   .description(\"Compute the EVI. Formula: 2.5 * (NIR - RED) / (1 + NIR + 6*RED + -7.5*BLUE)\");\n *                   \n * var min = function(data) { return this.min(data); };\n * datacube = builder.reduce_dimension(datacube, min, \"t\");\n * \n * datacube = builder.save_result(datacube, \"PNG\");\n * \n * var storedProcess = await con.setUserProcess(\"evi\", datacube);\n * ```\n * \n * As you can see above, the builder in callback functions is available as `this`.\n * Arrow functions do not support rebinding this and therefore the builder is passed as the last argument.\n * \n * So a normal function can be defined as follows:\n * ```\n * let callback = function(data) {\n *   return this.mean(data);\n * }\n * ```\n * \n * An arrow function on the other hand has to use the builder that is passed as the last parameter:\n * ```\n * let callback = (data, c, builder) => builder.mean(data);\n * ```\n * \n * Using arrow functions is available only since JS client version 1.3.0.\n * Beforehand it was not possible to use arrow functions in this context.\n */\nclass Builder {\n\n\t/**\n\t * Creates a Builder instance that can be used without connecting to a back-end.\n\t * \n\t * It requests the processes for the version specified from processes.openeo.org.\n\t * Requests the latest version if no version number is passed.\n\t * \n\t * @async\n\t * @static\n\t * @param {?string} [version=null]\n\t * @returns {Promise<Builder>}\n\t * @throws {Error}\n\t */\n\tstatic async fromVersion(version = null) {\n\t\tlet url = 'https://processes.openeo.org/processes.json';\n\t\tif (typeof version === 'string') {\n\t\t\turl = 'https://processes.openeo.org/' + version + '/processes.json';\n\t\t}\n\t\treturn await Builder.fromURL(url);\n\t}\n\n\t/**\n\t * Creates a Builder instance that can be used without connecting to a back-end.\n\t * \n\t * It requests the processes for the version specified from the given URL.\n\t * CORS needs to be implemented on the server-side for the URL given.\n\t * \n\t * @async\n\t * @static\n\t * @param {string | null} url \n\t * @returns {Promise<Builder>}\n\t * @throws {Error}\n\t */\n\tstatic async fromURL(url) {\n\t\tlet response = await axios(url);\n\t\treturn new Builder(response.data);\n\t}\n\n\t/**\n\t * Creates a Builder instance.\n\t * \n\t * Each process passed to the constructor is made available as object method.\n\t * \n\t * @param {Array.<Process>|Processes|ProcessRegistry} processes - Either an array containing processes or an object compatible with `GET /processes` of the API.\n\t * @param {?Builder} parent - The parent builder, usually only used by the Builder itself.\n\t * @param {string} id - A unique identifier for the process.\n\t */\n\tconstructor(processes, parent = null, id = undefined) {\n\t\t/**\n\t\t * A unique identifier for the process.\n\t\t * @public\n\t\t * @type {string}\n\t\t */\n\t\tthis.id = id;\n\t\t/**\n\t\t * The parent builder.\n\t\t * @type {Builder | null}\n\t\t */\n\t\tthis.parent = parent;\n\t\t/**\n\t\t * The parent node.\n\t\t * @type {BuilderNode | null}\n\t\t */\n\t\tthis.parentNode = null;\n\t\t/**\n\t\t * The parent parameter name.\n\t\t * @type {string | null}\n\t\t */\n\t\tthis.parentParameter = null;\n\t\t\n\t\tthis.nodes = {};\n\t\tthis.idCounter = {};\n\t\tthis.callbackParameterCache = {};\n\t\tthis.parameters = undefined;\n\n\t\t/**\n\t\t * List of all non-namespaced process specifications.\n\t\t * @type {ProcessRegistry}\n\t\t */\n\t\tthis.processes = null;\n\n\t\t// Create process registry if not available yet\n\t\tif (processes instanceof ProcessRegistry) {\n\t\t\tthis.processes = processes;\n\t\t}\n\t\telse if (Utils.isObject(processes) && Array.isArray(processes.processes)) {\n\t\t\tthis.processes = new ProcessRegistry(processes.processes);\n\t\t}\n\t\telse if (Array.isArray(processes)) {\n\t\t\tthis.processes = new ProcessRegistry(processes);\n\t\t}\n\t\telse {\n\t\t\tthrow new Error(\"Processes are invalid; must be array or object according to the API.\");\n\t\t}\n\n\t\t// Create processes\n\t\tthis.processes.all().forEach(process => this.createFunction(process));\n\t}\n\n\t/**\n\t * Creates a callable function on the builder object for a process.\n\t * \n\t * @param {Process} process\n\t * @throws {Error}\n\t */\n\tcreateFunction(process) {\n\t\tif (typeof this[process.id] !== 'undefined') {\n\t\t\tthrow new Error(\"Can't create function for process '\" + process.id + \"'. Already exists in Builder class.\");\n\t\t}\n\n\t\t/**\n\t\t * Implicitly calls the process with the given name on the back-end by adding it to the process.\n\t\t * \n\t\t * This is a shortcut for {@link Builder#process}.\n\t\t * \n\t\t * @param {...*} args - The arguments for the process.\n\t\t * @returns {BuilderNode}\n\t\t * @see Builder#process\n\t\t */\n\t\tthis[process.id] = function(...args) {\n\t\t\t// Don't use arrow functions, they don't support the arguments keyword.\n\t\t\treturn this.process(process.id, args);\n\t\t};\n\t}\n\n\t/**\n\t * Adds a process specification to the builder so that it can be used to create a process graph.\n\t * \n\t * @param {Process} process - Process specification compliant to openEO API\n\t * @param {?string} [namespace=null] - Namespace of the process (default to `null`, i.e. pre-defined processes). EXPERIMENTAL!\n\t * @throws {Error}\n\t */\n\taddProcessSpec(process, namespace = null) {\n\t\tif (!Utils.isObject(process)) {\n\t\t\tthrow new Error(\"Process '\" + process.id + \"' must be an object.\");\n\t\t}\n\n\t\tif (!namespace) {\n\t\t\tnamespace = 'backend';\n\t\t}\n\t\tthis.processes.add(process, namespace);\n\n\t\t// Create callable function for pre-defined processes\n\t\tif (namespace === 'backend') {\n\t\t\tthis.createFunction(process);\n\t\t}\n\t}\n\n\t/**\n\t * Sets the parent for this Builder.\n\t * \n\t * @param {BuilderNode} node \n\t * @param {string} parameterName \n\t */\n\tsetParent(node, parameterName) {\n\t\tthis.parentNode = node;\n\t\tthis.parentParameter = parameterName;\n\t}\n\n\t/**\n\t * Creates a callback parameter with the given name.\n\t * \n\t * @protected\n\t * @param {string} parameterName \n\t * @returns {Proxy<Parameter>}\n\t */\n\tcreateCallbackParameter(parameterName) {\n\t\tif (!this.callbackParameterCache[parameterName]) {\n\t\t\tthis.callbackParameterCache[parameterName] = Parameter.create(this, parameterName);\n\t\t}\n\t\treturn this.callbackParameterCache[parameterName];\n\t}\n\n\t/**\n\t * Gets the callback parameter specifics from the parent process.\n\t * \n\t * @returns {Array.<object.<string,*>>}\n\t * @todo Should this also pass callback parameters from parents until root is reached?\n\t */\n\tgetParentCallbackParameters() {\n\t\tlet callbackParams = [];\n\t\tif (this.parentNode && this.parentParameter) {\n\t\t\ttry {\n\t\t\t\tcallbackParams = ProcessUtils.getCallbackParametersForProcess(this.parentNode.spec, this.parentParameter).map(param => this.createCallbackParameter(param.name));\n\t\t\t} catch(error) {\n\t\t\t\tconsole.warn(error);\n\t\t\t}\n\t\t}\n\t\treturn callbackParams;\n\t}\n\n\t/**\n\t * Adds a parameter to the list of process parameters.\n\t * \n\t * Doesn't add the parameter if it has the same name as a callback parameter.\n\t * \n\t * @param {object.<string, *>} parameter - The parameter spec to add, must comply to the API.\n\t * @param {boolean} [root=true] - Adds the parameter to the root process if set to `true`, otherwise to the process constructed by this builder. Usually you want to add it to the root.\n\t */\n\taddParameter(parameter, root = true) {\n\t\tif (this.getParentCallbackParameters().find(p => p.name === parameter.name) !== undefined) {\n\t\t\treturn; // parameter refers to callback\n\t\t}\n\n\t\t/**\n\t\t * @type {Builder}\n\t\t */\n\t\tlet builder = this;\n\t\tif (root) {\n\t\t\twhile(builder.parent) {\n\t\t\t\tbuilder = builder.parent;\n\t\t\t}\n\t\t}\n\t\tif (!Array.isArray(builder.parameters)) {\n\t\t\tbuilder.parameters = [];\n\t\t}\n\t\tlet existing = builder.parameters.findIndex(p => p.name === parameter.name);\n\t\tif (existing !== -1) {\n\t\t\tObject.assign(builder.parameters[existing], parameter); // Merge\n\t\t}\n\t\telse {\n\t\t\tbuilder.parameters.push(parameter); // Add\n\t\t}\n\t}\n\n\t/**\n\t * Returns the process specification for the given process identifier and namespace (or `null`).\n\t * \n\t * @param {string} id - Process identifier\n\t * @param {?string} [namespace=null] - Namespace of the process (default to `null`, i.e. user or backend namespace). EXPERIMENTAL!\n\t * @returns {Process | null}\n\t */\n\tspec(id, namespace = null) {\n\t\treturn this.processes.get(id, namespace);\n\t}\n\n\t/**\n\t * Adds a mathematical formula to the process.\n\t * \n\t * See the {@link Formula} class for more information.\n\t * \n\t * @param {string} formula \n\t * @returns {BuilderNode}\n\t * @throws {Error}\n\t * @see Formula\n\t */\n\tmath(formula) {\n\t\tconst Formula = require('./formula');\n\t\tlet math = new Formula(formula);\n\t\tmath.setBuilder(this);\n\t\treturn math.generate(false);\n\t}\n\n\t/**\n\t * Checks whether a process with the given id and namespace is supported by the back-end.\n\t * \n\t * @param {string} processId - The id of the process.\n\t * @param {?string} [namespace=null] - Namespace of the process (default to `null`, i.e. pre-defined processes). EXPERIMENTAL!\n\t * @returns {boolean}\n\t */\n\tsupports(processId, namespace = null) {\n\t\treturn Boolean(this.spec(processId, namespace));\n\t}\n\n\t/**\n\t * Adds another process call to the process chain.\n\t * \n\t * @param {string} processId - The id of the process to call. To access a namespaced process, use the `process@namespace` notation.\n\t * @param {object.<string, *>|Array} [args={}] - The arguments as key-value pairs or as array. For objects, they keys must be the parameter names and the values must be the arguments. For arrays, arguments must be specified in the same order as in the corresponding process.\n\t * @param {?string} [description=null] - An optional description for the process call.\n\t * @returns {BuilderNode}\n\t */\n\tprocess(processId, args = {}, description = null) {\n\t\tlet namespace = null;\n\t\tif (processId.includes('@')) {\n\t\t\tlet rest;\n\t\t\t[processId, ...rest] = processId.split('@');\n\t\t\tnamespace = rest.join('@');\n\t\t}\n\t\tlet node = new BuilderNode(this, processId, args, description, namespace);\n\t\tthis.nodes[node.id] = node;\n\t\treturn node;\n\t}\n\n\t/**\n\t * Returns a JSON serializable representation of the data that is API compliant.\n\t * \n\t * @returns {Process}\n\t */\n\ttoJSON() {\n\t\tlet process = {\n\t\t\tprocess_graph: Utils.mapObjectValues(this.nodes, node => node.toJSON())\n\t\t};\n\t\tPROCESS_META.forEach(key => {\n\t\t\tif (typeof this[key] !== 'undefined') {\n\t\t\t\tprocess[key] = this[key];\n\t\t\t}\n\t\t});\n\t\treturn process;\n\t}\n\t\n\t/**\n\t * Generates a unique identifier for the process nodes.\n\t * \n\t * A prefix can be given to make the identifiers more human-readable.\n\t * If the given name is empty, the id is simply an incrementing number.\n\t * \n\t * @param {string} [prefix=\"\"]\n\t * @returns {string}\n\t */\n\tgenerateId(prefix = \"\") {\n\t\tprefix = prefix.replace(\"_\", \"\").substr(0, 6);\n\t\tif (!this.idCounter[prefix]) {\n\t\t\tthis.idCounter[prefix] = 1;\n\t\t}\n\t\telse {\n\t\t\tthis.idCounter[prefix]++;\n\t\t}\n\t\treturn prefix + this.idCounter[prefix];\n\t}\n\n}\n\nmodule.exports = Builder;","const TapDigit = require(\"./tapdigit\");\nconst Parameter = require(\"./parameter\");\nconst BuilderNode = require('./node');\n\n/**\n * This converts a mathematical formula into a openEO process for you.\n * \n * Operators: - (subtract), + (add), / (divide), * (multiply), ^ (power)\n * \n * It supports all mathematical functions (i.e. expects a number and returns a number) the back-end implements, e.g. `sqrt(x)`.\n * For namespaced processes, use for example `process@namespace(x)` - EXPERIMENTAL!\n * \n * Only available if a builder is specified in the constructor:\n * You can refer to output from processes with a leading `#`, e.g. `#loadco1` if the node to refer to has the key `loadco1`.\n * \n * Only available if a parent node is set via `setNode()`:\n * Parameters can be accessed simply by name. \n * If the first parameter is a (labeled) array, the value for a specific index or label can be accessed by typing the numeric index or textual label with a `$` in front, for example `$B1` for the label `B1` or `$0` for the first element in the array. Numeric labels are not supported.\n * You can access subsequent parameters by adding additional `$` at the beginning, e.g. `$$0` to access the first element of an array in the second parameter, `$$$0` for the same in the third parameter etc.\n * \n * An example that computes an EVI (assuming the labels for the bands are `NIR`, `RED` and `BLUE`): `2.5 * ($NIR - $RED) / (1 + $NIR + 6 * $RED + (-7.5 * $BLUE))`\n */\nclass Formula {\n\n\t/**\n\t * Creates a math formula object.\n\t * \n\t * @param {string} formula - A mathematical formula to parse.y\n\t */\n\tconstructor(formula) {\n\t\tlet parser = new TapDigit.Parser();\n\t\t/**\n\t\t * @type {object.<string, *>}\n\t\t */\n\t\tthis.tree = parser.parse(formula);\n\t\t/**\n\t\t * @type {Builder | null}\n\t\t */\n\t\tthis.builder = null;\n\t}\n\n\t/**\n\t * The builder instance to use.\n\t * \n\t * @param {Builder} builder - The builder instance to add the formula to.\n\t */\n\tsetBuilder(builder) {\n\t\tthis.builder = builder;\n\t}\n\n\t/**\n\t * Generates the processes for the formula specified in the constructor.\n\t * \n\t * Returns the last node that computes the result.\n\t * \n\t * @param {boolean} setResultNode - Set the `result` flag to `true`.\n\t * @returns {BuilderNode}\n\t * @throws {Error}\n\t */\n\tgenerate(setResultNode = true) {\n\t\tlet finalNode = this.parseTree(this.tree);\n\t\tif (!(finalNode instanceof BuilderNode)) {\n\t\t\tthrow new Error('Invalid formula specified.');\n\t\t}\n\t\t// Set result node\n\t\tif (setResultNode) {\n\t\t\tfinalNode.result = true;\n\t\t}\n\t\treturn finalNode;\n\t}\n\n\t/**\n\t * Walks through the tree generated by the TapDigit parser and generates process nodes.\n\t * \n\t * @protected\n\t * @param {object.<string, *>} tree \n\t * @returns {object.<string, *>}\n\t * @throws {Error}\n\t */\n\tparseTree(tree) {\n\t\tlet key = Object.keys(tree)[0]; // There's never more than one property so no loop required\n\t\tswitch(key) {\n\t\t\tcase 'Number':\n\t\t\t\treturn parseFloat(tree.Number);\n\t\t\tcase 'Identifier':\n\t\t\t\treturn this.getRef(tree.Identifier);\n\t\t\tcase 'Expression':\n\t\t\t\treturn this.parseTree(tree.Expression);\n\t\t\tcase 'FunctionCall': {\n\t\t\t\tlet args = [];\n\t\t\t\tfor(let i in tree.FunctionCall.args) {\n\t\t\t\t\targs.push(this.parseTree(tree.FunctionCall.args[i]));\n\t\t\t\t}\n\t\t\t\treturn this.builder.process(tree.FunctionCall.name, args);\n\t\t\t}\n\t\t\tcase 'Binary':\n\t\t\t\treturn this.addOperatorProcess(\n\t\t\t\t\ttree.Binary.operator,\n\t\t\t\t\tthis.parseTree(tree.Binary.left),\n\t\t\t\t\tthis.parseTree(tree.Binary.right)\n\t\t\t\t);\n\t\t\tcase 'Unary': {\n\t\t\t\tlet val = this.parseTree(tree.Unary.expression);\n\t\t\t\tif (tree.Unary.operator === '-') {\n\t\t\t\t\tif (typeof val === 'number') {\n\t\t\t\t\t\treturn -val;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\treturn this.addOperatorProcess('*', -1, val);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn val;\n\t\t\t\t}\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Operation ' + key + ' not supported.');\n\t\t}\n\t}\n\n\t/**\n\t * Gets the reference for a value, e.g. from_node or from_parameter.\n\t * \n\t * @protected\n\t * @param {*} value \n\t * @returns {*}\n\t */\n\tgetRef(value) {\n\t\t// Convert native data types\n\t\tif (value === 'true') {\n\t\t\treturn true;\n\t\t}\n\t\telse if (value === 'false') {\n\t\t\treturn false;\n\t\t}\n\t\telse if (value === 'null') {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Output of a process\n\t\tif (typeof value === 'string' && value.startsWith('#')) {\n\t\t\tlet nodeId = value.substring(1);\n\t\t\tif (nodeId in this.builder.nodes) {\n\t\t\t\treturn { from_node: nodeId };\n\t\t\t}\n\t\t}\n\n\t\tlet callbackParams = this.builder.getParentCallbackParameters();\n\t\t// Array labels / indices\n\t\tif (typeof value === 'string' && callbackParams.length > 0) {\n\t\t\tlet prefix = value.match(/^\\$+/);\n\t\t\tlet count = prefix ? prefix[0].length : 0;\n\t\t\tif (count > 0 && callbackParams.length >= count) {\n\t\t\t\tlet ref = value.substring(count);\n\t\t\t\treturn callbackParams[count-1][ref];\n\t\t\t}\n\t\t}\n\n\t\t// Everything else is a parameter\n\t\tlet parameter = new Parameter(value);\n\t\t// Add new parameter if it doesn't exist\n\t\tthis.builder.addParameter(parameter);\n\t\treturn parameter;\n\t}\n\n\t/**\n\t * Adds a process node for an operator like +, -, *, / etc.\n\t * \n\t * @param {string} operator - The operator.\n\t * @param {number|object.<string, *>} left - The left part for the operator.\n\t * @param {number|object.<string, *>} right - The right part for the operator.\n\t * @returns {BuilderNode}\n\t * @throws {Error}\n\t */\n\taddOperatorProcess(operator, left, right) {\n\t\tlet processName = Formula.operatorMapping[operator];\n\t\tlet process = this.builder.spec(processName);\n\t\tif (processName && process) {\n\t\t\tlet args = {};\n\t\t\tif (!Array.isArray(process.parameters) || process.parameters.length < 2) {\n\t\t\t\tthrow new Error(\"Process for operator \" + operator + \" must have at least two parameters\");\n\t\t\t}\n\t\t\targs[process.parameters[0].name || 'x'] = left;\n\t\t\targs[process.parameters[1].name || 'y'] = right;\n\t\t\treturn this.builder.process(processName, args);\n\t\t}\n\t\telse {\n\t\t\tthrow new Error('Operator ' + operator + ' not supported');\n\t\t}\n\t}\n\n}\n\n/**\n * List of supported operators.\n * \n * All operators must have the parameters be name x and y.\n * \n * The key is the mathematical operator, the value is the process identifier.\n * \n * @type {object.<string, string>}\n */\nFormula.operatorMapping = {\n\t\"-\": \"subtract\",\n\t\"+\": \"add\",\n\t\"/\": \"divide\",\n\t\"*\": \"multiply\",\n\t\"^\": \"power\"\n};\n\nmodule.exports = Formula;\n","const Utils = require(\"@openeo/js-commons/src/utils\");\nconst Parameter = require(\"./parameter\");\n\n/**\n * A class that represents a process node and also a result from a process.\n */\nclass BuilderNode {\n\n\t/**\n\t * Creates a new process node for the builder.\n\t * \n\t * @param {Builder} parent\n\t * @param {string} processId \n\t * @param {object.<string, *>} [processArgs={}]\n\t * @param {?string} [processDescription=null]\n\t * @param {?string} [processNamespace=null]\n\t */\n\tconstructor(parent, processId, processArgs = {}, processDescription = null, processNamespace = null) {\n\t\t/**\n\t\t * The parent builder.\n\t\t * @type {Builder}\n\t\t */\n\t\tthis.parent = parent;\n\n\t\t/**\n\t\t * The specification of the process associated with this node.\n\t\t * @type {Process}\n\t\t * @readonly\n\t\t */\n\t\tthis.spec = this.parent.spec(processId, processNamespace);\n\t\tif (!this.spec) {\n\t\t\tthrow new Error(\"Process doesn't exist: \" + processId);\n\t\t}\n\n\t\t/**\n\t\t * The unique identifier for the node (not the process ID!).\n\t\t * @type {string}\n\t\t */\n\t\tthis.id = parent.generateId(processId);\n\t\t/**\n\t\t * The namespace of the process - EXPERIMENTAL!\n\t\t * @type {string}\n\t\t */\n\t\tthis.namespace = processNamespace;\n\t\t/**\n\t\t * The arguments for the process.\n\t\t * @type {object.<string, *>}\n\t\t */\n\t\tthis.arguments = Array.isArray(processArgs) ? this.namedArguments(processArgs) : processArgs;\n\t\t/**\n\t\t * @ignore\n\t\t */\n\t\tthis._description = processDescription;\n\t\t/**\n\t\t * Is this the result node?\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.result = false;\n\n\t\tthis.addParametersToProcess(this.arguments);\n\t}\n\n\t/**\n\t * Converts a sorted array of arguments to an object with the respective parameter names.\n\t * \n\t * @param {Array.<object.<string, *>>} processArgs \n\t * @returns {object.<string, *>}\n\t * @throws {Error}\n\t */\n\tnamedArguments(processArgs) {\n\t\tif (processArgs.length > (this.spec.parameters || []).length) {\n\t\t\tthrow new Error(\"More arguments specified than parameters available.\");\n\t\t}\n\t\tlet obj = {};\n\t\tif (Array.isArray(this.spec.parameters)) {\n\t\t\tfor(let i = 0; i < this.spec.parameters.length; i++) {\n\t\t\t\tobj[this.spec.parameters[i].name] = processArgs[i];\n\t\t\t}\n\t\t}\n\t\treturn obj;\n\t}\n\n\t/**\n\t * Checks the arguments given for parameters and add them to the process.\n\t * \n\t * @param {object.<string, *>|Array} processArgs \n\t */\n\taddParametersToProcess(processArgs) {\n\t\tfor(let key in processArgs) {\n\t\t\tlet arg = processArgs[key];\n\t\t\tif (arg instanceof Parameter) {\n\t\t\t\tif (Utils.isObject(arg.spec.schema)) {\n\t\t\t\t\tthis.parent.addParameter(arg.spec);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (arg instanceof BuilderNode) {\n\t\t\t\tthis.addParametersToProcess(arg.arguments);\n\t\t\t}\n\t\t\telse if (Array.isArray(arg) || Utils.isObject(arg)) {\n\t\t\t\tthis.addParametersToProcess(arg);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Gets/Sets a description for the node.\n\t * \n\t * Can be used in a variety of ways:\n\t * \n\t * By default, this is a function: \n\t * `node.description()` - Returns the description.\n\t * `node.description(\"foo\")` - Sets the description to \"foo\". Returns the node itself for method chaining.\n\t * \n\t * You can also \"replace\" the function (not supported in TypeScript!),\n\t * then it acts as normal property and the function is not available any longer:\n\t * `node.description = \"foo\"` - Sets the description to \"foo\".\n\t * Afterwards you can call `node.description` as normal object property.\n\t * \n\t * @param {string|undefined} description - Optional: If given, set the value.\n\t * @returns {string|BuilderNode}\n\t */\n\tdescription(description) {\n\t\tif (typeof description === 'undefined') {\n\t\t\treturn this._description;\n\t\t}\n\t\telse {\n\t\t\tthis._description = description;\n\t\t\treturn this;\n\t\t}\n\t}\n\n\t/**\n\t * Converts the given argument into something serializable...\n\t * \n\t * @protected\n\t * @param {*} arg - Argument\n\t * @param {string} name - Parameter name\n\t * @returns {*}\n\t */\n\texportArgument(arg, name) {\n\t\tconst Formula = require('./formula');\n\t\tif (Utils.isObject(arg)) {\n\t\t\tif (arg instanceof BuilderNode || arg instanceof Parameter) {\n\t\t\t\treturn arg.ref();\n\t\t\t}\n\t\t\telse if (arg instanceof Formula) {\n\t\t\t\tlet builder = this.createBuilder(this, name);\n\t\t\t\targ.setBuilder(builder);\n\t\t\t\targ.generate();\n\t\t\t\treturn builder.toJSON();\n\t\t\t}\n\t\t\telse if (arg instanceof Date) {\n\t\t\t\treturn arg.toISOString();\n\t\t\t}\n\t\t\telse if (typeof arg.toJSON === 'function') {\n\t\t\t\treturn arg.toJSON();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlet obj = {};\n\t\t\t\tfor(let key in arg) {\n\t\t\t\t\tif (typeof arg[key] !== 'undefined') {\n\t\t\t\t\t\tobj[key] = this.exportArgument(arg[key], name);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn obj;\n\t\t\t}\n\t\t}\n\t\telse if (Array.isArray(arg)) {\n\t\t\treturn arg.map(element => this.exportArgument(element), name);\n\t\t}\n\t\t// export child process graph\n\t\telse if (typeof arg === 'function') {\n\t\t\treturn this.exportCallback(arg, name);\n\t\t}\n\t\telse {\n\t\t\treturn arg;\n\t\t}\n\t}\n\n\t/**\n\t * Creates a new Builder, usually for a callback.\n\t * \n\t * @protected\n\t * @param {?BuilderNode} [parentNode=null]\n\t * @param {?string} [parentParameter=null]\n\t * @returns {BuilderNode}\n\t */\n\tcreateBuilder(parentNode = null, parentParameter = null) {\n\t\tconst Builder = require('./builder');\n\t\tlet builder = new Builder(this.parent.processes, this.parent);\n\t\tif (parentNode !== null && parentParameter !== null) {\n\t\t\tbuilder.setParent(parentNode, parentParameter);\n\t\t}\n\t\treturn builder;\n\t}\n\n\t/**\n\t * Returns the serializable process for the callback function given.\n\t * \n\t * @protected\n\t * @param {Function} arg - callback function\n\t * @param {string} name - Parameter name\n\t * @returns {object.<string, *>}\n\t * @throws {Error}\n\t */\n\texportCallback(arg, name) {\n\t\tlet builder = this.createBuilder(this, name);\n\t\tlet params = builder.getParentCallbackParameters();\n\t\t// Bind builder to this, so that this.xxx can be used for processes\n\t\t// Also pass builder as last parameter so that we can grab it in arrow functions\n\t\tlet node = arg.bind(builder)(...params, builder);\n\t\tif (Array.isArray(node) && builder.supports('array_create')) {\n\t\t\tnode = builder.array_create(node);\n\t\t}\n\t\telse if (!Utils.isObject(node) && builder.supports('constant')) {\n\t\t\tnode = builder.constant(node);\n\t\t}\n\t\tif (node instanceof BuilderNode) {\n\t\t\tnode.result = true;\n\t\t\treturn builder.toJSON();\n\t\t}\n\t\telse {\n\t\t\tthrow new Error(\"Callback must return BuilderNode\");\n\t\t}\n\t}\n\n\t/**\n\t * Returns a JSON serializable representation of the data that is API compliant.\n\t * \n\t * @returns {object.<string, *>}\n\t */\n\ttoJSON() {\n\t\tlet obj = {\n\t\t\tprocess_id: this.spec.id,\n\t\t\targuments: {}\n\t\t};\n\t\tif (this.namespace) {\n\t\t\tobj.namespace = this.namespace;\n\t\t}\n\t\tfor(let name in this.arguments) {\n\t\t\tif (typeof this.arguments[name] !== 'undefined') {\n\t\t\t\tobj.arguments[name] = this.exportArgument(this.arguments[name], name);\n\t\t\t}\n\t\t}\n\t\tif (typeof this.description !== 'function') {\n\t\t\tobj.description = this.description;\n\t\t}\n\t\telse if (typeof this._description === 'string') {\n\t\t\tobj.description = this._description;\n\t\t}\n\t\tif (this.result) {\n\t\t\tobj.result = true;\n\t\t}\n\t\treturn obj;\n\t}\n\n\t/**\n\t * Returns the reference object for this node.\n\t * \n\t * @returns {FromNode}\n\t */\n\tref() {\n\t\treturn { from_node: this.id };\n\t}\n\n}\n\nmodule.exports = BuilderNode;\n","\"use strict\";\n\n/**\n * A class that represents a process parameter. \n * \n * This is used for two things:\n * 1. You can create process parameters (placeholders) with `new Parameter()`.\n * 2. This is passed to functions for the parameters of the sub-process.\n * \n * For the second case, you can access array elements referred to by the parameter\n * with a simplified notation: \n * \n * ```\n * function(data, context) {\n *     data['B1'] // Accesses the B1 element of the array by label\n *     data[1] // Accesses the second element of the array by index\n * }\n * ```\n * \n * Those array calls create corresponding `array_element` nodes in the process. So it's\n * equivalent to\n * `this.array_element(data, undefined, 'B1')` or \n * `this.array_element(data, 1)` respectively.\n * \n * Simple access to numeric labels is not supported. You need to use `array_element` directly, e.g.\n * `this.array_element(data, undefined, 1)`.\n */\nclass Parameter {\n\n\t/**\n\t * Creates a new parameter instance, but proxies calls to it\n\t * so that array access is possible (see class description).\n\t * \n\t * @static\n\t * @param {Builder} builder \n\t * @param {string} parameterName \n\t * @returns {Proxy<Parameter>}\n\t */\n\tstatic create(builder, parameterName) {\n\t\tlet parameter = new Parameter(parameterName, null);\n\t\tif (typeof Proxy !== \"undefined\") {\n\t\t\treturn new Proxy(parameter, {\n\t\t\t\t// @ts-ignore\n\t\t\t\tnodeCache: {},\n\t\t\t\t/**\n\t\t\t\t * Getter for array access (see class description).\n\t\t\t\t * \n\t\t\t\t * @ignore\n\t\t\t\t * @param {object} target \n\t\t\t\t * @param {string|number|symbol} name \n\t\t\t\t * @param {?*} receiver \n\t\t\t\t * @returns {*}\n\t\t\t\t */\n\t\t\t\tget(target, name, receiver) {\n\t\t\t\t\tif (!Reflect.has(target, name)) {\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\tif (!this.nodeCache[name]) {\n\t\t\t\t\t\t\tlet args = {\n\t\t\t\t\t\t\t\tdata: parameter\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tif (typeof name === 'string' && name.match(/^(0|[1-9]\\d*)$/)) {\n\t\t\t\t\t\t\t\targs.index = parseInt(name, 10);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\targs.label = name;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// We assume array_element exists\n\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\tthis.nodeCache[name] = builder.process(\"array_element\", args);\n\t\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\treturn this.nodeCache[name];\n\t\t\t\t\t}\n\t\t\t\t\treturn Reflect.get(target, name, receiver);\n\t\t\t\t},\n\t\t\t\t/**\n\t\t\t\t * Setter for array access.\n\t\t\t\t * \n\t\t\t\t * Usually fails as write access to arrays is not supported.\n\t\t\t\t * \n\t\t\t\t * @ignore\n\t\t\t\t * @param {object} target \n\t\t\t\t * @param {string|number|symbol} name \n\t\t\t\t * @param {*} value \n\t\t\t\t * @param {?*} receiver \n\t\t\t\t * @returns {boolean}\n\t\t\t\t */\n\t\t\t\tset(target, name, value, receiver) {\n\t\t\t\t\tif (!Reflect.has(target, name)) {\n\t\t\t\t\t\tthrow new Error('Simplified array access is read-only');\n\t\t\t\t\t}\n\t\t\t\t\treturn Reflect.set(target, name, value, receiver);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\tthrow new Error('Simplified array access not supported, use array_element directly');\n\t\t}\n\t}\n\t\n\t/**\n\t * Creates a new process parameter.\n\t * \n\t * @param {string} name - Name of the parameter.\n\t * @param {object.<string, *>|string} schema - The schema for the parameter. Can be either an object compliant to JSON Schema or a string with a JSON Schema compliant data type, e.g. `string`.\n\t * @param {string} description - A description for the parameter\n\t * @param {*} defaultValue - An optional default Value for the parameter. If set, make the parameter optional. If not set, the parameter is required. Defaults to `undefined`.\n\t */\n\tconstructor(name, schema = {}, description = \"\", defaultValue = undefined) {\n\t\tthis.name = name;\n\t\tthis.spec = {\n\t\t\tname: name,\n\t\t\tschema: typeof schema === 'string' ? { type: schema } : schema,\n\t\t\tdescription: description,\n\t\t};\n\t\t// No support for experimental and deprecated yet\n\t\tif (typeof defaultValue !== 'undefined') {\n\t\t\tthis.spec.optional = true;\n\t\t\tthis.spec.default = defaultValue;\n\t\t}\n\t}\n\n\t/**\n\t * Returns a JSON serializable representation of the data that is API compliant.\n\t * \n\t * @returns {object.<string, *>}\n\t */\n\ttoJSON() {\n\t\treturn this.spec;\n\t}\n\n\t/**\n\t * Returns the reference object for this parameter.\n\t * \n\t * @returns {FromParameter}\n\t */\n\tref() {\n\t\treturn { from_parameter: this.name };\n\t}\n\n}\n\nmodule.exports = Parameter;\n","/*\n  Copyright (C) 2011 Ariya Hidayat <ariya.hidayat@gmail.com>\n  Copyright (C) 2010 Ariya Hidayat <ariya.hidayat@gmail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n    * Neither the name of the <organization> nor the\n      names of its contributors may be used to endorse or promote products\n      derived from this software without specific prior written permission.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/* eslint-disable jsdoc/require-jsdoc */\n/**\n * @ignore\n */\nlet TapDigit = {\n    Token: {\n        Operator: 'Operator',\n        Identifier: 'Identifier',\n        Number: 'Number'\n    }\n};\n\nconst SUP_MAPPING = {\n    '⁰': 0,\n    '¹': 1,\n    '²': 2,\n    '³': 3,\n    '⁴': 4,\n    '⁵': 5,\n    '⁶': 6,\n    '⁷': 7,\n    '⁸': 8,\n    '⁹': 9\n};\nconst SUP_STRING = Object.keys(SUP_MAPPING).join('');\n\nTapDigit.Lexer = function () {\n    let expression = '',\n        length = 0,\n        index = 0,\n        marker = 0,\n        T = TapDigit.Token;\n\n    function peekNextChar() {\n        let idx = index;\n        return ((idx < length) ? expression.charAt(idx) : '\\x00');\n    }\n\n    function getNextChar() {\n        let ch = '\\x00',\n            idx = index;\n        if (idx < length) {\n            ch = expression.charAt(idx);\n            index += 1;\n        }\n        return ch;\n    }\n\n    function isWhiteSpace(ch) {\n        return (ch === '\\u0009') || (ch === ' ') || (ch === '\\u00A0');\n    }\n\n    function isLetter(ch) {\n        return (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z');\n    }\n\n    function isDecimalDigit(ch) {\n        return (ch >= '0') && (ch <= '9');\n    }\n\n    function createToken(type, value) {\n        return {\n            type: type,\n            value: value,\n            start: marker,\n            end: index - 1\n        };\n    }\n\n    function skipSpaces() {\n        let ch;\n\n        while (index < length) {\n            ch = peekNextChar();\n            if (!isWhiteSpace(ch)) {\n                break;\n            }\n            getNextChar();\n        }\n    }\n\n    function scanOperator() {\n        let ch = peekNextChar();\n        if (('+-*/()^,' + SUP_STRING).indexOf(ch) >= 0) {\n            return createToken(T.Operator, getNextChar());\n        }\n        return undefined;\n    }\n\n    function isIdentifierStart(ch) {\n        return (ch === '_') || (ch === '#') || (ch === '$') || isLetter(ch);\n    }\n\n    function isAdditionalNamespaceChar(ch) {\n        return (ch === '-') || (ch === '.') || (ch === '~') || (ch === '@');\n    }\n\n    function isIdentifierPart(ch, ns = false) {\n        return (ch === '_') || isLetter(ch) || isDecimalDigit(ch) || (ns && isAdditionalNamespaceChar(ch));\n    }\n\n    function scanIdentifier() {\n        let startCh = peekNextChar();\n        if (!isIdentifierStart(startCh)) {\n            return undefined;\n        }\n\n        let id = getNextChar();\n        let ns = false;\n        while (true) {\n            let ch = peekNextChar();\n            // If the first character is a $, it is allowed that more $ follow directly after\n            if (startCh === '$') {\n                if (ch !== '$') {\n                    startCh = ''; // Stop allowing $ once the first non-$ has been found\n                } // else: allowed\n            }\n            else if (ch === '@') {\n                ns = true;\n            }\n            else if (!isIdentifierPart(ch, ns)) {\n                break;\n            }\n            id += getNextChar();\n        }\n\n        return createToken(T.Identifier, id);\n    }\n\n    function scanNumber() {\n        let ch;\n        let number;\n\n        ch = peekNextChar();\n        if (!isDecimalDigit(ch) && (ch !== '.')) {\n            return undefined;\n        }\n\n        number = '';\n        if (ch !== '.') {\n            number = getNextChar();\n            while (true) {\n                ch = peekNextChar();\n                if (!isDecimalDigit(ch)) {\n                    break;\n                }\n                number += getNextChar();\n            }\n        }\n\n        if (ch === '.') {\n            number += getNextChar();\n            while (true) {\n                ch = peekNextChar();\n                if (!isDecimalDigit(ch)) {\n                    break;\n                }\n                number += getNextChar();\n            }\n        }\n\n        if (ch === 'e' || ch === 'E') {\n            number += getNextChar();\n            ch = peekNextChar();\n            if (ch === '+' || ch === '-' || isDecimalDigit(ch)) {\n                number += getNextChar();\n                while (true) {\n                    ch = peekNextChar();\n                    if (!isDecimalDigit(ch)) {\n                        break;\n                    }\n                    number += getNextChar();\n                }\n            } else {\n                ch = 'character ' + ch;\n                if (index >= length) {\n                    ch = '<end>';\n                }\n                throw new SyntaxError('Unexpected ' + ch + ' after the exponent sign');\n            }\n        }\n\n        if (number === '.') {\n            throw new SyntaxError('Expecting decimal digits after the dot sign');\n        }\n\n        return createToken(T.Number, number);\n    }\n\n    function reset(str) {\n        expression = str;\n        length = str.length;\n        index = 0;\n    }\n\n    function next() {\n        let token;\n\n        skipSpaces();\n        if (index >= length) {\n            return undefined;\n        }\n\n        marker = index;\n\n        token = scanNumber();\n        if (typeof token !== 'undefined') {\n            return token;\n        }\n\n        token = scanOperator();\n        if (typeof token !== 'undefined') {\n            return token;\n        }\n\n        token = scanIdentifier();\n        if (typeof token !== 'undefined') {\n            return token;\n        }\n\n\n        throw new SyntaxError('Unknown token from character ' + peekNextChar());\n    }\n\n    function peek() {\n        let token;\n        let idx = index;\n        try {\n            token = next();\n            delete token.start;\n            delete token.end;\n        } catch (e) {\n            token = undefined;\n        }\n        index = idx;\n\n        return token;\n    }\n\n    return {\n        reset: reset,\n        next: next,\n        peek: peek\n    };\n};\n\nTapDigit.Parser = function () {\n    let lexer = new TapDigit.Lexer(),\n    T = TapDigit.Token;\n\n    function matchOp(token, op) {\n        return (typeof token !== 'undefined') &&\n            token.type === T.Operator &&\n            op.includes(token.value);\n    }\n\n    // ArgumentList := Expression |\n    //                 Expression ',' ArgumentList\n    function parseArgumentList() {\n        let token;\n        let expr;\n        let args = [];\n\n        while (true) {\n            expr = parseExpression();\n            if (typeof expr === 'undefined') {\n                // @todo maybe throw exception?\n                break;\n            }\n            args.push(expr);\n            token = lexer.peek();\n            if (!matchOp(token, ',')) {\n                break;\n            }\n            lexer.next();\n        }\n\n        return args;\n    }\n\n    // FunctionCall ::= Identifier '(' ')' ||\n    //                  Identifier '(' ArgumentList ')'\n    function parseFunctionCall(name) {\n        let args = [];\n        let token = lexer.next();\n        if (!matchOp(token, '(')) {\n            throw new SyntaxError('Expecting ( in a function call \"' + name + '\"');\n        }\n\n        token = lexer.peek();\n        if (!matchOp(token, ')')) {\n            args = parseArgumentList();\n        }\n\n        token = lexer.next();\n        if (!matchOp(token, ')')) {\n            throw new SyntaxError('Expecting ) in a function call \"' + name + '\"');\n        }\n\n        return {\n            'FunctionCall' : {\n                'name': name,\n                'args': args\n            }\n        };\n    }\n\n    // Primary ::= Identifier |\n    //             Number |\n    //             '(' Expression ')' |\n    //             FunctionCall\n    function parsePrimary() {\n        let expr;\n        let token = lexer.peek();\n        if (typeof token === 'undefined') {\n            throw new SyntaxError('Unexpected termination of expression');\n        }\n\n        if (token.type === T.Identifier) {\n            token = lexer.next();\n            if (matchOp(lexer.peek(), '(')) {\n                return parseFunctionCall(token.value);\n            } else {\n                return {\n                    'Identifier': token.value\n                };\n            }\n        }\n\n        if (token.type === T.Number) {\n            token = lexer.next();\n            return {\n                'Number': token.value\n            };\n        }\n\n        if (matchOp(token, '(')) {\n            lexer.next();\n            expr = parseExpression();\n            token = lexer.next();\n            if (!matchOp(token, ')')) {\n                throw new SyntaxError('Expecting )');\n            }\n            return {\n                'Expression': expr\n            };\n        }\n\n        throw new SyntaxError('Parse error, can not process token ' + token.value);\n    }\n\n    // Unary ::= Primary |\n    //           '-' Unary\n    function parseUnary() {\n        let expr;\n        let token = lexer.peek();\n        if (matchOp(token, '-+')) {\n            token = lexer.next();\n            expr = parseUnary();\n            return {\n                'Unary': {\n                    operator: token.value,\n                    expression: expr\n                }\n            };\n        }\n\n        return parsePrimary();\n    }\n\n    function parseSuperscript(ch) {\n        if (typeof SUP_MAPPING[ch] === 'number') {\n            return {'Number': SUP_MAPPING[ch]};\n        }\n        return null;\n    }\n\n    // Power ::= Unary |\n    //           Power '^' Unary |\n    //           Power⁰¹²³⁴⁵⁶⁷⁸⁹\n    function parsePower() {\n        let expr = parseUnary();\n        let token = lexer.peek();\n        while (matchOp(token, '^' + SUP_STRING)) {\n            token = lexer.next();\n            expr = {\n                'Binary': {\n                    operator: '^',\n                    left: expr,\n                    right: token.value !== '^' ? parseSuperscript(token.value) : parseUnary()\n                }\n            };\n            token = lexer.peek();\n        }\n        return expr;\n    }\n\n    // Multiplicative ::= Power |\n    //                    Multiplicative '*' Power |\n    //                    Multiplicative '/' Power |\n    function parseMultiplicative() {\n        let expr = parsePower();\n        let token = lexer.peek();\n        while (matchOp(token, '*/')) {\n            token = lexer.next();\n            expr = {\n                'Binary': {\n                    operator: token.value,\n                    left: expr,\n                    right: parsePower()\n                }\n            };\n            token = lexer.peek();\n        }\n        return expr;\n    }\n\n    // Additive ::= Multiplicative |\n    //              Additive '+' Multiplicative |\n    //              Additive '-' Multiplicative\n    function parseAdditive() {\n        let expr = parseMultiplicative();\n        let token = lexer.peek();\n        while (matchOp(token, '+-')) {\n            token = lexer.next();\n            expr = {\n                'Binary': {\n                    operator: token.value,\n                    left: expr,\n                    right: parseMultiplicative()\n                }\n            };\n            token = lexer.peek();\n        }\n        return expr;\n    }\n\n    // Expression ::= Additive\n    function parseExpression() {\n        return parseAdditive();\n    }\n\n    function parse(expression) {\n        lexer.reset(expression);\n        let expr = parseExpression();\n        let token = lexer.next();\n        if (typeof token !== 'undefined') {\n            throw new SyntaxError('Unexpected token ' + token.value);\n        }\n\n        return {\n            'Expression': expr\n        };\n    }\n\n    return {\n        parse: parse\n    };\n};\n\nmodule.exports = TapDigit;\n","const Utils = require('@openeo/js-commons/src/utils');\n\nconst FEATURE_MAP = {\n\t// Discovery\n\tcapabilities: true,\n\tlistFileTypes: 'get /file_formats',\n\tlistServiceTypes: 'get /service_types',\n\tlistUdfRuntimes: 'get /udf_runtimes',\n\t// Collections\n\tlistCollections: 'get /collections',\n\tdescribeCollection: 'get /collections/{collection_id}',\n\tlistCollectionItems: 'get /collections/{collection_id}/items',\n\t// Processes\n\tlistProcesses: 'get /processes',\n\tdescribeProcess: 'get /processes',\n\t// Auth / Account\n\tlistAuthProviders: true,\n\tauthenticateOIDC: 'get /credentials/oidc',\n\tauthenticateBasic: 'get /credentials/basic',\n\tdescribeAccount: 'get /me',\n\t// Files\n\tlistFiles: 'get /files',\n\tgetFile: 'get /files', // getFile is a virtual function and doesn't request an endpoint, but get /files should be available nevertheless.\n\tuploadFile: 'put /files/{path}',\n\tdownloadFile: 'get /files/{path}',\n\tdeleteFile: 'delete /files/{path}',\n\t// User-Defined Processes\n\tvalidateProcess: 'post /validation',\n\tlistUserProcesses: 'get /process_graphs',\n\tdescribeUserProcess: 'get /process_graphs/{process_graph_id}',\n\tgetUserProcess: 'get /process_graphs/{process_graph_id}',\n\tsetUserProcess: 'put /process_graphs/{process_graph_id}',\n\treplaceUserProcess: 'put /process_graphs/{process_graph_id}',\n\tdeleteUserProcess: 'delete /process_graphs/{process_graph_id}',\n\t// Processing\n\tcomputeResult: 'post /result',\n\tlistJobs: 'get /jobs',\n\tcreateJob: 'post /jobs',\n\tlistServices: 'get /services',\n\tcreateService: 'post /services',\n\tgetJob: 'get /jobs/{job_id}',\n\tdescribeJob: 'get /jobs/{job_id}',\n\tupdateJob: 'patch /jobs/{job_id}',\n\tdeleteJob: 'delete /jobs/{job_id}',\n\testimateJob: 'get /jobs/{job_id}/estimate',\n\tdebugJob: 'get /jobs/{job_id}/logs',\n\tstartJob: 'post /jobs/{job_id}/results',\n\tstopJob: 'delete /jobs/{job_id}/results',\n\tlistResults: 'get /jobs/{job_id}/results',\n\tdownloadResults: 'get /jobs/{job_id}/results',\n\t// Web services\n\tdescribeService: 'get /services/{service_id}',\n\tgetService: 'get /services/{service_id}',\n\tupdateService: 'patch /services/{service_id}',\n\tdeleteService: 'delete /services/{service_id}',\n\tdebugService: 'get /services/{service_id}/logs',\n};\n\n/**\n * Capabilities of a back-end.\n */\nclass Capabilities {\n\n\t/**\n\t * Creates a new Capabilities object from an API-compatible JSON response.\n\t * \n\t * @param {object.<string, *>} data - A capabilities response compatible to the API specification for `GET /`.\n\t * @throws {Error}\n\t */\n\tconstructor(data) {\n\n\t\t/**\n\t\t * @private\n\t\t * @type {object.<string, *>}\n\t\t */\n\t\tthis.data = data;\n\n\t\t/**\n\t\t * @private\n\t\t * @ignore\n\t\t * @type {object.<string, string>}\n\t\t */\n\t\tthis.featureMap = FEATURE_MAP;\n\n\t\t/**\n\t\t * @private\n\t\t * @type {Array.<string>}\n\t\t */\n\t\tthis.features = [];\n\n\t\tthis.validate();\n\t\tthis.init();\n\t}\n\n\t/**\n\t * Validates the capabilities.\n\t * \n\t * Throws an error in case of an issue, otherwise just passes.\n\t * \n\t * @protected\n\t * @throws {Error}\n\t */\n\tvalidate() {\n\t\tif(!Utils.isObject(this.data)) {\n\t\t\tthrow new Error(\"No capabilities retrieved.\");\n\t\t}\n\t\telse if(!this.data.api_version) {\n\t\t\tthrow new Error(\"Invalid capabilities: No API version retrieved\");\n\t\t}\n\t\telse if(!Array.isArray(this.data.endpoints)) {\n\t\t\tthrow new Error(\"Invalid capabilities: No endpoints retrieved\");\n\t\t}\n\t}\n\n\t/**\n\t * Initializes the class.\n\t * \n\t * @protected\n\t */\n\tinit() {\n\t\tthis.features = this.data.endpoints\n\t\t\t// Flatten features to be compatible with the feature map.\n\t\t\t.map(e => e.methods.map(method => (method + ' ' + e.path).toLowerCase()))\n\t\t\t.reduce((flat, next) => flat.concat(next), []); // .flat(1) once browser support for ECMAscript 10/2019 gets better\n\t}\n\n\t/**\n\t * Returns the capabilities response as a JSON serializable representation of the data that is API compliant.\n\t * \n\t * @returns {object.<string, *>} - A reference to the capabilities response.\n\t */\n\ttoJSON() {\n\t\treturn this.data;\n\t}\n\n\t/**\n\t * Returns the openEO API version implemented by the back-end.\n\t * \n\t * @returns {string} openEO API version number.\n\t */\n\tapiVersion() {\n\t\treturn this.data.api_version;\n\t}\n\n\t/**\n\t * Returns the back-end version number.\n\t * \n\t * @returns {string} openEO back-end version number.\n\t */\n\tbackendVersion() {\n\t\treturn this.data.backend_version;\n\t}\n\n\t/**\n\t * Returns the back-end title.\n\t * \n\t * @returns {string} Title\n\t */\n\ttitle() {\n\t\treturn typeof this.data.title === 'string' ? this.data.title : \"\";\n\t}\n\n\t/**\n\t * Returns the back-end description.\n\t * \n\t * @returns {string} Description\n\t */\n\tdescription() {\n\t\treturn typeof this.data.description === 'string' ? this.data.description : \"\";\n\t}\n\n\t/**\n\t * Is the back-end suitable for use in production?\n\t * \n\t * @returns {boolean} true = stable/production, false = unstable\n\t */\n\tisStable() {\n\t\treturn this.data.production === true;\n\t}\n\n\t/**\n\t * Returns the links.\n\t * \n\t * @returns {Array.<Link>} Array of link objects (href, title, rel, type)\n\t */\n\tlinks() {\n\t\treturn Array.isArray(this.data.links) ? this.data.links : [];\n\t}\n\n\t/**\n\t * Lists all supported features.\n\t * \n\t * @returns {Array.<string>} An array of supported features.\n\t */\n\tlistFeatures() {\n\t\tlet features = [];\n\t\tfor(let feature in this.featureMap) {\n\t\t\tif (this.featureMap[feature] === true || this.features.includes(this.featureMap[feature])) {\n\t\t\t\tfeatures.push(feature);\n\t\t\t}\n\t\t}\n\t\treturn features.sort();\n\t}\n\n\t/**\n\t * Check whether a feature is supported by the back-end.\n\t * \n\t * @param {string} methodName - A feature name (corresponds to the JS client method names, see also the feature map for allowed values).\n\t * @returns {boolean} `true` if the feature is supported, otherwise `false`.\n\t */\n\thasFeature(methodName) {\n\t\treturn this.featureMap[methodName] === true || this.features.some(e => e === this.featureMap[methodName]);\n\t}\n\n\t/**\n\t * Get the billing currency.\n\t * \n\t * @returns {string | null} The billing currency or `null` if not available.\n\t */\n\tcurrency() {\n\t\treturn (Utils.isObject(this.data.billing) && typeof this.data.billing.currency === 'string' ? this.data.billing.currency : null);\n\t}\n\n\t/**\n\t * List all billing plans.\n\t * \n\t * @returns {Array.<BillingPlan>} Billing plans\n\t */\n\tlistPlans() {\n\t\tif (Utils.isObject(this.data.billing) && Array.isArray(this.data.billing.plans)) {\n\t\t\tlet defaultPlan = typeof this.data.billing.default_plan === 'string' ? this.data.billing.default_plan.toLowerCase() : null;\n\t\t\treturn this.data.billing.plans.map(plan => {\n\t\t\t\tlet addition = {\n\t\t\t\t\tdefault: (defaultPlan === plan.name.toLowerCase())\n\t\t\t\t};\n\t\t\t\treturn Object.assign({}, plan, addition);\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\treturn [];\n\t\t}\n\t}\n\n\t/**\n\t * Migrates a response, if required.\n\t * \n\t * @param {AxiosResponse} response \n\t * @protected\n\t * @returns {AxiosResponse}\n\t */\n\tmigrate(response) { // eslint-disable-line no-unused-vars\n\t\treturn response;\n\t}\n}\n\nmodule.exports = Capabilities;\n","const Environment = require('./env');\nconst Utils = require('@openeo/js-commons/src/utils');\nconst ProcessRegistry = require('@openeo/js-commons/src/processRegistry');\nconst axios = require('axios').default;\nconst StacMigrate = require('@radiantearth/stac-migrate');\n\nconst AuthProvider = require('./authprovider');\nconst BasicProvider = require('./basicprovider');\nconst OidcProvider = require('./oidcprovider');\n\nconst { GdcCapabilities, Migrate } = require('./gdc');\nconst FileTypes = require('./filetypes');\nconst UserFile = require('./userfile');\nconst Job = require('./job');\nconst UserProcess = require('./userprocess');\nconst Service = require('./service');\n\nconst Builder = require('./builder/builder');\nconst BuilderNode = require('./builder/node');\n\n\nconst CONFORMANCE_RELS = [\n\t'conformance',\n\t'http://www.opengis.net/def/rel/ogc/1.0/conformance'\n];\n\n/**\n * A connection to a back-end.\n */\nclass Connection {\n\n\t/**\n\t * Creates a new Connection.\n\t * \n\t * @param {string} baseUrl - The versioned URL or the back-end instance.\n\t * @param {Options} [options={}] - Additional options for the connection.\n\t * @param {?string} [url=null] - User-provided URL of the backend connected to.\n\t */\n\tconstructor(baseUrl, options = {}, url = null) {\n\t\t/**\n\t\t * User-provided URL of the backend connected to.\n\t\t * \n\t\t * `null` if not given and the connection was directly made to a versioned instance of the back-end.\n\t\t * \n\t\t * @protected\n\t\t * @type {string | null}\n\t\t */\n\t\tthis.url = url;\n\t\t/**\n\t\t * The versioned URL or the back-end instance.\n\t\t * \n\t\t * @protected\n\t\t * @type {string}\n\t\t */\n\t\tthis.baseUrl = Utils.normalizeUrl(baseUrl);\n\t\t/**\n\t\t * Auth Provider cache\n\t\t * \n\t\t * @protected\n\t\t * @type {Array.<AuthProvider> | null}\n\t\t */\n\t\tthis.authProviderList = null;\n\t\t/**\n\t\t * Current auth provider\n\t\t * \n\t\t * @protected\n\t\t * @type {AuthProvider | null}\n\t\t */\n\t\tthis.authProvider = null;\n\t\t/**\n\t\t * Capability cache\n\t\t * \n\t\t * @protected\n\t\t * @type {Capabilities | null}\n\t\t */\n\t\tthis.capabilitiesObject = null;\n\t\t/**\n\t\t * Listeners for events.\n\t\t * \n\t\t * @protected\n\t\t * @type {object.<string|Function>}\n\t\t */\n\t\tthis.listeners = {};\n\t\t/**\n\t\t * Additional options for the connection.\n\t\t * \n\t\t * @protected\n\t\t * @type {Options}\n\t\t */\n\t\tthis.options = options;\n\t\t/**\n\t\t * Process cache\n\t\t * \n\t\t * @protected\n\t\t * @type {ProcessRegistry}\n\t\t */\n\t\tthis.processes = new ProcessRegistry([], Boolean(options.addNamespaceToProcess));\n\t\tthis.processes.listeners.push((...args) => this.emit('processesChanged', ...args));\n\t}\n\n\t/**\n\t * Initializes the connection by requesting the capabilities.\n\t * \n\t * @async\n\t * @protected\n\t * @returns {Promise<Capabilities>} Capabilities\n\t * @throws {Error}\n\t */\n\tasync init() {\n\t\tlet response = await this._get('/');\n\t\tlet data = Object.assign({}, response.data);\n\t\tdata.links = this.makeLinksAbsolute(data.links, response);\n\n\t\tif (!Array.isArray(data.conformsTo) && Array.isArray(data.links)) {\n\t\t\tlet conformanceLink = this._getLinkHref(data.links, CONFORMANCE_RELS);\n\t\t\tif (conformanceLink) {\n\t\t\t\tlet response2 = await this._get(conformanceLink);\n\t\t\t\tif (Utils.isObject(response2.data) && Array.isArray(response2.data.conformsTo)) {\n\t\t\t\t\tdata.conformsTo = response2.data.conformsTo;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tMigrate.connection = this;\n\t\tthis.capabilitiesObject = new GdcCapabilities(data);\n\t\treturn this.capabilitiesObject;\n\t}\n\n\t/**\n\t * Refresh the cache for processes.\n\t * \n\t * @async\n\t * @protected\n\t * @returns {Promise}\n\t */\n\tasync refreshProcessCache() {\n\t\tif (this.processes.count() === 0) {\n\t\t\treturn;\n\t\t}\n\t\tlet promises = this.processes.namespaces().map(namespace => {\n\t\t\tlet fn = () => Promise.resolve();\n\t\t\tif (namespace === 'user') {\n\t\t\t\tlet userProcesses = this.processes.namespace('user');\n\t\t\t\tif (!this.isAuthenticated()) {\n\t\t\t\t\tfn = () => (this.processes.remove(null, 'user') ? Promise.resolve() : Promise.reject(new Error(\"Can't clear user processes\")));\n\t\t\t\t}\n\t\t\t\telse if (this.capabilities().hasFeature('listUserProcesses')) {\n\t\t\t\t\tfn = () => this.listUserProcesses(userProcesses);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (this.capabilities().hasFeature('listProcesses')) {\n\t\t\t\tfn = () => this.listProcesses(namespace);\n\t\t\t}\n\t\t\treturn fn().catch(error => console.warn(`Could not update processes for namespace '${namespace}' due to an error: ${error.message}`));\n\t\t});\n\t\treturn await Promise.all(promises);\n\t}\n\n\t/**\n\t * Returns the URL of the versioned back-end instance currently connected to.\n\t * \n\t * @returns {string} The versioned URL or the back-end instance.\n\t */\n\tgetBaseUrl() {\n\t\treturn this.baseUrl;\n\t}\n\n\t/**\n\t * Returns the user-provided URL of the back-end currently connected to.\n\t * \n\t * @returns {string} The URL or the back-end.\n\t */\n\tgetUrl() {\n\t\treturn this.url || this.baseUrl;\n\t}\n\n\t/**\n\t * Returns the capabilities of the back-end.\n\t * \n\t * @returns {Capabilities} Capabilities\n\t */\n\tcapabilities() {\n\t\treturn this.capabilitiesObject;\n\t}\n\n\t/**\n\t * List the supported output file formats.\n\t * \n\t * @async\n\t * @returns {Promise<FileTypes>} A response compatible to the API specification.\n\t * @throws {Error}\n\t */\n\tasync listFileTypes() {\n\t\tlet response = await this._get('/file_formats');\n\t\treturn new FileTypes(response.data);\n\t}\n\n\t/**\n\t * List the supported secondary service types.\n\t * \n\t * @async\n\t * @returns {Promise<object.<string, ServiceType>>} A response compatible to the API specification.\n\t * @throws {Error}\n\t */\n\tasync listServiceTypes() {\n\t\tlet response = await this._get('/service_types');\n\t\treturn response.data;\n\t}\n\n\t/**\n\t * List the supported UDF runtimes.\n\t * \n\t * @async\n\t * @returns {Promise<object.<string, UdfRuntime>>} A response compatible to the API specification.\n\t * @throws {Error}\n\t */\n\tasync listUdfRuntimes() {\n\t\tlet response = await this._get('/udf_runtimes');\n\t\treturn response.data;\n\t}\n\n\t/**\n\t * List all collections available on the back-end.\n\t * \n\t * The collections returned always comply to the latest STAC version (currently 1.0.0). \n\t * \n\t * @async\n\t * @returns {Promise<Collections>} A response compatible to the API specification.\n\t * @throws {Error}\n\t */\n\tasync listCollections() {\n\t\tlet response = await this._get('/collections');\n\t\tif (Utils.isObject(response.data) && Array.isArray(response.data.collections)) {\n\t\t\tresponse.data.collections = response.data.collections.map(collection => {\n\t\t\t\tif (collection.stac_version) {\n\t\t\t\t\treturn StacMigrate.collection(collection);\n\t\t\t\t}\n\t\t\t\treturn collection;\n\t\t\t});\n\t\t}\n\t\treturn response.data;\n\t}\n\n\t/**\n\t * Get further information about a single collection.\n\t * \n\t * The collection returned always complies to the latest STAC version (currently 1.0.0). \n\t * \n\t * @async\n\t * @param {string} collectionId - Collection ID to request further metadata for.\n\t * @returns {Promise<Collection>} - A response compatible to the API specification.\n\t * @throws {Error}\n\t */\n\tasync describeCollection(collectionId) {\n\t\tlet response = await this._get('/collections/' + collectionId);\n\t\tif (response.data.stac_version) {\n\t\t\treturn StacMigrate.collection(response.data);\n\t\t}\n\t\telse {\n\t\t\treturn response.data;\n\t\t}\n\t}\n\n\t/**\n\t * Loads items for a specific image collection.\n\t * May not be available for all collections.\n\t * \n\t * The items returned always comply to the latest STAC version (currently 1.0.0). \n\t * \n\t * This is an experimental API and is subject to change.\n\t * \n\t * @async\n\t * @param {string} collectionId - Collection ID to request items for.\n\t * @param {?Array.<number>} [spatialExtent=null] - Limits the items to the given bounding box in WGS84:\n\t * 1. Lower left corner, coordinate axis 1\n\t * 2. Lower left corner, coordinate axis 2\n\t * 3. Upper right corner, coordinate axis 1\n\t * 4. Upper right corner, coordinate axis 2\n\t * @param {?Array} [temporalExtent=null] - Limits the items to the specified temporal interval.\n\t * The interval has to be specified as an array with exactly two elements (start, end) and\n\t * each must be either an RFC 3339 compatible string or a Date object.\n\t * Also supports open intervals by setting one of the boundaries to `null`, but never both.\n\t * @param {?number} [limit=null] - The amount of items per request/page as integer. If `null` (default), the back-end decides.\n\t * @yields {Promise<ItemCollection>} A response compatible to the API specification.\n\t * @throws {Error}\n\t */\n\tasync * listCollectionItems(collectionId, spatialExtent = null, temporalExtent = null, limit = null) {\n\t\tlet page = 1;\n\t\tlet nextUrl = '/collections/' + collectionId + '/items';\n\t\twhile(nextUrl) {\n\t\t\tlet params = {};\n\t\t\tif (page === 1) {\n\t\t\t\tif (Array.isArray(spatialExtent)) {\n\t\t\t\t\tparams.bbox = spatialExtent.join(',');\n\t\t\t\t}\n\t\t\t\tif (Array.isArray(temporalExtent)) {\n\t\t\t\t\tparams.datetime = temporalExtent\n\t\t\t\t\t\t.map(e => {\n\t\t\t\t\t\t\tif (e instanceof Date) {\n\t\t\t\t\t\t\t\treturn e.toISOString();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (typeof e === 'string') {\n\t\t\t\t\t\t\t\treturn e;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn '..'; // Open date range\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.join('/');\n\t\t\t\t}\n\t\t\t\tif (limit > 0) {\n\t\t\t\t\tparams.limit = limit;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet response = await this._get(nextUrl, params);\n\t\t\tif (Utils.isObject(response.data) && Array.isArray(response.data.features)) {\n\t\t\t\tresponse.data.features = response.data.features.map(item => {\n\t\t\t\t\tif (item.stac_version) {\n\t\t\t\t\t\treturn StacMigrate.item(item);\n\t\t\t\t\t}\n\t\t\t\t\treturn item;\n\t\t\t\t});\n\t\t\t}\n\t\t\tyield response.data;\n\n\t\t\tpage++;\n\t\t\tlet links = this.makeLinksAbsolute(response.data.links);\n\t\t\tnextUrl = this._getLinkHref(links, 'next');\n\t\t}\n\t}\n\n\t/**\n\t * Normalisation of the namespace to a value that is compatible with the OpenEO specs - EXPERIMENTAL.\n\t *\n\t * This is required to support UDP that are shared as public. These can only be executed with providing the full URL\n\t * (e.g. https://<backend>/processes/<namespace>/<process_id>) as the namespace value in the processing graph. For other\n\t * parts of the API (such as the listing of the processes, only the name of the namespace is required.\n\t *\n\t * This function will extract the short name of the namespace from a shareable URL.\n\t * \n\t * @protected\n\t * @param {?string} namespace - Namespace of the process\n\t * @returns {?string}\n\t */\n\tnormalizeNamespace(namespace) {\n\t\t// The pattern in https://github.com/Open-EO/openeo-api/pull/348 doesn't include the double colon yet - the regexp may change in the future\n\t\tconst matches = namespace.match( /^https?:\\/\\/.*\\/processes\\/(@?[\\w\\-.~:]+)\\/?/i);\n\t\treturn matches && matches.length > 1 ? matches[1] : namespace;\n\t}\n\n\t/**\n\t * List processes available on the back-end.\n\t * \n\t * Requests pre-defined processes by default.\n\t * Set the namespace parameter to request processes from a specific namespace.\n\t * \n\t * Note: The list of namespaces can be retrieved by calling `listProcesses` without a namespace given.\n\t * The namespaces are then listed in the property `namespaces`.\n\t * \n\t * @async\n\t * @param {?string} [namespace=null] - Namespace of the processes (default to `null`, i.e. pre-defined processes). EXPERIMENTAL!\n\t * @returns {Promise<Processes>} - A response compatible to the API specification.\n\t * @throws {Error}\n\t */\n\tasync listProcesses(namespace = null) {\n\t\tif (!namespace) {\n\t\t\tnamespace = 'backend';\n\t\t}\n\t\tlet path = (namespace === 'backend') ? '/processes' : `/processes/${this.normalizeNamespace(namespace)}`;\n\t\tlet response = await this._get(path);\n\n\t\tif (!Utils.isObject(response.data) || !Array.isArray(response.data.processes)) {\n\t\t\tthrow new Error('Invalid response received for processes');\n\t\t}\n\n\t\t// Store processes in cache\n\t\tthis.processes.remove(null, namespace);\n\t\tthis.processes.addAll(response.data.processes, namespace);\n\t\t\n\t\treturn Object.assign(response.data, {processes: this.processes.namespace(namespace)});\n\t}\n\n\t/**\n\t * Get information about a single process.\n\t * \n\t * @async\n\t * @param {string} processId - Collection ID to request further metadata for.\n\t * @param {?string} [namespace=null] - Namespace of the process (default to `null`, i.e. pre-defined processes). EXPERIMENTAL!\n\t * @returns {Promise<?Process>} - A single process as object, or `null` if none is found.\n\t * @throws {Error}\n\t * @see Connection#listProcesses\n\t */\n\tasync describeProcess(processId, namespace = null) {\n\t\tif (!namespace) {\n\t\t\tnamespace = 'backend';\n\t\t}\n\t\tif (namespace === 'backend') {\n\t\t\tawait this.listProcesses();\n\t\t}\n\t\telse {\n\t\t\tlet response = await this._get(`/processes/${this.normalizeNamespace(namespace)}/${processId}`);\n\t\t\tif (!Utils.isObject(response.data) || typeof response.data.id !== 'string') {\n\t\t\t\tthrow new Error('Invalid response received for process');\n\t\t\t}\n\t\t\tthis.processes.add(response.data, namespace);\n\t\t}\n\t\treturn this.processes.get(processId, namespace);\n\t}\n\n\t/**\n\t * Returns an object to simply build user-defined processes based upon pre-defined processes.\n\t * \n\t * @async\n\t * @param {string} id - A name for the process.\n\t * @returns {Promise<Builder>}\n\t * @throws {Error}\n\t * @see Connection#listProcesses\n\t */\n\tasync buildProcess(id) {\n\t\tawait this.listProcesses();\n\t\treturn new Builder(this.processes, null, id);\n\t}\n\n\t/**\n\t * List all authentication methods supported by the back-end.\n\t * \n\t * @async\n\t * @returns {Promise<Array.<AuthProvider>>} An array containing all supported AuthProviders (including all OIDC providers and HTTP Basic).\n\t * @throws {Error}\n\t * @see AuthProvider\n\t */\n\tasync listAuthProviders() {\n\t\tif (this.authProviderList !== null) {\n\t\t\treturn this.authProviderList;\n\t\t}\n\n\t\tthis.authProviderList = [];\n\t\tlet cap = this.capabilities();\n\n\t\t// Add OIDC providers\n\t\tif (cap.hasFeature('authenticateOIDC')) {\n\t\t\tlet res = await this._get('/credentials/oidc');\n\t\t\tlet oidcFactory = this.getOidcProviderFactory();\n\t\t\tif (Utils.isObject(res.data) && Array.isArray(res.data.providers) && typeof oidcFactory === 'function') {\n\t\t\t\tfor(let i in res.data.providers) {\n\t\t\t\t\tlet obj = oidcFactory(res.data.providers[i]);\n\t\t\t\t\tif (obj instanceof AuthProvider) {\n\t\t\t\t\t\tthis.authProviderList.push(obj);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Add Basic provider\n\t\tif (cap.hasFeature('authenticateBasic')) {\n\t\t\tthis.authProviderList.push(new BasicProvider(this));\n\t\t}\n\n\t\treturn this.authProviderList;\n\t}\n\n\t/**\n\t * This function is meant to create the OIDC providers used for authentication.\n\t * \n\t * The function gets passed a single argument that contains the\n\t * provider information as provided by the API, e.g. having the properties\n\t * `id`, `issuer`, `title` etc.\n\t * \n\t * The function must return an instance of AuthProvider or any derived class.\n\t * May return `null` if the instance can't be created.\n\t *\n\t * @callback oidcProviderFactoryFunction\n\t * @param {object.<string, *>} providerInfo - The provider information as provided by the API, having the properties `id`, `issuer`, `title` etc.\n\t * @returns {AuthProvider | null}\n\t */\n\n\t/**\n\t * Sets a factory function that creates custom OpenID Connect provider instances.\n\t * \n\t * You only need to call this if you have implemented a new AuthProvider based\n\t * on the AuthProvider interface (or OIDCProvider class), e.g. to use a\n\t * OIDC library other than oidc-client-js.\n\t * \n\t * @param {?oidcProviderFactoryFunction} [providerFactoryFunc=null]\n\t * @see AuthProvider\n\t */\n\tsetOidcProviderFactory(providerFactoryFunc) {\n\t\tthis.oidcProviderFactory = providerFactoryFunc;\n\t}\n\n\t/**\n\t * Get the OpenID Connect provider factory.\n\t * \n\t * Returns `null` if OIDC is not supported by the client or an instance\n\t * can't be created for whatever reason.\n\t * \n\t * @returns {oidcProviderFactoryFunction | null}\n\t * @see AuthProvider\n\t */\n\tgetOidcProviderFactory() {\n\t\tif (typeof this.oidcProviderFactory === 'function') {\n\t\t\treturn this.oidcProviderFactory;\n\t\t}\n\t\telse {\n\t\t\tif (OidcProvider.isSupported()) {\n\t\t\t\treturn providerInfo => new OidcProvider(this, providerInfo);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Authenticates with username and password against a back-end supporting HTTP Basic Authentication.\n\t * \n\t * DEPRECATED in favor of using `listAuthProviders` and `BasicProvider`.\n\t * \n\t * @async\n\t * @deprecated\n\t * @param {string} username \n\t * @param {string} password \n\t * @see BasicProvider\n\t * @see Connection#listAuthProviders\n\t */\n\tasync authenticateBasic(username, password) {\n\t\tlet basic = new BasicProvider(this);\n\t\tawait basic.login(username, password);\n\t}\n\n\t/**\n\t * Returns whether the user is authenticated (logged in) at the back-end or not.\n\t * \n\t * @returns {boolean} `true` if authenticated, `false` if not.\n\t */\n\tisAuthenticated() {\n\t\treturn (this.authProvider !== null);\n\t}\n\n\t/**\n\t * Emits the given event.\n\t * \n\t * @protected\n\t * @param {string} event \n\t * @param {...*} args\n\t */\n\temit(event, ...args) {\n\t\tif (typeof this.listeners[event] === 'function') {\n\t\t\tthis.listeners[event](...args);\n\t\t}\n\t}\n\n\t/**\n\t * Registers a listener with the given event.\n\t * \n\t * Currently supported:\n\t * - authProviderChanged(provider): Raised when the auth provider has changed.\n\t * - tokenChanged(token): Raised when the access token has changed.\n\t * - processesChanged(type, data, namespace): Raised when the process registry has changed (i.e. a process was added, updated or deleted).\n\t * \n\t * @param {string} event \n\t * @param {Function} callback \n\t */\n\ton(event, callback) {\n\t\tthis.listeners[event] = callback;\n\t}\n\n\t/**\n\t * Removes a listener from the given event.\n\t * \n\t * @param {string} event \n\t */\n\toff(event) {\n\t\tdelete this.listeners[event];\n\t}\n\n\t/**\n\t * Returns the AuthProvider.\n\t * \n\t * @returns {AuthProvider | null} \n\t */\n\tgetAuthProvider() {\n\t\treturn this.authProvider;\n\t}\n\n\t/**\n\t * Sets the AuthProvider.\n\t * \n\t * @param {AuthProvider} provider\n\t */\n\tsetAuthProvider(provider) {\n\t\tif (provider === this.authProvider) {\n\t\t\treturn;\n\t\t}\n\t\tif (provider instanceof AuthProvider) {\n\t\t\tthis.authProvider = provider;\n\t\t}\n\t\telse {\n\t\t\tthis.authProvider = null;\n\t\t}\n\t\tthis.emit('authProviderChanged', this.authProvider);\n\t\t// Update process cache on auth changes: https://github.com/Open-EO/openeo-js-client/issues/55\n\t\tthis.refreshProcessCache();\n\t}\n\n\t/**\n\t * Sets the authentication token for the connection.\n\t * \n\t * This creates a new custom `AuthProvider` with the given details and returns it.\n\t * After calling this function you can make requests against the API.\n\t * \n\t * This is NOT recommended to use. Only use if you know what you are doing.\n\t * It is recommended to authenticate through `listAuthProviders` or related functions.\n\t * \n\t * @param {string} type - The authentication type, e.g. `basic` or `oidc`.\n\t * @param {string} providerId - The provider identifier. For OIDC the `id` of the provider.\n\t * @param {string} token - The actual access token as given by the authentication method during the login process.\n\t * @returns {AuthProvider}\n\t */\n\tsetAuthToken(type, providerId, token) {\n\t\tlet provider = new AuthProvider(type, this, {\n\t\t\tid: providerId,\n\t\t\ttitle: \"Custom\",\n\t\t\tdescription: \"\"\n\t\t});\n\t\tprovider.setToken(token);\n\t\tthis.setAuthProvider(provider);\n\t\treturn provider;\n\t}\n\n\t/**\n\t * Get information about the authenticated user.\n\t * \n\t * Updates the User ID if available.\n\t * \n\t * @async\n\t * @returns {Promise<UserAccount>} A response compatible to the API specification.\n\t * @throws {Error}\n\t */\n\tasync describeAccount() {\n\t\tlet response = await this._get('/me');\n\t\treturn response.data;\n\t}\n\n\t/**\n\t * Lists all files from the user workspace. \n\t * \n\t * @async\n\t * @returns {Promise<ResponseArray.<UserFile>>} A list of files.\n\t * @throws {Error}\n\t */\n\tasync listFiles() {\n\t\tlet response = await this._get('/files');\n\t\tlet files = response.data.files.map(\n\t\t\tf => new UserFile(this, f.path).setAll(f)\n\t\t);\n\t\treturn this._toResponseArray(files, response.data);\n\t}\n\n\t/**\n\t * A callback that is executed on upload progress updates.\n\t * \n\t * @callback uploadStatusCallback\n\t * @param {number} percentCompleted - The percent (0-100) completed.\n\t * @param {UserFile} file - The file object corresponding to the callback.\n\t */\n\n\t/**\n\t * Uploads a file to the user workspace.\n\t * If a file with the name exists, overwrites it.\n\t * \n\t * This method has different behaviour depending on the environment.\n\t * In a nodeJS environment the source must be a path to a file as string.\n\t * In a browser environment the source must be an object from a file upload form.\n\t * \n\t * @async\n\t * @param {*} source - The source, see method description for details.\n\t * @param {?string} [targetPath=null] - The target path on the server, relative to the user workspace. Defaults to the file name of the source file.\n\t * @param {?uploadStatusCallback} [statusCallback=null] - Optionally, a callback that is executed on upload progress updates.\n\t * @param {?AbortController} [abortController=null] - An AbortController object that can be used to cancel the upload process.\n\t * @returns {Promise<UserFile>}\n\t * @throws {Error}\n\t */\n\tasync uploadFile(source, targetPath = null, statusCallback = null, abortController = null) {\n\t\tif (targetPath === null) {\n\t\t\ttargetPath = Environment.fileNameForUpload(source);\n\t\t}\n\t\tlet file = await this.getFile(targetPath);\n\t\treturn await file.uploadFile(source, statusCallback, abortController);\n\t}\n\n\t/**\n\t * Opens a (existing or non-existing) file without reading any information or creating a new file at the back-end. \n\t * \n\t * @async\n\t * @param {string} path - Path to the file, relative to the user workspace.\n\t * @returns {Promise<UserFile>} A file.\n\t * @throws {Error}\n\t */\n\tasync getFile(path) {\n\t\treturn new UserFile(this, path);\n\t}\n\n\t/**\n\t * Takes a UserProcess, BuilderNode or a plain object containing process nodes\n\t * and converts it to an API compliant object.\n\t * \n\t * @param {UserProcess|BuilderNode|object.<string, *>} process - Process to be normalized.\n\t * @param {object.<string, *>} additional - Additional properties to be merged with the resulting object.\n\t * @returns {object.<string, *>}\n\t * @protected\n\t */\n\t_normalizeUserProcess(process, additional = {}) {\n\t\tif (process instanceof UserProcess) {\n\t\t\tprocess = process.toJSON();\n\t\t}\n\t\telse if (process instanceof BuilderNode) {\n\t\t\tprocess.result = true;\n\t\t\tprocess = process.parent.toJSON();\n\t\t}\n\t\telse if (Utils.isObject(process) && !Utils.isObject(process.process_graph)) {\n\t\t\tprocess = {\n\t\t\t\tprocess_graph: process\n\t\t\t};\n\t\t}\n\t\treturn Object.assign({}, additional, {process: process});\n\t}\n\n\t/**\n\t * Validates a user-defined process at the back-end.\n\t * \n\t * @async\n\t * @param {Process} process - User-defined process to validate.\n\t * @returns {Promise<Array.<ApiError>>} errors - A list of API compatible error objects. A valid process returns an empty list.\n\t * @throws {Error}\n\t */\n\tasync validateProcess(process) {\n\t\tlet response = await this._post('/validation', this._normalizeUserProcess(process).process);\n\t\tif (Array.isArray(response.data.errors)) {\n\t\t\treturn response.data.errors;\n\t\t}\n\t\telse {\n\t\t\tthrow new Error(\"Invalid validation response received.\");\n\t\t}\n\t}\n\n\t/**\n\t * Lists all user-defined processes of the authenticated user.\n\t * \n\t * @async\n\t * @param {Array.<UserProcess>} [oldProcesses=[]] - A list of existing user-defined processes to update.\n\t * @returns {Promise<ResponseArray.<UserProcess>>} A list of user-defined processes.\n\t * @throws {Error}\n\t */\n\tasync listUserProcesses(oldProcesses = []) {\n\t\tlet response = await this._get('/process_graphs');\n\n\t\tif (!Utils.isObject(response.data) || !Array.isArray(response.data.processes)) {\n\t\t\tthrow new Error('Invalid response received for processes');\n\t\t}\n\n\t\t// Remove existing processes from cache\n\t\tthis.processes.remove(null, 'user');\n\n\t\t// Update existing processes if needed\n\t\tlet newProcesses = response.data.processes.map(newProcess => {\n\t\t\tlet process = oldProcesses.find(oldProcess => oldProcess.id === newProcess.id);\n\t\t\tif (!process) {\n\t\t\t\tprocess = new UserProcess(this, newProcess.id);\n\t\t\t}\n\t\t\treturn process.setAll(newProcess);\n\t\t});\n\t\t\n\t\t// Store plain JS variant (i.e. no Job objects involved) of processes in cache\n\t\tlet jsonProcesses = oldProcesses.length > 0 ? newProcesses.map(p => p.toJSON()) : response.data.processes;\n\t\tthis.processes.addAll(jsonProcesses, 'user');\n\n\t\treturn this._toResponseArray(newProcesses, response.data);\n\t}\n\n\t/**\n\t * Creates a new stored user-defined process at the back-end.\n\t * \n\t * @async\n\t * @param {string} id - Unique identifier for the process.\n\t * @param {Process} process - A user-defined process.\n\t * @returns {Promise<UserProcess>} The new user-defined process.\n\t * @throws {Error}\n\t */\n\tasync setUserProcess(id, process) {\n\t\tlet pg = new UserProcess(this, id);\n\t\treturn await pg.replaceUserProcess(process);\n\t}\n\n\t/**\n\t * Get all information about a user-defined process.\n\t * \n\t * @async\n\t * @param {string} id - Identifier of the user-defined process. \n\t * @returns {Promise<UserProcess>} The user-defined process.\n\t * @throws {Error}\n\t */\n\tasync getUserProcess(id) {\n\t\tlet pg = new UserProcess(this, id);\n\t\treturn await pg.describeUserProcess();\n\t}\n\n\t/**\n\t * Executes a process synchronously and returns the result as the response.\n\t * \n\t * Please note that requests can take a very long time of several minutes or even hours.\n\t * \n\t * @async\n\t * @param {Process} process - A user-defined process.\n\t * @param {?string} [plan=null] - The billing plan to use for this computation.\n\t * @param {?number} [budget=null] - The maximum budget allowed to spend for this computation.\n\t * @param {?AbortController} [abortController=null] - An AbortController object that can be used to cancel the processing request.\n\t * @returns {Promise<SyncResult>} - An object with the data and some metadata.\n\t */\n\tasync computeResult(process, plan = null, budget = null, abortController = null) {\n\t\tlet requestBody = this._normalizeUserProcess(\n\t\t\tprocess,\n\t\t\t{\n\t\t\t\tplan: plan,\n\t\t\t\tbudget: budget\n\t\t\t}\n\t\t);\n\t\tlet response = await this._post('/result', requestBody, Environment.getResponseType(), abortController);\n\t\tlet syncResult = {\n\t\t\tdata: response.data,\n\t\t\tcosts: null,\n\t\t\ttype: null,\n\t\t\tlogs: []\n\t\t};\n\t\t\n\t\tif (typeof response.headers['openeo-costs'] === 'number') {\n\t\t\tsyncResult.costs = response.headers['openeo-costs'];\n\t\t}\n\t\t\n\t\tif (typeof response.headers['content-type'] === 'string') {\n\t\t\tsyncResult.type = response.headers['content-type'];\n\t\t}\n\n\t\tlet links = Array.isArray(response.headers.link) ? response.headers.link : [response.headers.link];\n\t\tfor(let link of links) {\n\t\t\tif (typeof link !== 'string') {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tlet logs = link.match(/^<([^>]+)>;\\s?rel=\"monitor\"/i);\n\t\t\tif (Array.isArray(logs) && logs.length > 1) {\n\t\t\t\ttry {\n\t\t\t\t\tlet logsResponse = await this._get(logs[1]);\n\t\t\t\t\tif (Utils.isObject(logsResponse.data) && Array.isArray(logsResponse.data.logs)) {\n\t\t\t\t\t\tsyncResult.logs = logsResponse.data.logs;\n\t\t\t\t\t}\n\t\t\t\t} catch(error) {\n\t\t\t\t\tconsole.warn(error);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn syncResult;\n\t}\n\n\t/**\n\t * Executes a process synchronously and downloads to result the given path.\n\t * \n\t * Please note that requests can take a very long time of several minutes or even hours.\n\t * \n\t * This method has different behaviour depending on the environment.\n\t * If a NodeJs environment, writes the downloaded file to the target location on the file system.\n\t * In a browser environment, offers the file for downloading using the specified name (folders are not supported).\n\t * \n\t * @async\n\t * @param {Process} process - A user-defined process.\n\t * @param {string} targetPath - The target, see method description for details.\n\t * @param {?string} [plan=null] - The billing plan to use for this computation.\n\t * @param {?number} [budget=null] - The maximum budget allowed to spend for this computation.\n\t * @param {?AbortController} [abortController=null] - An AbortController object that can be used to cancel the processing request.\n\t * @throws {Error}\n\t */\n\tasync downloadResult(process, targetPath, plan = null, budget = null, abortController = null) {\n\t\tlet response = await this.computeResult(process, plan, budget, abortController);\n\t\t// @ts-ignore\n\t\tawait Environment.saveToFile(response.data, targetPath);\n\t}\n\n\t/**\n\t * Lists all batch jobs of the authenticated user.\n\t * \n\t * @async\n\t * @param {Array.<Job>} [oldJobs=[]] - A list of existing jobs to update.\n\t * @returns {Promise<ResponseArray.<Job>>} A list of jobs.\n\t * @throws {Error}\n\t */\n\tasync listJobs(oldJobs = []) {\n\t\tlet response = await this._get('/jobs');\n\t\tlet newJobs = response.data.jobs.map(newJob => {\n\t\t\tlet job = oldJobs.find(oldJob => oldJob.id === newJob.id);\n\t\t\tif (!job) {\n\t\t\t\tjob = new Job(this, newJob.id);\n\t\t\t}\n\t\t\treturn job.setAll(newJob);\n\t\t});\n\t\treturn this._toResponseArray(newJobs, response.data);\n\t}\n\n\t/**\n\t * Creates a new batch job at the back-end.\n\t * \n\t * @async\n\t * @param {Process} process - A user-define process to execute.\n\t * @param {?string} [title=null] - A title for the batch job.\n\t * @param {?string} [description=null] - A description for the batch job.\n\t * @param {?string} [plan=null] - The billing plan to use for this batch job.\n\t * @param {?number} [budget=null] - The maximum budget allowed to spend for this batch job.\n\t * @param {object.<string, *>} [additional={}] - Proprietary parameters to pass for the batch job.\n\t * @returns {Promise<Job>} The stored batch job.\n\t * @throws {Error}\n\t */\n\tasync createJob(process, title = null, description = null, plan = null, budget = null, additional = {}) {\n\t\tadditional = Object.assign({}, additional, {\n\t\t\ttitle: title,\n\t\t\tdescription: description,\n\t\t\tplan: plan,\n\t\t\tbudget: budget\n\t\t});\n\t\tlet requestBody = this._normalizeUserProcess(process, additional);\n\t\tlet response = await this._post('/jobs', requestBody);\n\t\tif (typeof response.headers['openeo-identifier'] !== 'string') {\n\t\t\tthrow new Error(\"Response did not contain a Job ID. Job has likely been created, but may not show up yet.\");\n\t\t}\n\t\tlet job = new Job(this, response.headers['openeo-identifier']).setAll(requestBody);\n\t\tif (this.capabilities().hasFeature('describeJob')) {\n\t\t\treturn await job.describeJob();\n\t\t}\n\t\telse {\n\t\t\treturn job;\n\t\t}\n\t}\n\n\t/**\n\t * Get all information about a batch job.\n\t * \n\t * @async\n\t * @param {string} id - Batch Job ID. \n\t * @returns {Promise<Job>} The batch job.\n\t * @throws {Error}\n\t */\n\tasync getJob(id) {\n\t\tlet job = new Job(this, id);\n\t\treturn await job.describeJob();\n\t}\n\n\t/**\n\t * Lists all secondary web services of the authenticated user.\n\t * \n\t * @async\n\t * @param {Array.<Service>} [oldServices=[]] - A list of existing services to update.\n\t * @returns {Promise<ResponseArray.<Job>>} A list of services.\n\t * @throws {Error}\n\t */\n\tasync listServices(oldServices = []) {\n\t\tlet response = await this._get('/services');\n\t\tlet newServices = response.data.services.map(newService => {\n\t\t\tlet service = oldServices.find(oldService => oldService.id === newService.id);\n\t\t\tif (!service) {\n\t\t\t\tservice = new Service(this, newService.id);\n\t\t\t}\n\t\t\treturn service.setAll(newService);\n\t\t});\n\t\treturn this._toResponseArray(newServices, response.data);\n\t}\n\n\t/**\n\t * Creates a new secondary web service at the back-end. \n\t * \n\t * @async\n\t * @param {Process} process - A user-defined process.\n\t * @param {string} type - The type of service to be created (see `Connection.listServiceTypes()`).\n\t * @param {?string} [title=null] - A title for the service.\n\t * @param {?string} [description=null] - A description for the service.\n\t * @param {boolean} [enabled=true] - Enable the service (`true`, default) or not (`false`).\n\t * @param {object.<string, *>} [configuration={}] - Configuration parameters to pass to the service.\n\t * @param {?string} [plan=null] - The billing plan to use for this service.\n\t * @param {?number} [budget=null] - The maximum budget allowed to spend for this service.\n\t * @param {object.<string, *>} [additional={}] - Proprietary parameters to pass for the batch job.\n\t * @returns {Promise<Service>} The stored service.\n\t * @throws {Error}\n\t */\n\tasync createService(process, type, title = null, description = null, enabled = true, configuration = {}, plan = null, budget = null, additional = {}) {\n\t\tlet requestBody = this._normalizeUserProcess(process, Object.assign({\n\t\t\ttitle: title,\n\t\t\tdescription: description,\n\t\t\ttype: type,\n\t\t\tenabled: enabled,\n\t\t\tconfiguration: configuration,\n\t\t\tplan: plan,\n\t\t\tbudget: budget\n\t\t}, additional));\n\t\tlet response = await this._post('/services', requestBody);\n\t\tif (typeof response.headers['openeo-identifier'] !== 'string') {\n\t\t\tthrow new Error(\"Response did not contain a Service ID. Service has likely been created, but may not show up yet.\");\n\t\t}\n\t\tlet service = new Service(this, response.headers['openeo-identifier']).setAll(requestBody);\n\t\tif (this.capabilities().hasFeature('describeService')) {\n\t\t\treturn service.describeService();\n\t\t}\n\t\telse {\n\t\t\treturn service;\n\t\t}\n\t}\n\n\t/**\n\t * Get all information about a secondary web service.\n\t * \n\t * @async\n\t * @param {string} id - Service ID. \n\t * @returns {Promise<Service>} The service.\n\t * @throws {Error}\n\t */\n\tasync getService(id) {\n\t\tlet service = new Service(this, id);\n\t\treturn await service.describeService();\n\t}\n\n\t/**\n\t * Adds additional response details to the array.\n\t * \n\t * Adds links and federation:missing.\n\t * \n\t * @protected\n\t * @param {Array.<*>} arr \n\t * @param {object.<string, *>} response \n\t * @returns {ResponseArray}\n\t */\n\t_toResponseArray(arr, response) {\n\t\tarr.links = Array.isArray(response.links) ? response.links : [];\n\t\tarr['federation:missing'] = Array.isArray(response['federation:missing']) ? response['federation:missing'] : [];\n\t\treturn arr;\n\t}\n\n\t/**\n\t * Get the a link with the given rel type.\n\t * \n\t * @protected\n\t * @param {Array.<Link>} links - An array of links.\n\t * @param {string|Array.<string>} rel - Relation type(s) to find.\n\t * @returns {string | null}\n\t * @throws {Error}\n\t */\n\t_getLinkHref(links, rel) {\n\t\tif (!Array.isArray(rel)) {\n\t\t\trel = [rel];\n\t\t}\n\t\tif (Array.isArray(links)) {\n\t\t\tlet link = links.find(l => Utils.isObject(l) && rel.includes(l.rel) && typeof l.href === 'string');\n\t\t\tif (link) {\n\t\t\t\treturn link.href;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Makes all links in the list absolute.\n\t * \n\t * @param {Array.<Link>} links - An array of links.\n\t * @param {?string|AxiosResponse} [base=null] - The base url to use for relative links, or an response to derive the url from.\n\t * @returns {Array.<Link>}\n\t */\n\tmakeLinksAbsolute(links, base = null) {\n\t\tif (!Array.isArray(links)) {\n\t\t\treturn links;\n\t\t}\n\t\tlet baseUrl = null;\n\t\tif (Utils.isObject(base) && base.headers && base.config && base.request) { // AxiosResponse\n\t\t\tbaseUrl = base.config.baseURL + base.config.url;\n\t\t}\n\t\telse if (typeof base !== 'string') {\n\t\t\tbaseUrl = this._getLinkHref(links, 'self');\n\t\t}\n\t\telse {\n\t\t\tbaseUrl = base;\n\t\t}\n\t\tif (!baseUrl) {\n\t\t\treturn links;\n\t\t}\n\t\treturn links.map((link) => {\n\t\t\tif (!Utils.isObject(link) || typeof link.href !== 'string') {\n\t\t\t\treturn link;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tlet url = new URL(link.href, baseUrl);\n\t\t\t\treturn Object.assign({}, link, {href: url.toString()});\n\t\t\t} catch(error) {\n\t\t\t\treturn link;\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Sends a GET request.\n\t * \n\t * @protected\n\t * @async\n\t * @param {string} path \n\t * @param {object.<string, *>} query \n\t * @param {string} responseType - Response type according to axios, defaults to `json`.\n\t * @returns {Promise<AxiosResponse>}\n\t * @throws {Error}\n\t * @see https://github.com/axios/axios#request-config\n\t */\n\tasync _get(path, query, responseType) {\n\t\treturn await this._send({\n\t\t\tmethod: 'get',\n\t\t\tresponseType: responseType,\n\t\t\turl: path,\n\t\t\t// Timeout for capabilities requests as they are used for a quick first discovery to check whether the server is a openEO back-end.\n\t\t\t// Without timeout connecting with a wrong server url may take forever.\n\t\t\ttimeout: path === '/' ? 5000 : 0,\n\t\t\tparams: query\n\t\t});\n\t}\n\n\t/**\n\t * Sends a POST request.\n\t * \n\t * @protected\n\t * @async\n\t * @param {string} path \n\t * @param {*} body \n\t * @param {string} responseType - Response type according to axios, defaults to `json`.\n\t * @param {?AbortController} [abortController=null] - An AbortController object that can be used to cancel the request.\n\t * @returns {Promise<AxiosResponse>}\n\t * @throws {Error}\n\t * @see https://github.com/axios/axios#request-config\n\t */\n\tasync _post(path, body, responseType, abortController = null) {\n\t\tlet options = {\n\t\t\tmethod: 'post',\n\t\t\tresponseType: responseType,\n\t\t\turl: path,\n\t\t\tdata: body\n\t\t};\n\t\treturn await this._send(options, abortController);\n\t}\n\n\t/**\n\t * Sends a PUT request.\n\t * \n\t * @protected\n\t * @async\n\t * @param {string} path \n\t * @param {*} body \n\t * @returns {Promise<AxiosResponse>}\n\t * @throws {Error}\n\t */\n\tasync _put(path, body) {\n\t\treturn await this._send({\n\t\t\tmethod: 'put',\n\t\t\turl: path,\n\t\t\tdata: body\n\t\t});\n\t}\n\n\t/**\n\t * Sends a PATCH request.\n\t * \n\t * @protected\n\t * @async\n\t * @param {string} path \n\t * @param {*} body \n\t * @returns {Promise<AxiosResponse>}\n\t * @throws {Error}\n\t */\n\tasync _patch(path, body) {\n\t\treturn await this._send({\n\t\t\tmethod: 'patch',\n\t\t\turl: path,\n\t\t\tdata: body\n\t\t});\n\t}\n\n\t/**\n\t * Sends a DELETE request.\n\t * \n\t * @protected\n\t * @async\n\t * @param {string} path \n\t * @returns {Promise<AxiosResponse>}\n\t * @throws {Error}\n\t */\n\tasync _delete(path) {\n\t\treturn await this._send({\n\t\t\tmethod: 'delete',\n\t\t\turl: path\n\t\t});\n\t}\n\n\t/**\n\t * Downloads data from a URL.\n\t * \n\t * May include authorization details where required.\n\t * \n\t * @param {string} url - An absolute or relative URL to download data from.\n\t * @param {boolean} authorize - Send authorization details (`true`) or not (`false`).\n\t * @returns {Promise<Stream.Readable|Blob>} - Returns the data as `Stream` in NodeJS environments or as `Blob` in browsers\n\t * @throws {Error}\n\t */\n\tasync download(url, authorize) {\n\t\tlet result = await this._send({\n\t\t\tmethod: 'get',\n\t\t\tresponseType: Environment.getResponseType(),\n\t\t\turl: url,\n\t\t\tauthorization: authorize\n\t\t});\n\t\treturn result.data;\n\t}\n\n\t/**\n\t * Sends a HTTP request.\n\t * \n\t * Options mostly conform to axios,\n\t * see {@link https://github.com/axios/axios#request-config}.\n\t * \n\t * Automatically sets a baseUrl and the authorization information.\n\t * Default responseType is `json`.\n\t * \n\t * Tries to smoothly handle error responses by providing an object for all response types,\n\t * instead of Streams or Blobs for non-JSON response types.\n\t * \n\t * @protected\n\t * @async\n\t * @param {object.<string, *>} options \n\t * @param {?AbortController} [abortController=null] - An AbortController object that can be used to cancel the request.\n\t * @returns {Promise<AxiosResponse>}\n\t * @throws {Error}\n\t * @see https://github.com/axios/axios\n\t */\n\tasync _send(options, abortController = null) {\n\t\toptions.baseURL = this.baseUrl;\n\t\tif (this.isAuthenticated() && (typeof options.authorization === 'undefined' || options.authorization === true)) {\n\t\t\tif (!options.headers) {\n\t\t\t\toptions.headers = {};\n\t\t\t}\n\t\t\toptions.headers.Authorization = 'Bearer ' + this.authProvider.getToken();\n\t\t}\n\t\tif (!options.responseType) {\n\t\t\toptions.responseType = 'json';\n\t\t}\n\t\tif (abortController) {\n\t\t\toptions.signal = abortController.signal;\n\t\t}\n\n\t\ttry {\n\t\t\tlet response = await axios(options);\n\t\t\tlet capabilities = this.capabilities();\n\t\t\tif (capabilities) {\n\t\t\t\tresponse = capabilities.migrate(response);\n\t\t\t}\n\t\t\treturn response;\n\t\t} catch(error) {\n\t\t\tconst checkContentType = type => (typeof type === 'string' && type.indexOf('/json') !== -1);\n\t\t\tconst enrichError = (origin, response) => {\n\t\t\t\tif (typeof response.message === 'string') {\n\t\t\t\t\torigin.message = response.message;\n\t\t\t\t}\n\t\t\t\torigin.code = typeof response.code === 'string' ? response.code : \"\";\n\t\t\t\torigin.id = response.id;\n\t\t\t\torigin.links = Array.isArray(response.links) ? response.links : [];\n\t\t\t\treturn origin;\n\t\t\t};\n\t\t\tif (Utils.isObject(error.response) && Utils.isObject(error.response.data) && (checkContentType(error.response.data.type) || (Utils.isObject(error.response.headers) && checkContentType(error.response.headers['content-type'])))) {\n\t\t\t\t// JSON error responses are Blobs and streams if responseType is set as such, so convert to JSON if required.\n\t\t\t\t// See: https://github.com/axios/axios/issues/815\n\t\t\t\tif (options.responseType === Environment.getResponseType()) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tlet errorResponse = await Environment.handleErrorResponse(error);\n\t\t\t\t\t\tthrow enrichError(error, errorResponse);\n\t\t\t\t\t} catch (error2) {\n\t\t\t\t\t\tconsole.error(error2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthrow enrichError(error, error.response.data);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthrow error;\n\t\t}\n\t}\n}\n\nmodule.exports = Connection;\n","if (typeof window === 'undefined') {\n\tmodule.exports = require('./node');\n}\nelse {\n\tmodule.exports = require('./browser');\n}","const Utils = require('@openeo/js-commons/src/utils');\n\n/**\n * Manages the files types supported by the back-end.\n */\nclass FileTypes {\n\n\t/**\n\t * Creates a new FileTypes object from an API-compatible JSON response.\n\t * \n\t * @param {FileTypesAPI} data - A capabilities response compatible to the API specification for `GET /file_formats`.\n\t */\n\tconstructor(data) {\n\t\t/**\n\t\t * @protected\n\t\t * @type {FileTypesAPI}\n\t\t */\n\t\tthis.data = {\n\t\t\tinput: {},\n\t\t\toutput: {}\n\t\t};\n\t\tif(!Utils.isObject(data)) {\n\t\t\treturn;\n\t\t}\n\t\tfor(let io of ['input', 'output']) {\n\t\t\tfor(let type in data[io]) {\n\t\t\t\tif(!Utils.isObject(data[io])) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthis.data[io][type.toUpperCase()] = data[io][type];\n\t\t\t}\n\t\t}\n\t\t/**\n\t\t * A list of backends from the federation that are missing in the response data.\n\t\t * \n\t\t * @public\n\t\t * @type {Array.<string>}\n\t\t */\n\t\tthis['federation:missing'] = data['federation:missing'];\n\t}\n\n\t/**\n\t * Returns the file types response as a JSON serializable representation of the data that is API compliant.\n\t * \n\t * @returns {FileTypesAPI}\n\t */\n\ttoJSON() {\n\t\treturn this.data;\n\t}\n\n\t/**\n\t * Returns the input file formats.\n\t * \n\t * @returns {object.<string, FileType>}\n\t */\n\tgetInputTypes() {\n\t\treturn this.data.input;\n\t}\n\n\t/**\n\t * Returns the output file formats.\n\t * \n\t * @returns {object.<string, FileType>}\n\t */\n\tgetOutputTypes() {\n\t\treturn this.data.output;\n\t}\n\n\t/**\n\t * Returns a single input file format for a given identifier.\n\t * \n\t * Returns null if no input file format was found for the given identifier.\n\t * \n\t * @param {string} type - Case-insensitive file format identifier\n\t * @returns {FileType | null}\n\t */\n\tgetInputType(type) {\n\t\treturn this._findType(type, 'input');\n\t}\n\n\t/**\n\t * Returns a single output file format for a given identifier.\n\t * \n\t * Returns null if no output file format was found for the given identifier.\n\t * \n\t * @param {string} type - Case-insensitive file format identifier\n\t * @returns {FileType | null}\n\t */\n\tgetOutputType(type) {\n\t\treturn this._findType(type, 'output');\n\t}\n\n\t/**\n\t * Get a file type object from the list of input or output file formats.\n\t * \n\t * @param {string} type - Identifier of the file type\n\t * @param {string} io - Either `input` or `output`\n\t * @returns {FileType | null}\n\t * @protected\n\t */\n\t_findType(type, io) {\n\t\ttype = type.toUpperCase();\n\t\tif (type in this.data[io]) {\n\t\t\treturn this.data[io][type];\n\t\t}\n\t\treturn null;\n\t}\n\n}\n\nmodule.exports = FileTypes;\n","const Capabilities = require(\"./capabilities\");\nconst Utils = require('@openeo/js-commons/src/utils');\nconst StacMigrate = require('@radiantearth/stac-migrate');\n\nclass GdcCapabilities extends Capabilities {\n\n  constructor(data) {\n    super(data);\n    this.checkConformance();\n  }\n\n  hasConformance(uri) {\n    if(!Array.isArray(this.data.conformsTo)) {\n      return false;\n    }\n    return this.data.conformsTo.includes(uri);\n  }\n\n  checkConformance() {\n    if (!Array.isArray(this.data.endpoints)) {\n      this.data.endpoints = [];\n    }\n    if (this.hasConformance('http://www.opengis.net/spec/ogcapi-coverages-1/0.0/conf/geodata-coverage')) {\n      this.data.endpoints.push({\n        \"path\": \"/collections\",\n        \"methods\": [\n          \"GET\"\n        ]\n      });\n      this.data.endpoints.push({\n        \"path\": \"/collections/{collection_id}\",\n        \"methods\": [\n          \"GET\"\n        ]\n      });\n    }\n    if (this.hasConformance('http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/core')) {\n      this.data.endpoints.push({\n        \"path\": \"/processes\",\n        \"methods\": [\n          \"GET\"\n        ]\n      });\n    }\n    this.init();\n  }\n\n\t/**\n\t * Initializes the class.\n\t * \n\t * @protected\n\t */\n  init() {\n    if (Array.isArray(this.data.endpoints)) {\n      super.init();\n    }\n  }\n\n\t/**\n\t * Validates the capabilities.\n\t * \n\t * Throws an error in case of an issue, otherwise just passes.\n\t * \n\t * @protected\n\t * @throws {Error}\n\t */\n  validate() {\n    if(!Utils.isObject(this.data)) {\n      throw new Error(\"No capabilities retrieved.\");\n    }\n  }\n\n\t/**\n\t * Returns the GDC API version implemented by the back-end.\n\t * \n\t * @returns {string} openEO API version number.\n\t */\n\tapiVersion() {\n\t\treturn \"1.0.0\"; // this.data.gdc_version;\n\t}\n\n  isEndpoint(response, method, endpoint) {\n    if (response.config.method !== method) {\n      return false;\n    }\n    if (endpoint.includes('{}')) {\n      let pattern = '^' + endpoint.replace('{}', '[^/]+') + '$';\n      let regex = new RegExp(pattern);\n      return regex.test(response.config.url);\n    }\n    return endpoint === response.config.url;\n  }\n\n\t/**\n\t * Migrates a response, if required.\n\t * \n\t * @param {AxiosResponse} response \n\t * @protected\n\t * @returns {AxiosResponse}\n\t */\n\tmigrate(response) {\n    if (this.isEndpoint(response, 'get', '/collections')) {\n      response.data.collections = response.data.collections.map(collection => Migrate.collection(collection, response));\n    }\n    if (this.isEndpoint(response, 'get', '/collections/{}')) {\n      response.data = Migrate.collection(response.data, response);\n    }\n    if (this.isEndpoint(response, 'get', '/processes')) {\n      response.data.processes = response.data.processes.map(process => Migrate.process(process, response));\n    }\n\n    response = Migrate.all(response);\n    \n\t\treturn response;\n\t}\n}\n\nconst Migrate = {\n\n  connection: null,\n\n  all(response) {\n    if (Array.isArray(response.data.links)) {\n      response.data.links = this.connection.makeLinksAbsolute(response.data.links, response);\n    }\n    return response;\n  },\n\n  collection(collection, response) {\n    if (collection.stac_version) {\n      return collection;\n    }\n  \n    // Make sure the required properties are present\n    collection = StacMigrate.collection(collection);\n    // Make links absolute\n    if (Array.isArray(collection.links)) {\n      collection.links = this.connection.makeLinksAbsolute(collection.links, response);\n    }\n    \n    return collection;\n  },\n\n  process(process, response) {\n    if (process.parameters || process.returns) {\n      return process;\n    }\n  \n    process.summary = process.title;\n  \n    process.parameters = [];\n    for(let name in process.inputs) {\n      let input = process.inputs[name];\n      process.parameters.push({\n        name,\n        description: [input.title, input.description].filter(v => Boolean(v)).join(\"\\n\\n\"),\n        schema: input.schema,\n        optional: typeof input.schema.default !== 'undefined'\n      });\n    }\n  \n    process.returns = {\n      description: 'see process description',\n      schema: []\n    };\n    if (Utils.size(process.outputs) === 1) {\n      let output = Object.values(process.outputs)[0];\n      process.returns = {\n        description: [output.title, output.description].filter(v => Boolean(v)).join(\"\\n\\n\"),\n        schema: output.schema\n      };\n    }\n    else {\n      process.returns = {\n        description: 'see process description',\n        schema: []\n      };\n      for(let name in process.outputs) {\n        let output = process.outputs[name];\n        let schema = Object.assign({}, output.schema, {title: output.title, description: output.description});\n        process.returns.schema.push(schema);\n      }\n    }\n  \n    // Make links absolute\n    if (Array.isArray(process.links)) {\n      process.links = this.connection.makeLinksAbsolute(process.links, response);\n    }\n  \n    return process;\n  }\n\n};\n\nmodule.exports = {\n  GdcCapabilities,\n  Migrate\n};","const Environment = require('./env');\nconst BaseEntity = require('./baseentity');\nconst Logs = require('./logs');\nconst Utils = require('@openeo/js-commons/src/utils');\nconst StacMigrate = require('@radiantearth/stac-migrate');\n\nconst STOP_STATUS = ['finished', 'canceled', 'error'];\n\n/**\n * A Batch Job.\n * \n * @augments BaseEntity\n */\nclass Job extends BaseEntity {\n\n\t/**\n\t * Creates an object representing a batch job stored at the back-end.\n\t * \n\t * @param {Connection} connection - A Connection object representing an established connection to an openEO back-end.\n\t * @param {string} jobId - The batch job ID.\n\t */\n\tconstructor(connection, jobId) {\n\t\tsuper(connection, [\"id\", \"title\", \"description\", \"process\", \"status\", \"progress\", \"created\", \"updated\", \"plan\", \"costs\", \"budget\"]);\n\t\t/**\n\t\t * The identifier of the batch job.\n\t\t * @public\n\t\t * @readonly\n\t\t * @type {string}\n\t\t */\n\t\tthis.id = jobId;\n\t\t/**\n\t\t * @public\n\t\t * @readonly\n\t\t * @type {?string}\n\t\t */\n\t\tthis.title = undefined;\n\t\t/**\n\t\t * @public\n\t\t * @readonly\n\t\t * @type {?string}\n\t\t */\n\t\tthis.description = undefined;\n\t\t/**\n\t\t * The process chain to be executed.\n\t\t * @public\n\t\t * @readonly\n\t\t * @type {?Process}\n\t\t */\n\t\tthis.process = undefined;\n\t\t/**\n\t\t * The current status of a batch job.\n\t\t * One of \"created\", \"queued\", \"running\", \"canceled\", \"finished\" or \"error\".\n\t\t * @public\n\t\t * @readonly\n\t\t * @type {?string}\n\t\t */\n\t\tthis.status = undefined;\n\t\t/**\n\t\t * Indicates the process of a running batch job in percent. \n\t\t * @public\n\t\t * @readonly\n\t\t * @type {?number}\n\t\t */\n\t\tthis.progress = undefined;\n\t\t/**\n\t\t * Date and time of creation, formatted as a RFC 3339 date-time.\n\t\t * @public\n\t\t * @readonly\n\t\t * @type {?string}\n\t\t */\n\t\tthis.created = undefined;\n\t\t/**\n\t\t * Date and time of the last status change, formatted as a RFC 3339 date-time.\n\t\t * @public\n\t\t * @readonly\n\t\t * @type {?string}\n\t\t */\n\t\tthis.updated = undefined;\n\t\t/**\n\t\t * The billing plan to process and charge the batch job with.\n\t\t * @public\n\t\t * @readonly\n\t\t * @type {?string}\n\t\t */\n\t\tthis.plan = undefined;\n\t\t/**\n\t\t * An amount of money or credits in the currency specified by the back-end.\n\t\t * @public\n\t\t * @readonly\n\t\t * @type {?number}\n\t\t */\n\t\tthis.costs = undefined;\n\t\t/**\n\t\t * Maximum amount of costs the request is allowed to produce in the currency specified by the back-end.\n\t\t * @public\n\t\t * @readonly\n\t\t * @type {?number}\n\t\t */\n\t\tthis.budget = undefined;\n\t}\n\n\t/**\n\t * Updates the batch job data stored in this object by requesting the metadata from the back-end.\n\t * \n\t * @async\n\t * @returns {Promise<Job>} The update job object (this).\n\t * @throws {Error}\n\t */\n\tasync describeJob() {\n\t\tlet response = await this.connection._get('/jobs/' + this.id);\n\t\treturn this.setAll(response.data);\n\t}\n\n\t/**\n\t * Modifies the batch job at the back-end and afterwards updates this object, too.\n\t * \n\t * @async\n\t * @param {object} parameters - An object with properties to update, each of them is optional, but at least one of them must be specified. Additional properties can be set if the server supports them.\n\t * @param {Process} parameters.process - A new process.\n\t * @param {string} parameters.title - A new title.\n\t * @param {string} parameters.description - A new description.\n\t * @param {string} parameters.plan - A new plan.\n\t * @param {number} parameters.budget - A new budget.\n\t * @returns {Promise<Job>} The updated job object (this).\n\t * @throws {Error}\n\t */\n\tasync updateJob(parameters) {\n\t\tawait this.connection._patch('/jobs/' + this.id, this._convertToRequest(parameters));\n\t\tif (this._supports('describeJob')) {\n\t\t\treturn await this.describeJob();\n\t\t}\n\t\telse {\n\t\t\treturn this.setAll(parameters);\n\t\t}\n\t}\n\n\t/**\n\t * Deletes the batch job from the back-end.\n\t * \n\t * @async\n\t * @throws {Error}\n\t */\n\tasync deleteJob() {\n\t\tawait this.connection._delete('/jobs/' + this.id);\n\t}\n\n\t/**\n\t * Calculate an estimate (potentially time/costs/volume) for a batch job.\n\t * \n\t * @async\n\t * @returns {Promise<JobEstimate>} A response compatible to the API specification.\n\t * @throws {Error}\n\t */\n\tasync estimateJob() {\n\t\tlet response = await this.connection._get('/jobs/' + this.id + '/estimate');\n\t\treturn response.data;\n\t}\n\n\t/**\n\t * Get logs for the batch job from the back-end.\n\t * \n\t * @returns {Logs}\n\t */\n\tdebugJob() {\n\t\treturn new Logs(this.connection, '/jobs/' + this.id + '/logs');\n\t}\n\n\t/**\n\t * Checks for status changes and new log entries every x seconds.\n\t * \n\t * On every status change observed or on new log entries (if supported by the\n\t * back-end and not disabled via `requestLogs`), the callback is executed.\n\t * It may also be executed once at the beginning.\n\t * The callback receives the updated job (this object) and the logs (array) passed.\n\t * \n\t * The monitoring stops once the job has finished, was canceled or errored out.\n\t * \n\t * This is only supported if describeJob is supported by the back-end.\n\t * \n\t * Returns a function that can be called to stop monitoring the job manually.\n\t * \n\t * @param {Function} callback \n\t * @param {number} [interval=60] - Interval between update requests, in seconds as integer.\n\t * @param {boolean} [requestLogs=true] - Enables/Disables requesting logs\n\t * @returns {Function}\n\t * @throws {Error}\n\t */\n\tmonitorJob(callback, interval = 60, requestLogs = true) {\n\t\tif (typeof callback !== 'function' || interval < 1) {\n\t\t\treturn;\n\t\t}\n\t\tlet capabilities = this.connection.capabilities();\n\t\tif (!capabilities.hasFeature('describeJob')) {\n\t\t\tthrow new Error('Monitoring Jobs not supported by the back-end.');\n\t\t}\n\n\t\tlet lastStatus = this.status;\n\t\tlet intervalId = null;\n\t\tlet logIterator = null;\n\t\tif (capabilities.hasFeature('debugJob') && requestLogs) {\n\t\t\tlogIterator = this.debugJob();\n\t\t}\n\t\tlet monitorFn = async () => {\n\t\t\tif (this.getDataAge() > 1) {\n\t\t\t\tawait this.describeJob();\n\t\t\t}\n\t\t\tlet logs = logIterator ? await logIterator.nextLogs() : [];\n\t\t\tif (lastStatus !== this.status || logs.length > 0) {\n\t\t\t\tcallback(this, logs);\n\t\t\t}\n\t\t\tlastStatus = this.status;\n\t\t\tif (STOP_STATUS.includes(this.status)) {\n\t\t\t\tstopFn(); // eslint-disable-line no-use-before-define\n\t\t\t}\n\t\t};\n\t\tsetTimeout(monitorFn, 0);\n\t\tintervalId = setInterval(monitorFn, interval * 1000);\n\t\tlet stopFn = () => {\n\t\t\tif (intervalId) {\n\t\t\t\tclearInterval(intervalId);\n\t\t\t\tintervalId = null;\n\t\t\t}\n\t\t};\n\t\treturn stopFn;\n\t}\n\n\t/**\n\t * Starts / queues the batch job for processing at the back-end.\n\t * \n\t * @async\n\t * @returns {Promise<Job>} The updated job object (this).\n\t * @throws {Error}\n\t */\n\tasync startJob() {\n\t\tawait this.connection._post('/jobs/' + this.id + '/results', {});\n\t\tif (this._supports('describeJob')) {\n\t\t\treturn await this.describeJob();\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stops / cancels the batch job processing at the back-end.\n\t * \n\t * @async\n\t * @returns {Promise<Job>} The updated job object (this).\n\t * @throws {Error}\n\t */\n\tasync stopJob() {\n\t\tawait this.connection._delete('/jobs/' + this.id + '/results');\n\t\tif (this._supports('describeJob')) {\n\t\t\treturn await this.describeJob();\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Retrieves the STAC Item or Collection produced for the job results.\n\t * \n\t * The Item or Collection returned always complies to the latest STAC version (currently 1.0.0). \n\t * \n\t * @async\n\t * @returns {Promise<object.<string, *>>} The JSON-based response compatible to the API specification, but also including a `costs` property if present in the headers.\n\t * @throws {Error}\n\t */\n\tasync getResultsAsStac() {\n\t\tlet response = await this.connection._get('/jobs/' + this.id + '/results');\n\t\tif (!Utils.isObject(response) || !Utils.isObject(response.data)) {\n\t\t\tthrow new Error(\"Results received from the back-end are invalid\");\n\t\t}\n\t\tlet data = StacMigrate.stac(response.data);\n\t\tif (!Utils.isObject(data.assets)) {\n\t\t\tdata.assets = {};\n\t\t}\n\t\tif (data.type === 'Feature') { // Item\n\t\t\tif (typeof response.headers['openeo-costs'] === 'number') {\n\t\t\t\tdata.properties.costs = response.headers['openeo-costs'];\n\t\t\t}\n\t\t}\n\t\telse { // Collection\n\t\t\tif (typeof response.headers['openeo-costs'] === 'number') {\n\t\t\t\tdata.costs = response.headers['openeo-costs'];\n\t\t\t}\n\t\t}\n\n\t\treturn data;\n\t}\n\n\t/**\n\t * Retrieves download links.\n\t * \n\t * @async\n\t * @returns {Promise<Array.<Link>>} A list of links (object with href, rel, title, type and roles).\n\t * @throws {Error}\n\t */\n\tasync listResults() {\n\t\tlet item = await this.getResultsAsStac();\n\t\tif (Utils.isObject(item.assets)) {\n\t\t\treturn Object.values(item.assets);\n\t\t}\n\t\telse {\n\t\t\treturn [];\n\t\t}\n\t}\n\n\t/**\n\t * Downloads the results to the specified target folder. The specified target folder must already exist!\n\t * \n\t * NOTE: This method is only supported in a NodeJS environment. In a browser environment this method throws an exception!\n\t * \n\t * @async\n\t * @param {string} targetFolder - A target folder to store the file to, which must already exist.\n\t * @returns {Promise<Array.<string>|void>} Depending on the environment: A list of file paths of the newly created files (Node), throws in Browsers.\n\t * @throws {Error}\n\t */\n\tasync downloadResults(targetFolder) {\n\t\tlet list = await this.listResults();\n\t\treturn await Environment.downloadResults(this.connection, list, targetFolder);\n\t}\n}\n\nmodule.exports = Job;\n","const Utils = require('@openeo/js-commons/src/utils');\n\n/**\n * Interface to loop through the logs.\n */\nclass Logs {\n\n\t/**\n\t * Creates a new Logs instance to retrieve logs from a back-end.\n\t * \n\t * @param {Connection} connection - A Connection object representing an established connection to an openEO back-end.\n\t * @param {string} endpoint - The relative endpoint to request the logs from, usually `/jobs/.../logs` or `/services/.../logs` with `...` being the actual job or service id.\n\t */\n\tconstructor(connection, endpoint) {\n\t\t/**\n\t\t * @protected\n\t\t * @type {Connection}\n\t\t */\n\t\tthis.connection = connection;\n\t\tthis.endpoint = endpoint;\n\t\tthis.lastId = \"\";\n\t}\n\n\t/**\n\t * Retrieves the next log entries since the last request.\n\t * \n\t * Retrieves log entries only.\n\t * \n\t * @async\n\t * @param {number} limit - The number of log entries to retrieve per request, as integer.\n\t * @returns {Promise<Array.<Log>>}\n\t */\n\tasync nextLogs(limit = null) {\n\t\tlet response = await this.next(limit);\n\t\treturn Array.isArray(response.logs) ? response.logs : [];\n\t}\n\n\t/**\n\t * Retrieves the next log entries since the last request.\n\t * \n\t * Retrieves the full response compliant to the API, including log entries and links.\n\t * \n\t * @async\n\t * @param {number} limit - The number of log entries to retrieve per request, as integer.\n\t * @returns {Promise<LogsAPI>}\n\t */\n\tasync next(limit = null) {\n\t\tlet query = {\n\t\t\toffset: this.lastId\n\t\t};\n\t\tif (limit > 0) {\n\t\t\tquery.limit = limit;\n\t\t}\n\t\tlet response = await this.connection._get(this.endpoint, query);\n\t\tif (Array.isArray(response.data.logs) && response.data.logs.length > 0) {\n\t\t\tresponse.data.logs = response.data.logs.filter(log => Utils.isObject(log) && typeof log.id === 'string');\n\t\t\tthis.lastId = response.data.logs[response.data.logs.length - 1].id;\n\t\t}\n\t\telse {\n\t\t\tresponse.data.logs = [];\n\t\t}\n\t\tresponse.data.links = Array.isArray(response.data.links) ? response.data.links : [];\n\t\treturn response.data;\n\t}\n\n}\n\nmodule.exports = Logs;\n","const fs = require('fs');\nconst url = require(\"url\");\nconst path = require(\"path\");\nconst Stream = require('stream');\n\n/**\n * Platform dependant utilities for the openEO JS Client.\n * \n * Node.js implementation, don't use in other environments.\n * \n * @hideconstructor\n */\nclass Environment {\n\n\t/**\n\t * Returns the name of the Environment, here `Node`.\n\t * \n\t * @returns {string}\n\t * @static\n\t */\n\tstatic getName() {\n\t\treturn 'Node';\n\t}\n\n\t/**\n\t * Returns the URL of the server instance.\n\t * \n\t * @returns {string}\n\t * @static\n\t */\n\tstatic getUrl() {\n\t\treturn Environment.url;\n\t}\n\n\t/**\n\t * Sets the URL of the server instance.\n\t * \n\t * @param {string} uri\n\t * @static\n\t */\n\tstatic setUrl(uri) {\n\t\tEnvironment.url = uri;\n\t}\n\n\t/**\n\t * Handles errors from the API that are returned as Streams.\n\t * \n\t * @ignore\n\t * @static\n\t * @param {Stream.Readable} error \n\t * @returns {Promise<void>}\n\t */\n\tstatic handleErrorResponse(error) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tlet chunks = [];\n\t\t\terror.response.data.on(\"data\", chunk => chunks.push(chunk));\n\t\t\terror.response.data.on(\"error\", streamError => reject(streamError));\n\t\t\terror.response.data.on(\"end\", () => resolve(JSON.parse(Buffer.concat(chunks).toString())));\n\t\t});\n\t}\n\n\t/**\n\t * Returns how binary responses from the servers are returned (`stream` or `blob`).\n\t * \n\t * @returns {string}\n\t * @static\n\t */\n\tstatic getResponseType() {\n\t\treturn 'stream';\n\t}\n\n\t/**\n\t * Encodes a string into Base64 encoding.\n\t * \n\t * @static\n\t * @param {string|Buffer} str - String to encode.\n\t * @returns {string} String encoded in Base64.\n\t */\n\tstatic base64encode(str) {\n\t\tlet buffer;\n\t\tif (str instanceof Buffer) {\n\t\t\tbuffer = str;\n\t\t} else {\n\t\t\tbuffer = Buffer.from(str.toString(), 'binary');\n\t\t}\n\t\treturn buffer.toString('base64');\n\t}\n\n\t/**\n\t * Detect the file name for the given data source.\n\t * \n\t * @ignore\n\t * @static\n\t * @param {string} source - A path to a file as string.\n\t * @returns {string}\n\t */\n\tstatic fileNameForUpload(source) {\n\t\treturn path.basename(source);\n\t}\n\n\t/**\n\t * Get the data from the source that should be uploaded.\n\t * \n\t * @ignore\n\t * @static\n\t * @param {string} source - A path to a file as string.\n\t * @returns {Stream.Readable}\n\t */\n\tstatic dataForUpload(source) {\n\t\treturn fs.createReadStream(source);\n\t}\n\n\t/**\n\t * Downloads files to local storage and returns a list of file paths.\n\t * \n\t * @static\n\t * @param {Connection} con \n\t * @param {Array.<object.<string, *>>} assets \n\t * @param {string} targetFolder \n\t * @returns {Promise<Array.<string>>}\n\t * @throws {Error}\n\t */\n\tstatic async downloadResults(con, assets, targetFolder) {\n\t\tlet files = [];\n\t\tconst promises = assets.map(async (link) => {\n\t\t\tlet parsedUrl = url.parse(link.href);\n\t\t\tlet targetPath = path.join(targetFolder, path.basename(parsedUrl.pathname));\n\t\t\tlet data = await con.download(link.href, false);\n\t\t\tif (data instanceof Stream.Readable) {\n\t\t\t\tawait Environment.saveToFile(data, targetPath);\n\t\t\t\tfiles.push(targetPath);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new Error(\"Data retrieved is not a Stream\");\n\t\t\t}\n\t\t});\n\n\t\tawait Promise.all(promises);\n\t\treturn files;\n\t}\n\n\t/**\n\t * Streams data into a file.\n\t *\n\t * @static\n\t * @async\n\t * @param {Stream.Readable} data - Data stream to read from.\n\t * @param {string} filename - File path to store the data at.\n\t * @returns {Promise<void>}\n\t * @throws {Error}\n\t */\n\tstatic saveToFile(data, filename) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tlet writeStream = fs.createWriteStream(filename);\n\t\t\twriteStream.on('close', (err) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treturn reject(err);\n\t\t\t\t}\n\t\t\t\tresolve();\n\t\t\t});\n\t\t\tdata.pipe(writeStream);\n\t\t});\n\t}\n}\n\nEnvironment.url = '';\n\nmodule.exports = Environment;\n","const Utils = require('@openeo/js-commons/src/utils');\nconst AuthProvider = require('./authprovider');\nconst Environment = require('./env');\nconst Oidc = require('oidc-client');\n\n/**\n * The Authentication Provider for OpenID Connect.\n * \n * See the openid-connect-popup.html and openid-connect-redirect.html files in\n * the `/examples/oidc` folder for usage examples in the browser.\n * \n * If you want to implement OIDC in a non-browser environment, you can override \n * the OidcProvider or AuthProvider classes with custom behavior.\n * In this case you must provide a function that creates your new class to the\n * `Connection.setOidcProviderFactory()` method.\n * \n * @augments AuthProvider\n * @see Connection#setOidcProviderFactory\n */\nclass OidcProvider extends AuthProvider {\n\n\t/**\n\t * Checks whether the required OIDC client library `openid-client-js` is available.\n\t * \n\t * @static\n\t * @returns {boolean}\n\t */\n\tstatic isSupported() {\n\t\treturn Utils.isObject(Oidc) && Boolean(Oidc.UserManager);\n\t}\n\n\t/**\n\t * Finishes the OpenID Connect sign in (authentication) workflow.\n\t * \n\t * Must be called in the page that OpenID Connect redirects to after logging in.\n\t * \n\t * Supported only in Browser environments.\n\t * \n\t * @async\n\t * @static\n\t * @param {OidcProvider} provider - A OIDC provider to assign the user to.\n\t * @param {object.<string, *>} [options={}] - Object with additional options.\n\t * @returns {Promise<?Oidc.User>} For uiMethod = 'redirect' only: OIDC User\n\t * @throws {Error}\n\t * @see https://github.com/IdentityModel/oidc-client-js/wiki#other-optional-settings\n\t */\n\tstatic async signinCallback(provider = null, options = {}) {\n\t\tlet url = Environment.getUrl();\n\t\tif (!provider) {\n\t\t\t// No provider options available, try to detect response mode from URL\n\t\t\tprovider = new OidcProvider(null, {});\n\t\t\tprovider.setGrant(url.includes('?') ? 'authorization_code+pkce' : 'implicit');\n\t\t}\n\t\tlet providerOptions = provider.getOptions(options);\n\t\tlet oidc = new Oidc.UserManager(providerOptions);\n\t\treturn await oidc.signinCallback(url);\n\t}\n\n\t/**\n\t * Creates a new OidcProvider instance to authenticate using OpenID Connect.\n\t * \n\t * @param {Connection} connection - A Connection object representing an established connection to an openEO back-end.\n\t * @param {OidcProviderMeta} options - OpenID Connect Provider details as returned by the API.\n\t */\n\tconstructor(connection, options) {\n\t\tsuper(\"oidc\", connection, options);\n\n\t\tthis.manager = null;\n\t\tthis.listeners = {};\n\n\t\t/**\n\t\t * The authenticated OIDC user.\n\t\t * \n\t\t * @type {Oidc.User}\n\t\t */\n\t\tthis.user = null;\n\t\t\n\t\t/**\n\t\t * The client ID to use for authentication.\n\t\t * \n\t\t * @type {string | null}\n\t\t */\n\t\tthis.clientId = null;\n\n\t\t/**\n\t\t * The grant type (flow) to use for this provider.\n\t\t * \n\t\t * Either \"authorization_code+pkce\" (default) or \"implicit\"\n\t\t * \n\t\t * @type {string}\n\t\t */\n\t\tthis.grant = \"authorization_code+pkce\"; // Set this before calling detectDefaultClient\n\n\t\t/**\n\t\t * The issuer, i.e. the link to the identity provider.\n\t\t * \n\t\t * @type {string}\n\t\t */\n\t\tthis.issuer = options.issuer || \"\";\n\n\t\t/**\n\t\t * The scopes to be requested.\n\t\t * \n\t\t * @type {Array.<string>}\n\t\t */\n\t\tthis.scopes = Array.isArray(options.scopes) && options.scopes.length > 0 ? options.scopes : ['openid'];\n\n\t\t/**\n\t\t * The scope that is used to request a refresh token.\n\t\t * \n\t\t * @type {string}\n\t\t */\n\t\tthis.refreshTokenScope = \"offline_access\";\n\n\t\t/**\n\t\t * Any additional links.\n\t\t * \n\t\t * \n\t\t * @type {Array.<Link>}\n\t\t */\n\t\tthis.links = Array.isArray(options.links) ? options.links : [];\n\n\t\t/**\n\t\t * The default clients made available by the back-end.\n\t\t * \n\t\t * @type {Array.<OidcClient>}\n\t\t */\n\t\tthis.defaultClients = Array.isArray(options.default_clients) ? options.default_clients : [];\n\n\t\t/**\n\t\t * The detected default Client.\n\t\t * \n\t\t * @type {OidcClient}\n\t\t */\n\t\tthis.defaultClient = this.detectDefaultClient();\n\t}\n\n\t/**\n\t * Adds a listener to one of the following events:\n\t * \n\t * - AccessTokenExpiring: Raised prior to the access token expiring.\n\t * - AccessTokenExpired: Raised after the access token has expired.\n\t * - SilentRenewError: Raised when the automatic silent renew has failed.\n\t * \n\t * @param {string} event \n\t * @param {Function} callback\n\t * @param {string} [scope=\"default\"]\n\t */\n\taddListener(event, callback, scope = 'default') {\n\t\tthis.manager.events[`add${event}`](callback);\n\t\tthis.listeners[`${scope}:${event}`] = callback;\n\t}\n\n\t/**\n\t * Removes the listener for the given event that has been set with addListener.\n\t * \n\t * @param {string} event \n\t * @param {string} [scope=\"default\"]\n\t * @see OidcProvider#addListener\n\t */\n\tremoveListener(event, scope = 'default') {\n\t\tthis.manager.events[`remove${event}`](this.listeners[event]);\n\t\tdelete this.listeners[`${scope}:${event}`];\n\t}\n\n\t/**\n\t * Authenticate with OpenID Connect (OIDC).\n\t * \n\t * Supported only in Browser environments.\n\t * \n\t * @async\n\t * @param {object.<string, *>} [options={}] - Object with authentication options.\n\t * @param {boolean} [requestRefreshToken=false] - If set to `true`, adds a scope to request a refresh token.\n\t * @returns {Promise<void>}\n\t * @throws {Error}\n\t * @see https://github.com/IdentityModel/oidc-client-js/wiki#other-optional-settings\n\t * @see {OidcProvider#refreshTokenScope}\n\t */\n\tasync login(options = {}, requestRefreshToken = false) {\n\t\tif (!this.issuer || typeof this.issuer !== 'string') {\n\t\t\tthrow new Error(\"No Issuer URL available for OpenID Connect\");\n\t\t}\n\n\t\tthis.manager = new Oidc.UserManager(this.getOptions(options, requestRefreshToken));\n\t\tthis.addListener('UserLoaded', async () => this.setUser(await this.manager.getUser()), 'js-client');\n\t\tthis.addListener('AccessTokenExpired', () => this.setUser(null), 'js-client');\n\t\tif (OidcProvider.uiMethod === 'popup') {\n\t\t\tawait this.manager.signinPopup();\n\t\t}\n\t\telse {\n\t\t\tawait this.manager.signinRedirect();\n\t\t}\n\t}\n\n\t/**\n\t * Logout from the established session.\n\t * \n\t * @async\n\t */\n\tasync logout() {\n\t\tif (this.manager !== null) {\n\t\t\ttry {\n\t\t\t\tif (OidcProvider.uiMethod === 'popup') {\n\t\t\t\t\tawait this.manager.signoutPopup();\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tawait this.manager.signoutRedirect({\n\t\t\t\t\t\tpost_logout_redirect_uri: Environment.getUrl()\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tconsole.warn(error);\n\t\t\t}\n\t\t\tsuper.logout();\n\t\t\tthis.removeListener('UserLoaded', 'js-client');\n\t\t\tthis.removeListener('AccessTokenExpired', 'js-client');\n\t\t\tthis.manager = null;\n\t\t\tthis.setUser(null);\n\t\t}\n\t}\n\n\t/**\n\t * Returns the options for the OIDC client library.\n\t * \n\t * Options can be overridden by custom options via the options parameter.\n\t * \n\t * @protected\n\t * @param {object.<string, *>} options \n\t * @param {boolean} [requestRefreshToken=false] - If set to `true`, adds a scope to request a refresh token.\n\t * @returns {object.<string, *>}\n\t * @see {OidcProvider#refreshTokenScope}\n\t */\n\tgetOptions(options = {}, requestRefreshToken = false) {\n\t\tlet response_type = this.getResponseType();\n\t\tlet scope = this.scopes.slice(0);\n\t\tif (requestRefreshToken && !scope.includes(this.refreshTokenScope)) {\n\t\t\tscope.push(this.refreshTokenScope);\n\t\t}\n\n\t\treturn Object.assign({\n\t\t\tclient_id: this.clientId,\n\t\t\tredirect_uri: OidcProvider.redirectUrl,\n\t\t\tauthority: this.issuer.replace('/.well-known/openid-configuration', ''),\n\t\t\tscope: scope.join(' '),\n\t\t\tvalidateSubOnSilentRenew: true,\n\t\t\tresponse_type,\n\t\t\tresponse_mode: response_type.includes('code') ? 'query' : 'fragment'\n\t\t}, options);\n\t}\n\n\t/**\n\t * Get the response_type based on the grant type.\n\t * \n\t * @protected\n\t * @returns {string}\n\t * @throws {Error}\n\t */\n\tgetResponseType() {\n\t\tswitch(this.grant) {\n\t\t\tcase 'authorization_code+pkce':\n\t\t\t\treturn 'code';\n\t\t\tcase 'implicit':\n\t\t\t\treturn 'token id_token';\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Grant Type not supported');\n\t\t}\n\t}\n\n\t/**\n\t * Sets the grant type (flow) used for OIDC authentication.\n\t * \n\t * @param {string} grant - Grant Type\n\t * @throws {Error}\n\t */\n\tsetGrant(grant) { // \n\t\tswitch(grant) {\n\t\t\tcase 'authorization_code+pkce':\n\t\t\tcase 'implicit':\n\t\t\t\tthis.grant = grant;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Grant Type not supported');\n\t\t}\n\t}\n\n\t/**\n\t * Sets the Client ID for OIDC authentication.\n\t * \n\t * This may override a detected default client ID.\n\t * \n\t * @param {string | null} clientId\n\t */\n\tsetClientId(clientId) {\n\t\tthis.clientId = clientId;\n\t}\n\n\t/**\n\t * Sets the OIDC User.\n\t * \n\t * @see https://github.com/IdentityModel/oidc-client-js/wiki#user\n\t * @param {Oidc.User | null} user - The OIDC User. Passing `null` resets OIDC authentication details.\n\t */\n\tsetUser(user) {\n\t\tif (!user) {\n\t\t\tthis.user = null;\n\t\t\tthis.setToken(null);\n\t\t}\n\t\telse {\n\t\t\tthis.user = user;\n\t\t\tthis.setToken(user.access_token);\n\t\t}\n\t}\n\n\t/**\n\t * Detects the default OIDC client ID for the given redirect URL.\n\t * \n\t * Sets the grant and client ID accordingly.\n\t * \n\t * @returns {OidcClient | null}\n\t * @see OidcProvider#setGrant\n\t * @see OidcProvider#setClientId\n\t */\n\tdetectDefaultClient() {\n\t\tfor(let grant of OidcProvider.grants) {\n\t\t\tlet defaultClient = this.defaultClients.find(client => Boolean(client.grant_types.includes(grant) && Array.isArray(client.redirect_urls) && client.redirect_urls.find(url => url.startsWith(OidcProvider.redirectUrl))));\n\t\t\tif (defaultClient) {\n\t\t\t\tthis.setGrant(grant);\n\t\t\t\tthis.setClientId(defaultClient.id);\n\t\t\t\tthis.defaultClient = defaultClient;\n\t\t\t\treturn defaultClient;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n}\n\n/**\n * The global \"UI\" method to use to open the login URL, either \"redirect\" (default) or \"popup\".\n * \n * @type {string}\n */\nOidcProvider.uiMethod = 'redirect';\n\n/**\n * The global redirect URL to use.\n * \n * By default uses the location of the browser, but removes fragment, query and\n * trailing slash.\n * The fragment conflicts with the fragment appended by the Implicit Flow and\n * the query conflicts with the query appended by the Authorization Code Flow.\n * The trailing slash is removed for consistency.\n * \n * @type {string}\n */\nOidcProvider.redirectUrl = Environment.getUrl().split('#')[0].split('?')[0].replace(/\\/$/, '');\n\n/**\n * The supported OpenID Connect grants (flows).\n * \n * The grants are given as defined in openEO API, e.g. `implicit` and/or `authorization_code+pkce`\n * If not defined there, consult the OpenID Connect Discovery documentation.\n * \n * Lists the grants by priority so that the first grant is the default grant.\n * The default grant type since client version 2.0.0 is 'authorization_code+pkce'.\n * \n * @type {Array.<string>}\n */\nOidcProvider.grants = [\n\t'authorization_code+pkce',\n\t'implicit'\n];\n\nmodule.exports = OidcProvider;\n","const axios = require('axios').default;\nconst Utils = require('@openeo/js-commons/src/utils');\nconst Versions = require('@openeo/js-commons/src/versions');\n\n// API wrapper\nconst Connection = require('./connection');\nconst Job = require('./job');\nconst Logs = require('./logs');\nconst UserFile = require('./userfile');\nconst UserProcess = require('./userprocess');\nconst Service = require('./service');\n\n// Auth Providers\nconst AuthProvider = require('./authprovider');\nconst BasicProvider = require('./basicprovider');\nconst OidcProvider = require('./oidcprovider');\n\n// Response wrapper\nconst Capabilities = require('./capabilities');\nconst FileTypes = require('./filetypes');\n\n// Builder\nconst Builder = require('./builder/builder');\nconst BuilderNode = require('./builder/node');\nconst Parameter = require('./builder/parameter');\nconst Formula = require('./builder/formula');\n\nconst MIN_API_VERSION = '1.0.0-rc.2';\nconst MAX_API_VERSION = '1.x.x';\n\n/**\n * Main class to start with openEO. Allows to connect to a server.\n * \n * @hideconstructor\n */\nclass OpenEO {\n\n\t/**\n\t * Connect to a back-end with version discovery (recommended).\n\t * \n\t * Includes version discovery (request to `GET /well-known/openeo`) and connects to the most suitable version compatible to this JS client version.\n\t * Requests the capabilities and authenticates where required.\n\t * \n\t * @async\n\t * @param {string} url - The server URL to connect to.\n\t * @param {Options} [options={}] - Additional options for the connection.\n\t * @returns {Promise<Connection>}\n\t * @throws {Error}\n\t * @static\n\t */\n\tstatic async connect(url, options = {}) {\n\t\tlet wellKnownUrl = Utils.normalizeUrl(url, '/.well-known/openeo');\n\t\tlet versionedUrl = url;\n\t\tlet response = null;\n\t\ttry {\n\t\t\tresponse = await axios.get(wellKnownUrl, {timeout: 5000});\n\n\t\t\tif (!Utils.isObject(response.data) || !Array.isArray(response.data.versions)) {\n\t\t\t\tthrow new Error(\"Well-Known Document doesn't list any versions.\");\n\t\t\t}\n\t\t} catch(error) {\n\t\t\tconsole.warn(\"Can't read well-known document, connecting directly to the specified URL as fallback mechanism. Reason: \" + error.message);\n\t\t}\n\t\n\t\tif (Utils.isObject(response)) {\n\t\t\tlet version = Versions.findLatest(response.data.versions, true, MIN_API_VERSION, MAX_API_VERSION);\n\t\t\tif (version !== null) {\n\t\t\t\tversionedUrl = version.url;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new Error(\"Server not supported. Client only supports the API versions between \" + MIN_API_VERSION + \" and \" + MAX_API_VERSION);\n\t\t\t}\n\t\t}\n\n\t\tlet connection = await OpenEO.connectDirect(versionedUrl, options);\n\t\tconnection.url = url;\n\t\treturn connection;\n\t}\n\n\t/**\n\t * Connects directly to a back-end instance, without version discovery (NOT recommended).\n\t * \n\t * Doesn't do version discovery, therefore a URL of a versioned API must be specified. Requests the capabilities and authenticates where required.\n\t * \n\t * @async\n\t * @param {string} versionedUrl - The server URL to connect to.\n\t * @param {Options} [options={}] - Additional options for the connection.\n\t * @returns {Promise<Connection>}\n\t * @throws {Error}\n\t * @static\n\t */\n\tstatic async connectDirect(versionedUrl, options = {}) {\n\t\tlet connection = new Connection(versionedUrl, options);\n\n\t\t// Check whether back-end is accessible and supports a compatible version.\n\t\tlet capabilities = await connection.init();\n\t\tif (Versions.compare(capabilities.apiVersion(), MIN_API_VERSION, \"<\") || Versions.compare(capabilities.apiVersion(), MAX_API_VERSION, \">\")) {\n\t\t\tthrow new Error(\"Client only supports the API versions between \" + MIN_API_VERSION + \" and \" + MAX_API_VERSION);\n\t\t}\n\n\t\treturn connection;\n\t}\n\n\t/**\n\t * Returns the version number of the client.\n\t * \n\t * Not to confuse with the API version(s) supported by the client.\n\t * \n\t * @returns {string} Version number (according to SemVer).\n\t */\n\tstatic clientVersion() {\n\t\treturn \"2.5.1\";\n\t}\n\n}\n\nOpenEO.Environment = require('./env');\n\nmodule.exports = {\n\tAbortController,\n\tAuthProvider,\n\tBasicProvider,\n\tCapabilities,\n\tConnection,\n\tFileTypes,\n\tJob,\n\tLogs,\n\tOidcProvider,\n\tOpenEO,\n\tService,\n\tUserFile,\n\tUserProcess,\n\tBuilder,\n\tBuilderNode,\n\tParameter,\n\tFormula\n};\n","const BaseEntity = require('./baseentity');\nconst Logs = require('./logs');\n\n/**\n * A Secondary Web Service.\n * \n * @augments BaseEntity\n */\nclass Service extends BaseEntity {\n\n\t/**\n\t * Creates an object representing a secondary web service stored at the back-end.\n\t * \n\t * @param {Connection} connection - A Connection object representing an established connection to an openEO back-end.\n\t * @param {string} serviceId - The service ID.\n\t */\n\tconstructor(connection, serviceId) {\n\t\tsuper(connection, [\"id\", \"title\", \"description\", \"process\", \"url\", \"type\", \"enabled\", \"configuration\", \"attributes\", \"created\", \"plan\", \"costs\", \"budget\"]);\n\t\t/**\n\t\t * The identifier of the service.\n\t\t * @public\n\t\t * @readonly\n\t\t * @type {string}\n\t\t */\n\t\tthis.id = serviceId;\n\t\t/**\n\t\t * @public\n\t\t * @readonly\n\t\t * @type {?string}\n\t\t */\n\t\tthis.title = undefined;\n\t\t/**\n\t\t * @public\n\t\t * @readonly\n\t\t * @type {?string}\n\t\t */\n\t\tthis.description = undefined;\n\t\t/**\n\t\t * The process chain to be executed.\n\t\t * @public\n\t\t * @readonly\n\t\t * @type {?Process}\n\t\t */\n\t\tthis.process = undefined;\n\t\t/**\n\t\t * URL at which the secondary web service is accessible\n\t\t * @public\n\t\t * @readonly\n\t\t * @type {?string}\n\t\t */\n\t\tthis.url = undefined;\n\t\t/**\n\t\t * Web service type (protocol / standard) that is exposed.\n\t\t * @public\n\t\t * @readonly\n\t\t * @type {?string}\n\t\t */\n\t\tthis.type = undefined;\n\t\t/**\n\t\t * @public\n\t\t * @readonly\n\t\t * @type {?boolean}\n\t\t */\n\t\tthis.enabled = undefined;\n\t\t/**\n\t\t * Map of configuration settings, i.e. the setting names supported by the secondary web service combined with actual values. \n\t\t * @public\n\t\t * @readonly\n\t\t * @type {?object.<string, *>}\n\t\t */\n\t\tthis.configuration = undefined;\n\t\t/**\n\t\t * Additional attributes of the secondary web service, e.g. available layers for a WMS based on the bands in the underlying GeoTiff.\n\t\t * @public\n\t\t * @readonly\n\t\t * @type {?object.<string, *>}\n\t\t */\n\t\tthis.attributes = undefined;\n\t\t/**\n\t\t * Date and time of creation, formatted as a RFC 3339 date-time.\n\t\t * @public\n\t\t * @readonly\n\t\t * @type {?string}\n\t\t */\n\t\tthis.created = undefined;\n\t\t/**\n\t\t * The billing plan to process and charge the service with.\n\t\t * @public\n\t\t * @readonly\n\t\t * @type {?string}\n\t\t */\n\t\tthis.plan = undefined;\n\t\t/**\n\t\t * An amount of money or credits in the currency specified by the back-end.\n\t\t * @public\n\t\t * @readonly\n\t\t * @type {?number}\n\t\t */\n\t\tthis.costs = undefined;\n\t\t/**\n\t\t * Maximum amount of costs the request is allowed to produce in the currency specified by the back-end.\n\t\t * @public\n\t\t * @readonly\n\t\t * @type {?number}\n\t\t */\n\t\tthis.budget = undefined;\n\t}\n\n\t/**\n\t * Updates the data stored in this object by requesting the secondary web service metadata from the back-end.\n\t * \n\t * @async\n\t * @returns {Promise<Service>} The updates service object (this).\n\t * @throws {Error}\n\t */\n\tasync describeService() {\n\t\tlet response = await this.connection._get('/services/' + this.id);\n\t\treturn this.setAll(response.data);\n\t}\n\n\t/**\n\t * Modifies the secondary web service at the back-end and afterwards updates this object, too.\n\t * \n\t * @async\n\t * @param {object} parameters - An object with properties to update, each of them is optional, but at least one of them must be specified. Additional properties can be set if the server supports them.\n\t * @param {Process} parameters.process - A new process.\n\t * @param {string} parameters.title - A new title.\n\t * @param {string} parameters.description - A new description.\n\t * @param {boolean} parameters.enabled - Enables (`true`) or disables (`false`) the service.\n\t * @param {object.<string, *>} parameters.configuration - A new set of configuration parameters to set for the service.\n\t * @param {string} parameters.plan - A new plan.\n\t * @param {number} parameters.budget - A new budget.\n\t * @returns {Promise<Service>} The updated service object (this).\n\t * @throws {Error}\n\t */\n\tasync updateService(parameters) {\n\t\tawait this.connection._patch('/services/' + this.id, this._convertToRequest(parameters));\n\t\tif (this._supports('describeService')) {\n\t\t\treturn await this.describeService();\n\t\t}\n\t\telse {\n\t\t\treturn this.setAll(parameters);\n\t\t}\n\t}\n\n\t/**\n\t * Deletes the secondary web service from the back-end.\n\t * \n\t * @async\n\t * @throws {Error}\n\t */\n\tasync deleteService() {\n\t\tawait this.connection._delete('/services/' + this.id);\n\t}\n\n\t/**\n\t * Get logs for the secondary web service from the back-end.\n\t * \n\t * @returns {Logs}\n\t */\n\tdebugService() {\n\t\treturn new Logs(this.connection, '/services/' + this.id + '/logs');\n\t}\n\n\t/**\n\t * Checks for new log entries every x seconds.\n\t * \n\t * On every status change (enabled/disabled) observed or on new log entries\n\t * (if supported by the back-end and not disabled via `requestLogs`), the\n\t * callback is executed. It may also be executed once at the beginning.\n\t * The callback receives the updated service (this object) and the logs (array) passed.\n\t * \n\t * Returns a function that can be called to stop monitoring the service manually.\n\t * The monitoring must be stopped manually, otherwise it runs forever.\n\t * \n\t * This is only supported if describeService is supported by the back-end.\n\t * \n\t * @param {Function} callback \n\t * @param {number} [interval=60] - Interval between update requests, in seconds as integer.\n\t * @param {boolean} [requestLogs=true] - Enables/Disables requesting logs\n\t * @returns {Function}\n\t * @throws {Error}\n\t */\n\tmonitorService(callback, interval = 60, requestLogs = true) {\n\t\tif (typeof callback !== 'function' || interval < 1) {\n\t\t\treturn;\n\t\t}\n\t\tlet capabilities = this.connection.capabilities();\n\t\tif (!capabilities.hasFeature('describeService')) {\n\t\t\tthrow new Error('Monitoring Services not supported by the back-end.');\n\t\t}\n\n\t\tlet wasEnabled = this.enabled;\n\t\tlet intervalId = null;\n\t\tlet logIterator = null;\n\t\tif (capabilities.hasFeature('debugService') && requestLogs) {\n\t\t\tlogIterator = this.debugService();\n\t\t}\n\t\tlet monitorFn = async () => {\n\t\t\tif (this.getDataAge() > 1) {\n\t\t\t\tawait this.describeService();\n\t\t\t}\n\t\t\tlet logs = logIterator ? await logIterator.nextLogs() : [];\n\t\t\tif (wasEnabled !== this.enabled || logs.length > 0) {\n\t\t\t\tcallback(this, logs);\n\t\t\t}\n\t\t\twasEnabled = this.enabled;\n\t\t};\n\t\tsetTimeout(monitorFn, 0);\n\t\tintervalId = setInterval(monitorFn, interval * 1000);\n\t\tlet stopFn = () => {\n\t\t\tif (intervalId) {\n\t\t\t\tclearInterval(intervalId);\n\t\t\t\tintervalId = null;\n\t\t\t}\n\t\t};\n\t\treturn stopFn;\n\t}\n}\n\nmodule.exports = Service;\n","const Environment = require('./env');\nconst BaseEntity = require('./baseentity');\n\n/**\n * A File on the user workspace.\n * \n * @augments BaseEntity\n */\nclass UserFile extends BaseEntity {\n\n\t/**\n\t * Creates an object representing a file on the user workspace.\n\t * \n\t * @param {Connection} connection - A Connection object representing an established connection to an openEO back-end.\n\t * @param {string} path - The path to the file, relative to the user workspace and without user ID.\n\t */\n\tconstructor(connection, path) {\n\t\tsuper(connection, [\"path\", \"size\", \"modified\"]);\n\t\t/**\n\t\t * Path to the file, relative to the user's directory.\n\t\t * @readonly\n\t\t * @public\n\t\t * @type {string}\n\t\t */\n\t\tthis.path = path;\n\t\t/** \n\t\t * File size in bytes as integer.\n\t\t * @readonly\n\t\t * @public\n\t\t * @type {number}\n\t\t */\n\t\tthis.size = undefined;\n\t\t/**\n\t\t * Date and time the file has lastly been modified, formatted as a RFC 3339 date-time.\n\t\t * @readonly\n\t\t * @public\n\t\t * @type {string}\n\t\t */\n\t\tthis.modified = undefined;\n\t}\n\n\t/**\n\t * Downloads a file from the user workspace into memory.\n\t * \n\t * This method has different behaviour depending on the environment.\n\t * Returns a stream in a NodeJS environment or a Blob in a browser environment.\n\t * \n\t * @async\n\t * @returns {Promise<Stream.Readable|Blob>} - Return value depends on the target and environment, see method description for details.\n\t * @throws {Error}\n\t */\n\tasync retrieveFile() {\n\t\treturn await this.connection.download('/files/' + this.path, true);\n\t}\n\n\t/**\n\t * Downloads a file from the user workspace and saves it.\n\t * \n\t * This method has different behaviour depending on the environment.\n\t * In a NodeJS environment writes the downloaded file to the target location on the file system.\n\t * In a browser environment offers the file for downloading using the specified name (folders are not supported).\n\t * \n\t * @async\n\t * @param {string} target - The target, see method description for details.\n\t * @returns {Promise<Array.<string>|void>} - Return value depends on the target and environment, see method description for details.\n\t * @throws {Error}\n\t */\n\tasync downloadFile(target) {\n\t\tlet data = await this.connection.download('/files/' + this.path, true);\n\t\t// @ts-ignore\n\t\treturn await Environment.saveToFile(data, target);\n\t}\n\n\t/**\n\t * A callback that is executed on upload progress updates.\n\t * \n\t * @callback uploadStatusCallback\n\t * @param {number} percentCompleted - The percent (0-100) completed.\n\t * @param {UserFile} file - The file object corresponding to the callback.\n\t */\n\n\t/**\n\t * Uploads a file to the user workspace.\n\t * If a file with the name exists, overwrites it.\n\t * \n\t * This method has different behaviour depending on the environment.\n\t * In a nodeJS environment the source must be a path to a file as string.\n\t * In a browser environment the source must be an object from a file upload form.\n\t * \n\t * @async\n\t * @param {*} source - The source, see method description for details.\n\t * @param {?uploadStatusCallback} statusCallback - Optionally, a callback that is executed on upload progress updates.\n\t * @param {?AbortController} [abortController=null] - An AbortController object that can be used to cancel the upload process.\n\t * @returns {Promise<UserFile>}\n\t * @throws {Error}\n\t */\n\tasync uploadFile(source, statusCallback = null, abortController = null) {\n\t\tlet options = {\n\t\t\tmethod: 'put',\n\t\t\turl: '/files/' + this.path,\n\t\t\tdata: Environment.dataForUpload(source),\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/octet-stream'\n\t\t\t}\n\t\t};\n\t\tif (typeof statusCallback === 'function') {\n\t\t\toptions.onUploadProgress = (progressEvent) => {\n\t\t\t\tlet percentCompleted = Math.round( (progressEvent.loaded * 100) / progressEvent.total );\n\t\t\t\tstatusCallback(percentCompleted, this);\n\t\t\t};\n\t\t}\n\n\t\tlet response = await this.connection._send(options, abortController);\n\t\treturn this.setAll(response.data);\n\t}\n\n\t/**\n\t * Deletes the file from the user workspace.\n\t * \n\t * @async\n\t * @throws {Error}\n\t */\n\tasync deleteFile() {\n\t\tawait this.connection._delete('/files/' + this.path);\n\t}\n}\n\nmodule.exports = UserFile;\n","const BaseEntity = require('./baseentity');\nconst Utils = require('@openeo/js-commons/src/utils');\n\n/**\n * A Stored Process Graph.\n * \n * @augments BaseEntity\n */\nclass UserProcess extends BaseEntity {\n\n\t/**\n\t * Creates an object representing a process graph stored at the back-end.\n\t * \n\t * @param {Connection} connection - A Connection object representing an established connection to an openEO back-end.\n\t * @param {string} id - ID of a stored process graph.\n\t */\n\tconstructor(connection, id) {\n\t\tsuper(connection, [\n\t\t\t\"id\",\n\t\t\t\"summary\",\n\t\t\t\"description\",\n\t\t\t\"categories\",\n\t\t\t\"parameters\",\n\t\t\t\"returns\",\n\t\t\t\"deprecated\",\n\t\t\t\"experimental\",\n\t\t\t\"exceptions\",\n\t\t\t\"examples\",\n\t\t\t\"links\",\n\t\t\t[\"process_graph\", \"processGraph\"]\n\t\t]);\n\t\t/**\n\t\t * The identifier of the process.\n\t\t * @public\n\t\t * @readonly\n\t\t * @type {string}\n\t\t */\n\t\tthis.id = id;\n\t\t/**\n\t\t * @public\n\t\t * @readonly\n\t\t * @type {?string}\n\t\t */\n\t\tthis.summary = undefined;\n\t\t/**\n\t\t * @public\n\t\t * @readonly\n\t\t * @type {?string}\n\t\t */\n\t\tthis.description = undefined;\n\t\t/**\n\t\t * A list of categories.\n\t\t * @public\n\t\t * @readonly\n\t\t * @type {?Array.<string>}\n\t\t */\n\t\tthis.categories = undefined;\n\t\t/**\n\t\t * A list of parameters.\n\t\t * \n\t\t * @public\n\t\t * @readonly\n\t\t * @type {?Array.<object.<string, *>>}\n\t\t */\n\t\tthis.parameters = undefined;\n\t\t/**\n\t\t * Description of the data that is returned by this process.\n\t\t * @public\n\t\t * @readonly\n\t\t * @type {?object.<string, *>}\n\t\t */\n\t\tthis.returns = undefined;\n\t\t/**\n\t\t * Specifies that the process or parameter is deprecated with the potential to be removed in any of the next versions. \n\t\t * @public\n\t\t * @readonly\n\t\t * @type {?boolean}\n\t\t */\n\t\tthis.deprecated = undefined;\n\t\t/**\n\t\t * Declares the process or parameter to be experimental, which means that it is likely to change or may produce unpredictable behaviour. \n\t\t * @public\n\t\t * @readonly\n\t\t * @type {?boolean}\n\t\t */\n\t\tthis.experimental = undefined;\n\t\t/**\n\t\t * Declares any exceptions (errors) that might occur during execution of this process.\n\t\t * @public\n\t\t * @readonly\n\t\t * @type {?object.<string, *>}\n\t\t */\n\t\tthis.exceptions = undefined;\n\t\t/**\n\t\t * @public\n\t\t * @readonly\n\t\t * @type {?Array.<object.<string, *>>}\n\t\t */\n\t\tthis.examples = undefined;\n\t\t/**\n\t\t * Links related to this process.\n\t\t * @public\n\t\t * @readonly\n\t\t * @type {?Array.<Link>}\n\t\t */\n\t\tthis.links = undefined;\n\t\t/**\n\t\t * @public\n\t\t * @readonly\n\t\t * @type {?object.<string, *>}\n\t\t */\n\t\tthis.processGraph = undefined;\n\t}\n\n\t/**\n\t * Updates the data stored in this object by requesting the process graph metadata from the back-end.\n\t * \n\t * @async\n\t * @returns {Promise<UserProcess>} The updated process graph object (this).\n\t * @throws {Error}\n\t */\n\tasync describeUserProcess() {\n\t\tlet response = await this.connection._get('/process_graphs/' + this.id);\n\t\tif (!Utils.isObject(response.data) || typeof response.data.id !== 'string') {\n\t\t\tthrow new Error('Invalid response received for user process');\n\t\t}\n\t\tthis.connection.processes.add(response.data, 'user');\n\t\treturn this.setAll(response.data);\n\t}\n\n\t/**\n\t * Modifies the stored process graph at the back-end and afterwards updates this object, too.\n\t * \n\t * @async\n\t * @param {object} parameters - An object with properties to update, each of them is optional, but at least one of them must be specified. Additional properties can be set if the server supports them.\n\t * @param {Process} parameters.process - A new process.\n\t * @param {string} parameters.title - A new title.\n\t * @param {string} parameters.description - A new description.\n\t * @returns {Promise<UserProcess>} The updated process graph object (this).\n\t * @throws {Error}\n\t */\n\tasync replaceUserProcess(parameters) {\n\t\tawait this.connection._put('/process_graphs/' + this.id, this._convertToRequest(parameters));\n\t\tif (this._supports('describeUserProcess')) {\n\t\t\treturn this.describeUserProcess();\n\t\t}\n\t\telse {\n\t\t\tlet obj = this.setAll(parameters);\n\t\t\tthis.connection.processes.add(obj.toJSON(), 'user');\n\t\t\treturn obj;\n\t\t}\n\t}\n\n\t/**\n\t * Deletes the stored process graph from the back-end.\n\t * \n\t * @async\n\t * @throws {Error}\n\t */\n\tasync deleteUserProcess() {\n\t\tawait this.connection._delete('/process_graphs/' + this.id);\n\t\tthis.connection.processes.remove(this.id, 'user');\n\t}\n}\n\nmodule.exports = UserProcess;\n","// Migrations\r\nconst MigrateCapabilities = require('./migrate/capabilities');\r\nconst MigrateCollections = require('./migrate/collections');\r\nconst MigrateProcesses = require('./migrate/processes');\r\n// Processes\r\nconst ProcessDataType = require('./processDataType');\r\nconst ProcessParameter = require('./processParameter');\r\nconst ProcessSchema = require('./processSchema');\r\nconst ProcessUtils = require('./processUtils');\r\nconst ProcessRegistry = require('./processRegistry');\r\n// Others\r\nconst Versions = require('./versions');\r\nconst Utils = require('./utils');\r\n\r\nmodule.exports = {\r\n\tMigrateCapabilities,\r\n\tMigrateCollections,\r\n\tMigrateProcesses,\r\n\tProcessDataType,\r\n\tProcessParameter,\r\n\tProcessSchema,\r\n\tProcessUtils,\r\n\tProcessRegistry,\r\n\tVersions,\r\n\tUtils,\r\n};","const Utils = require('../utils.js');\r\nconst Versions = require('../versions.js');\r\nconst MigrateCommons = require('./commons.js');\r\n\r\nconst NO_VERSION = \"0.0.0\";\r\n\r\n/** Migrate capabilities related responses to the latest version. */\r\nclass MigrateCapabilities {\r\n\r\n    /**\r\n     * Tries to determine the API version from the capabilities object.\r\n     * \r\n     * Returns the version number, e.g. \"0.4.2\", \"1.0.0\" or \"0.0.0\" (if unknown).\r\n     * \r\n     * @param {object} capabilities \r\n     * @returns {string}\r\n     */\r\n    static guessApiVersion(capabilities) {\r\n        // No object passed\r\n        if (!Utils.isObject(capabilities)) {\r\n            return NO_VERSION;\r\n        }\r\n\r\n        // Get exact info from version fields\r\n        if (Versions.validate(capabilities.api_version)) {\r\n            return capabilities.api_version;\r\n        }\r\n        else if (Versions.validate(capabilities.version)) {\r\n            return capabilities.version;\r\n        }\r\n        // Now we are really guessing\r\n        else if (Array.isArray(capabilities.endpoints)) {\r\n            if (capabilities.endpoints.find(e => e.path === '/file_formats' || e.path === '/conformance' || e.path === '/files')) {\r\n                return \"1.0.0\";\r\n            }\r\n            else if (capabilities.endpoints.find(e => e.path === '/output_formats' || e.path === '/files/{user_id}')) {\r\n                return \"0.4.2\";\r\n            }\r\n            else if (!capabilities.backend_version && !capabilities.title && !capabilities.description && !capabilities.links) {\r\n                return \"0.3.1\";\r\n            }\r\n        }\r\n\r\n        // Can't determine version\r\n        return NO_VERSION;\r\n    }\r\n\r\n    /**\r\n     * Converts a `GET /` response to the latest version.\r\n     * \r\n     * Always returns a deep copy of the input object.\r\n     * \r\n     * @param {object} response - The response to convert\r\n     * @param {string|null} version - Version number of the API, which the response conforms to. If `null`, tries to guess the version with `guessApiVersion()`.\r\n     * @param {boolean} updateVersionNumbers - Should version numbers in the response be updated?\r\n     * @param {boolean} updateEndpointPaths - Should the endpoint paths be updated to their recent equivalents?\r\n     * @param {string} id - If no id is set in the response, sets it to the value specified here. Defaults to `unknown`.\r\n     * @param {string} title - If no title is set in the response, sets it to the value specified here. Defaults to `Unknown`.\r\n     * @param {string} title - If no backend_version is set in the response, sets it to the value specified here. Defaults to `0.0.0`.\r\n     * @returns {object}\r\n     */\r\n    static convertCapabilitiesToLatestSpec(originalCapabilities, version = null, updateVersionNumbers = true, updateEndpointPaths = true, id = \"unknown\", title = \"Unknown\", backend_version = \"0.0.0\") {\r\n        if (version === null) {\r\n            version = this.guessApiVersion(originalCapabilities);\r\n        }\r\n        // Return empty if version number is not available\r\n        if (version === NO_VERSION) {\r\n            return {};\r\n        }\r\n\r\n        if (Versions.compare(version, \"0.3.x\", \"<=\")) {\r\n            throw \"Migrating from API version 0.3.0 and older is not supported.\";\r\n        }\r\n\r\n        let capabilities = Utils.deepClone(originalCapabilities);\r\n        // Fill & Update version number\r\n        if (!updateVersionNumbers) {\r\n            capabilities.api_version = version;\r\n        }\r\n        else {\r\n            capabilities.api_version = \"1.0.0\";\r\n        }\r\n\r\n        // Convert billing plans\r\n        if (Utils.isObject(capabilities.billing)) {\r\n            capabilities.billing = this.convertBillingToLatestSpec(capabilities.billing, version);\r\n        }\r\n        else {\r\n            delete capabilities.billing;\r\n        }\r\n\r\n        // Convert endpoints\r\n        capabilities.endpoints = this.convertEndpointsToLatestSpec(capabilities.endpoints, version, updateEndpointPaths);\r\n\r\n        // Fill STAC Version field\r\n        if (!updateVersionNumbers && Versions.compare(version, \"0.4.x\", \"=\")) {\r\n            capabilities.stac_version = \"0.6.2\";\r\n        }\r\n        else if (updateVersionNumbers || typeof capabilities.stac_version !== 'string') {\r\n            capabilities.stac_version = \"0.9.0\";\r\n        }\r\n\r\n        // Add missing fields with somewhat useful data\r\n        if (typeof capabilities.production !== 'boolean') {\r\n            capabilities.production = Versions.compare(version, \"1.0.0-rc.1\", \"=\") || Versions.compare(version, \"1.0.0-rc.2\", \"=\") ? true : false;\r\n        }\r\n        if (typeof capabilities.backend_version !== 'string') {\r\n            capabilities.backend_version = backend_version;\r\n        }\r\n        if (typeof capabilities.id !== 'string') {\r\n            capabilities.id = id;\r\n        }\r\n        if (typeof capabilities.title !== 'string') {\r\n            capabilities.title = title;\r\n        }\r\n        if (typeof capabilities.description !== 'string') {\r\n            capabilities.description = \"\";\r\n        }\r\n        capabilities.links = MigrateCommons.migrateLinks(capabilities.links, version);\r\n\r\n        return capabilities;\r\n    }\r\n\r\n    /**\r\n     * Converts the billing part of the `GET /` response to the latest version.\r\n     * \r\n     * Always returns a deep copy of the input object.\r\n     * \r\n     * @param {object} billing - The response to convert\r\n     * @param {string} version - Version number of the API, which the response conforms to\r\n     * @returns {object}\r\n     */\r\n    static convertBillingToLatestSpec(billing, version) {\r\n        if (Versions.compare(version, \"0.3.x\", \"<=\")) {\r\n            throw \"Migrating from API version 0.3.0 and older is not supported.\";\r\n        }\r\n        if (Utils.isObject(billing)) {\r\n            billing = Utils.deepClone(billing);\r\n        }\r\n        else {\r\n            billing = {};\r\n        }\r\n\r\n        if (typeof billing.currency !== 'string') {\r\n            billing.currency = null;\r\n        }\r\n\r\n        return billing;\r\n    }\r\n\r\n    /**\r\n     * Converts the endpoints part of the `GET /` response to the latest version.\r\n     * \r\n     * Always returns a deep copy of the input object.\r\n     * \r\n     * @param {array} endpoints - The response to convert\r\n     * @param {string} version - Version number of the API, which the response conforms to\r\n     * @param {boolean} updatePaths - Should the endpoint paths be updated to their recent equivalents?\r\n     * @returns {array}\r\n     */\r\n    static convertEndpointsToLatestSpec(endpoints, version, updatePaths = false) {\r\n        if (Versions.compare(version, \"0.3.x\", \"<=\")) {\r\n            throw \"Migrating from API version 0.3.0 and older is not supported.\";\r\n        }\r\n        if (!Array.isArray(endpoints)) {\r\n            return [];\r\n        }\r\n        endpoints = Utils.deepClone(endpoints);\r\n        // convert v0.4 endpoints to v1.0\r\n        if (updatePaths) {\r\n            let isV04 = Versions.compare(version, \"0.4.x\", \"=\");\r\n            let isLtV100RC2 = Versions.compare(version, \"1.0.0-rc.2\", \"<\");\r\n\r\n            let addPutToPg = function(endpoints) {\r\n                let newPgPath = '/process_graphs/{process_graph_id}';\r\n                let i = endpoints.findIndex(e => e.path === newPgPath);\r\n                if (i >= 0) {\r\n                    if (endpoints[i].methods.indexOf('PUT') === -1) {\r\n                        endpoints[i].methods.push('PUT');\r\n                    }\r\n                }\r\n                else {\r\n                    endpoints.push({\r\n                        path: newPgPath,\r\n                        methods: ['PUT']\r\n                    });\r\n                }\r\n                return endpoints;\r\n            };\r\n\r\n            for(var i in endpoints) {\r\n                let e = endpoints[i];\r\n                if (isV04) {\r\n                    switch (e.path) {\r\n                        case '/output_formats':\r\n                            e.path = '/file_formats';\r\n                            break;\r\n                        case '/files/{user_id}':\r\n                            e.path = '/files';\r\n                            break;\r\n                        case '/files/{user_id}/{path}':\r\n                            e.path = '/files/{path}';\r\n                            break;\r\n                    }\r\n                }\r\n                if (isLtV100RC2) {\r\n                    switch (e.path) {\r\n                        case '/process_graphs':\r\n                            let post = e.methods.indexOf('POST');\r\n                            if (post >= 0) {\r\n                                e.methods.splice(post, 1);\r\n                                addPutToPg(endpoints);\r\n                            }\r\n                            break;\r\n                        case '/process_graphs/{process_graph_id}':\r\n                            let patch = e.methods.indexOf('PATCH');\r\n                            if (patch >= 0) {\r\n                                e.methods.splice(patch, 1);\r\n                                addPutToPg(endpoints);\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return endpoints;\r\n    }\r\n\r\n    /**\r\n     * Alias for `convertFileFormatsToLatestSpec()`.\r\n     * \r\n     * @alias MigrateCapabilities.convertFileFormatsToLatestSpec\r\n     * @deprecated\r\n     * @param {object} formats - The response to convert\r\n     * @param {string} version - Version number of the API, which the response conforms to\r\n     * @returns {object}\r\n     */\r\n    static convertOutputFormatsToLatestSpec(formats, version) {\r\n        return this.convertFileFormatsToLatestSpec(formats, version);\r\n    }\r\n\r\n    /**\r\n     * Converts a `GET /file_formats` response to the latest version.\r\n     * \r\n     * Always returns a deep copy of the input object.\r\n     * \r\n     * @param {object} formats - The response to convert\r\n     * @param {string} version - Version number of the API, which the response conforms to\r\n     * @returns {object}\r\n     */\r\n    static convertFileFormatsToLatestSpec(formats, version) {\r\n        if (Versions.compare(version, \"0.3.x\", \"<=\")) {\r\n            throw \"Migrating from API version 0.3.0 and older is not supported.\";\r\n        }\r\n        if (Utils.isObject(formats)) {\r\n            formats = Utils.deepClone(formats);\r\n        }\r\n        else {\r\n            formats = {};\r\n        }\r\n\r\n        if (Versions.compare(version, \"0.4.x\", \"=\") && Utils.isObject(formats)) {\r\n            formats = {\r\n                output: formats\r\n            };\r\n        }\r\n\r\n        formats.input = upgradeFileFormats(formats.input, version);\r\n        formats.output = upgradeFileFormats(formats.output, version);\r\n\r\n        return formats;\r\n    }\r\n\r\n    /**\r\n     * Converts a `GET /service_types` response to the latest version.\r\n     * \r\n     * Always returns a deep copy of the input object.\r\n     * \r\n     * @param {object} types - The response to convert\r\n     * @param {string} version - Version number of the API, which the response conforms to\r\n     * @returns {object}\r\n     */\r\n    static convertServiceTypesToLatestSpec(types, version) {\r\n        if (Versions.compare(version, \"0.3.x\", \"<=\")) {\r\n            throw \"Migrating from API version 0.3.0 and older is not supported.\";\r\n        }\r\n        if (!Utils.isObject(types)) {\r\n            return {};\r\n        }\r\n\r\n        types = Utils.deepClone(types);\r\n        for(let t in types) {\r\n            if (!Utils.isObject(types[t])) {\r\n                types[t] = {};\r\n            }\r\n            if (Versions.compare(version, \"0.4.x\", \"=\")) {\r\n                // Remove attributes\r\n                delete types[t].attributes;\r\n\r\n                // Rename parameters to configuration\r\n                if (Utils.isObject(types[t].parameters)) {\r\n                    types[t].configuration = types[t].parameters;\r\n                }\r\n                delete types[t].parameters;\r\n\r\n                // Rename variables to process_parameters\r\n                if (Array.isArray(types[t].variables)) {\r\n                    types[t].process_parameters = types[t].variables.map(v => {\r\n                        let param = {\r\n                            name: v.variable_id,\r\n                            description: typeof v.description === 'string' ? v.description : \"\",\r\n                            schema: {\r\n                                type: [\r\n                                    typeof v.type === 'string' ? v.type : \"string\",\r\n                                    \"null\"\r\n                                ]\r\n                            }\r\n                        };\r\n                        if (typeof v.default !== 'undefined') {\r\n                            param.default = v.default;\r\n                        }\r\n                        return param;\r\n                    });\r\n                }\r\n                delete types[t].variables;\r\n            }\r\n\r\n            if (!Utils.isObject(types[t].configuration)) {\r\n                types[t].configuration = {};\r\n            }\r\n            else {\r\n                types[t].configuration = MigrateCommons.migrateDiscoveryParameters(types[t].configuration, version);\r\n            }\r\n\r\n            if (!Array.isArray(types[t].process_parameters)) {\r\n                types[t].process_parameters = [];\r\n            }\r\n\r\n            if (typeof types[t].links !== 'undefined') { // links not required, so only apply if defined anyway\r\n                types[t].links = MigrateCommons.migrateLinks(types[t].links, version);\r\n            }\r\n        }\r\n        return types;\r\n    }\r\n\r\n    /**\r\n     * Converts a `GET /udf_runtimes` response to the latest version.\r\n     * \r\n     * Always returns a deep copy of the input object.\r\n     * \r\n     * @param {object} runtimes - The response to convert\r\n     * @param {string} version - Version number of the API, which the response conforms to\r\n     * @returns {object}\r\n     */\r\n    static convertUdfRuntimesToLatestSpec(runtimes, version) {\r\n        if (Versions.compare(version, \"0.3.x\", \"<=\")) {\r\n            throw \"Migrating from API version 0.3.0 and older is not supported.\";\r\n        }\r\n        if (!Utils.isObject(runtimes)) {\r\n            return {};\r\n        }\r\n\r\n        runtimes = Utils.deepClone(runtimes);\r\n        for(let r in runtimes) {\r\n        // Nothing to do, was not supported in 0.3 and nothing changed in 0.4.\r\n            if (Versions.compare(version, \"0.4.x\", \"=\")) {\r\n                if (!Utils.isObject(runtimes[r])) {\r\n                    delete runtimes[r];\r\n                    continue;\r\n                }\r\n\r\n                // null is not allowed any longer, replace with empty string\r\n                if (runtimes[r].description === null) {\r\n                    runtimes[r].description = \"\";\r\n                }\r\n            }\r\n\r\n            if (typeof runtimes[r].type !== 'string') {\r\n                if (typeof runtimes[r].docker === 'string') {\r\n                    runtimes[r].type = 'docker';\r\n                }\r\n                else {\r\n                    runtimes[r].type = 'language';\r\n                }\r\n            }\r\n\r\n            if (typeof runtimes[r].links !== 'undefined') { // links not required, so only apply if defined anyway\r\n                runtimes[r].links = MigrateCommons.migrateLinks(runtimes[r].links, version);\r\n            }\r\n        }\r\n\r\n        return runtimes;\r\n    }\r\n\r\n}\r\n\r\nconst GIS_DATA_TYPES = ['raster', 'vector', 'table', 'other'];\r\n\r\nfunction upgradeFileFormats(formats, version) {\r\n    if (!Utils.isObject(formats)) {\r\n        formats = {};\r\n    }\r\n    for(let id in formats) {\r\n        if (!Utils.isObject(formats[id].parameters)) {\r\n            formats[id].parameters = {};\r\n        }\r\n        else {\r\n            formats[id].parameters = MigrateCommons.migrateDiscoveryParameters(formats[id].parameters, version);\r\n        }\r\n\r\n        // Can be empty: https://github.com/Open-EO/openeo-api/issues/325\r\n        if (!Array.isArray(formats[id].gis_data_types)) {\r\n            formats[id].gis_data_types = [];\r\n        }\r\n        else {\r\n            formats[id].gis_data_types = formats[id].gis_data_types.filter(t => GIS_DATA_TYPES.includes(t));\r\n        }\r\n\r\n        if (typeof formats[id].links !== 'undefined') { // links not required, so only apply if defined anyway\r\n            formats[id].links = MigrateCommons.migrateLinks(formats[id].links, version);\r\n        }\r\n    }\r\n    return formats;\r\n}\r\n\r\nmodule.exports = MigrateCapabilities;","const Utils = require('../utils.js');\r\nconst Versions = require('../versions.js');\r\nconst MigrateCommons = require('./commons.js');\r\n\r\nconst extMap = {\r\n    \"cube\": \"datacube\",\r\n    \"eo\": \"eo\",\r\n    \"label\": \"label\",\r\n    \"pc\": \"pointcloud\",\r\n    \"proj\": \"projection\",\r\n    \"sar\": \"sar\",\r\n    \"sat\": \"sat\",\r\n    \"sci\": \"scientific\",\r\n    \"view\": \"view\"\r\n};\r\n\r\nconst fieldMap = {\r\n    // Item to core\r\n    'item:license': 'license',\r\n    'item:providers': 'providers',\r\n    // EO to core\r\n    'eo:instrument': 'instruments',\r\n    'eo:platform': 'platform',\r\n    'eo:constellation': 'constellation',\r\n    // EO to proj\r\n    'eo:epsg': 'proj:epsg',\r\n    // EO to view\r\n    'eo:off_nadir': 'view:off_nadir',\r\n    'eo:azimuth': 'view:azimuth',\r\n    'eo:sun_azimuth': 'view:sun_azimuth',\r\n    'eo:sun_elevation': 'view:sun_elevation',\r\n    // Datetime Range to core\r\n    'dtr:start_datetime': 'start_datetime',\r\n    'dtr:end_datetime': 'end_datetime',\r\n    // Point Cloud\r\n    'pc:schema': 'pc:schemas',\r\n    // SAR rename\r\n    'sar:type': 'sar:product_type',\r\n    'sar:polarization': 'sar:polarizations',\r\n    // SAR to core\r\n    'sar:instrument': 'instruments',\r\n    'sar:platform': 'platform',\r\n    'sar:constellation': 'constellation',\r\n    // SAR to sat\r\n    'sar:off_nadir': 'sat:off_nadir_angle',\r\n    'sar:relative_orbit': 'sat:relative_orbit',\r\n// The following four fields don't translate directly, see code below\r\n    'sar:pass_direction': 'sat:orbit_state',\r\n//   sar:resolution => sar:resolution_range, sar:resolution_azimuth\r\n//   sar:pixel_spacing => sar:pixel_spacing_range, sar:pixel_spacing_azimuth\r\n//   sar:looks => sar:looks_range, sar:looks_azimuth, sar:looks_equivalent_number (opt)\r\n};\r\n\r\nconst moveToRoot = [\r\n    'cube:dimensions',\r\n    'sci:publications',\r\n    'sci:doi',\r\n    'sci:citation'\r\n];\r\n\r\nconst DIMENSION_TYPES = [\r\n    'spatial',\r\n    'temporal',\r\n    'bands',\r\n    'other'\r\n];\r\n\r\n\r\n/** Migrate Collections related responses to the latest version. */\r\nclass MigrateCollections {\r\n\r\n    /**\r\n     * Converts a `GET /collections` response to the latest version.\r\n     * \r\n     * Always returns a deep copy of the input object.\r\n     * \r\n     * @param {object} response - The response to convert\r\n     * @param {string} version - Version number of the API, which the response conforms to\r\n     * @returns {object}\r\n     */\r\n    static convertCollectionsToLatestSpec(response, version) {\r\n        if (Versions.compare(version, \"0.3.x\", \"<=\")) {\r\n            throw \"Migrating from API version 0.3.0 and older is not supported.\";\r\n        }\r\n\r\n        // Make sure we don't alter the original object\r\n        response = Utils.deepClone(response);\r\n\r\n        if (Array.isArray(response.collections)) {\r\n            response.collections = response.collections\r\n                .map(c => MigrateCollections.convertCollectionToLatestSpec(c, version))\r\n                .filter(c => typeof c.id === 'string');\r\n        }\r\n        else {\r\n            response.collections = [];\r\n        }\r\n\r\n        response.links = MigrateCommons.migrateLinks(response.links, version);\r\n\r\n        return response;\r\n    }\r\n\r\n    /**\r\n     * Converts a single collection to the latest version.\r\n     * \r\n     * Always returns a deep copy of the input object.\r\n     * \r\n     * @param {object} process - The collection to convert\r\n     * @param {string} version - Version number of the API, which the collection conforms to\r\n     * @returns {object}\r\n     */\r\n    static convertCollectionToLatestSpec(originalCollection, version) {\r\n        if (Versions.compare(version, \"0.3.x\", \"<=\")) {\r\n            throw \"Migrating from API version 0.3.0 and older is not supported.\";\r\n        }\r\n\r\n        // Make sure we don't alter the original object\r\n        let collection = Utils.deepClone(originalCollection);\r\n\r\n        // If collection has no id => seems to be an invalid collection => abort\r\n        if (typeof collection.id !== 'string' || collection.id.length === 0) {\r\n            return {};\r\n        }\r\n\r\n        // Update stac_version\r\n        if (!Versions.validate(collection.stac_version) || Versions.compare(collection.stac_version, \"0.9.0\", \"<\")) {\r\n            collection.stac_version = \"0.9.0\";\r\n        }\r\n\r\n        // Add missing extent upfront. Makes the following code simpler as it works on the object.\r\n        if (!Utils.isObject(collection.extent)) {\r\n            collection.extent = {};\r\n        }\r\n\r\n        // convert v0.4 collections to latest version\r\n        if (Versions.compare(version, \"0.4.x\", \"=\")) {\r\n            // Restructure spatial extent\r\n            if (Array.isArray(collection.extent.spatial)) {\r\n                collection.extent.spatial = {\r\n                    bbox: [\r\n                        collection.extent.spatial\r\n                    ]\r\n                };\r\n            }\r\n            // Restructure temporal extent\r\n            if (Array.isArray(collection.extent.temporal)) {\r\n                collection.extent.temporal = {\r\n                    interval: [\r\n                        collection.extent.temporal\r\n                    ]\r\n                };\r\n            }\r\n\r\n            // move properties to other_properties\r\n            if (Utils.isObject(collection.properties)) {\r\n                if (!Utils.isObject(collection.other_properties)) {\r\n                    collection.other_properties = {};\r\n                }\r\n                for(let key in collection.properties) {\r\n                    collection.other_properties[key] = {\r\n                        values: [\r\n                            collection.properties[key]\r\n                        ]\r\n                    };\r\n                }\r\n            }\r\n            delete collection.properties;\r\n\r\n            // now we can work on all properties and migrate to summaries\r\n            let props = Utils.isObject(collection.other_properties) ? collection.other_properties : {};\r\n            for(let key in props) {\r\n                let val = props[key];\r\n                if (Utils.isObject(val) && (Array.isArray(val.extent) || Array.isArray(val.values))) {\r\n                    if (Array.isArray(val.extent)) {\r\n                        props[key] = {\r\n                            min: val.extent[0],\r\n                            max: val.extent[1]\r\n                        };\r\n                    }\r\n                    else { // val.values is an array\r\n                        if (val.values.findIndex(v => !Array.isArray(v)) === -1) {\r\n                            if (val.values.length <= 1) {\r\n                                props[key] = val.values[0];\r\n                            }\r\n                            else {\r\n                                props[key] = val.values.reduce((a, b) => a.concat(b));\r\n                            }\r\n                        }\r\n                        else {\r\n                            props[key] = val.values;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    // If not valid, move to top-level\r\n                    if (typeof collection[key] === 'undefined') {\r\n                        collection[key] = val;\r\n                    }\r\n                    delete props[key];\r\n                }\r\n            }\r\n            delete collection.other_properties;\r\n\r\n            if (!Utils.isObject(collection.summaries)) {\r\n                collection.summaries = {};\r\n            }\r\n            for(let key in props) {\r\n                let val = props[key];\r\n\r\n                if (key === 'sar:pass_direction') {\r\n                    // Convert null to geostationary\r\n                    val = val.map(v => v === null ? 'geostationary' : v);\r\n                }\r\n\r\n                // Convert arrays into separate fields as needed for some SAR fields\r\n                if ((key === 'sar:resolution' || key === 'sar:pixel_spacing' || key === 'sar:looks') && Array.isArray(val) && val.length >= 2) {\r\n                    collection.summaries[key + '_range'] = val.slice(0,1);\r\n                    collection.summaries[key + '_azimuth'] = val.slice(1,2);\r\n                    if (val.length > 2) {\r\n                        collection.summaries[key + '_equivalent_number'] = val.slice(2,3);\r\n                    }\r\n                }\r\n                // Do the renaming of fields\r\n                else if (typeof fieldMap[key] === 'string') {\r\n                    collection.summaries[fieldMap[key]] = val;\r\n                }\r\n                // Move invalid summaries to the top level\r\n                else if (moveToRoot.includes(key) && Array.isArray(val) && val.length === 1) {\r\n                    collection[key] = val[0];\r\n                }\r\n                // Do the general conversion\r\n                else {\r\n                    collection.summaries[key] = val;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Add missing required fields\r\n        if (typeof collection.description !== 'string') {\r\n            collection.description = \"\";\r\n        }\r\n        if (!Utils.isObject(collection.extent.spatial)) {\r\n            collection.extent.spatial = {};\r\n        }\r\n        if (!Utils.isObject(collection.extent.temporal)) {\r\n            collection.extent.temporal = {};\r\n        }\r\n        if (typeof collection.license !== 'string') {\r\n            collection.license = \"proprietary\";\r\n        }\r\n        if (!Utils.isObject(collection.summaries)) {\r\n            collection.summaries = {};\r\n        }\r\n        if (!Utils.isObject(collection['cube:dimensions'])) {\r\n            collection['cube:dimensions'] = {};\r\n        }\r\n        else {\r\n            for(var name in collection['cube:dimensions']) {\r\n                if (Utils.isObject(collection['cube:dimensions'][name]) && !DIMENSION_TYPES.includes(collection['cube:dimensions'][name].type)) {\r\n                    collection['cube:dimensions'][name].type = 'other';\r\n                }\r\n            }\r\n        }\r\n\r\n        // Fix links\r\n        collection.links = MigrateCommons.migrateLinks(collection.links);\r\n\r\n        // Fix stac_extensions\r\n        var extensions = Array.isArray(collection.stac_extensions) ? collection.stac_extensions : [];\r\n        for(var key in collection) {\r\n            let ext = null;\r\n            let prefix = key.split(':', 1);\r\n            if (key === 'deprecated' || key === 'version') {\r\n                ext = 'version';\r\n            }\r\n            else if (typeof extMap[prefix] === 'string') {\r\n                ext = extMap[prefix];\r\n            }\r\n\r\n            if (ext !== null && !extensions.includes(ext)) {\r\n                extensions.push(ext);\r\n            }\r\n        }\r\n        extensions.sort();\r\n        collection.stac_extensions = extensions;\r\n\r\n        return collection;\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = MigrateCollections;","const Utils = require('../utils.js');\r\nconst Versions = require('../versions.js');\r\n\r\nclass MigrateCommons {\r\n\r\n\tstatic migrateLinks(links, version, fallbackRel = 'related') {\r\n\t\tif (!Array.isArray(links)) {\r\n\t\t\treturn [];\r\n\t\t}\r\n\r\n\t\treturn links\r\n\t\t\t.filter(link => Utils.isObject(link) && typeof link.href === 'string')\r\n\t\t\t.map(link => {\r\n\t\t\t\tif (typeof link.rel !== 'string') {\r\n\t\t\t\t\tlink.rel = fallbackRel;\r\n\t\t\t\t}\r\n\t\t\t\treturn link;\r\n\t\t\t});\r\n\t}\r\n\r\n\tstatic migrateDiscoveryParameters(parameters, version) {\r\n\t\tif (Versions.compare(version, \"1.0.0-rc.2\", \"<=\")) {\r\n\t\t\tfor(var name in parameters) {\r\n\t\t\t\tif (!Utils.isObject(parameters[name])) {\r\n\t\t\t\t\tdelete parameters[name];\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet type = parameters[name].type;\r\n\t\t\t\tif (typeof type === 'string') {\r\n\t\t\t\t\tparameters[name].type = [type, \"null\"];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet example = parameters[name].example;\r\n\t\t\t\tif (typeof example !== 'undefined') {\r\n\t\t\t\t\tparameters[name].examples = [example];\r\n\t\t\t\t\tdelete parameters[name].example;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn parameters;\r\n\t}\r\n\r\n}\r\n\r\nmodule.exports = MigrateCommons;","const Utils = require('../utils.js');\r\nconst Versions = require('../versions.js');\r\nconst MigrateCommons = require('./commons.js');\r\n\r\n/** Migrate processes related responses to the latest version. */\r\nclass MigrateProcesses {\r\n\r\n    /**\r\n     * Converts a `GET /process` response to the latest version.\r\n     * \r\n     * Always returns a deep copy of the input object.\r\n     * \r\n     * @param {object} response - The response to convert\r\n     * @param {string} version - Version number of the API, which the response conforms to\r\n     * @returns {object}\r\n     */\r\n    static convertProcessesToLatestSpec(response, version) {\r\n        if (Versions.compare(version, \"0.3.x\", \"<=\")) {\r\n            throw \"Migrating from API version 0.3.0 and older is not supported.\";\r\n        }\r\n\r\n        // Make sure we don't alter the original object\r\n        response = Utils.deepClone(response);\r\n\r\n        if (Array.isArray(response.processes)) {\r\n            response.processes = response.processes\r\n                .map(p => MigrateProcesses.convertProcessToLatestSpec(p, version))\r\n                .filter(p => typeof p.id === 'string');\r\n        }\r\n        else {\r\n            response.processes = [];\r\n        }\r\n\r\n        response.links = MigrateCommons.migrateLinks(response.links, version);\r\n\r\n        return response;\r\n    }\r\n\r\n    /**\r\n     * Converts a single process to the latest version.\r\n     * \r\n     * Always returns a deep copy of the input object.\r\n     * \r\n     * @param {object} process - The process to convert\r\n     * @param {string} version - Version number of the API, which the process conforms to\r\n     * @returns {object}\r\n     */\r\n    static convertProcessToLatestSpec(process, version) {\r\n        if (Versions.compare(version, \"0.3.x\", \"<=\")) {\r\n            throw \"Migrating from API version 0.3.0 and older is not supported.\";\r\n        }\r\n\r\n        // Make sure we don't alter the original object\r\n        process = Utils.deepClone(process);\r\n\r\n        // If process has no id => seems to be an invalid process => abort\r\n        if (typeof process.id !== 'string' || process.id.length === 0) {\r\n            return {};\r\n        }\r\n\r\n        // Convert the parameters from object to array\r\n        if (Versions.compare(version, \"0.4.x\", \"=\")) {\r\n            // Determine the parameter order\r\n            if (!Array.isArray(process.parameter_order) || process.parameter_order.length === 0) {\r\n                process.parameter_order = [];\r\n                for(let param in process.parameters) {\r\n                    process.parameter_order.push(param);\r\n                }\r\n            }\r\n    \r\n            // Upgrade parameters and convert from array to object\r\n            let params = [];\r\n            for(let name of process.parameter_order) {\r\n                // Add name \r\n                let obj = {name: name};\r\n                if (Utils.isObject(process.parameters[name])) {\r\n                    Object.assign(obj, process.parameters[name]);\r\n                }\r\n\r\n                // Migrate from required to optional\r\n                if (!obj.required) {\r\n                    obj.optional = true;\r\n                }\r\n                delete obj.required;\r\n\r\n                // Add to list of ordered params\r\n                params.push(obj);\r\n            }\r\n            delete process.parameter_order;\r\n            process.parameters = params;\r\n        }\r\n\r\n        // Set required field description if not a string\r\n        if (typeof process.description !== 'string') {\r\n            process.description = \"\";\r\n        }\r\n\r\n        // Update parameters\r\n        if (Array.isArray(process.parameters)) {\r\n            for (var i = process.parameters.length-1; i >= 0; i--) {\r\n                let param = process.parameters[i];\r\n                if (!Utils.isObject(param)) {\r\n                    process.parameters.splice(i, 1);\r\n                    continue;\r\n                }\r\n\r\n                // Set required field description if not a string\r\n                if (typeof param.description !== 'string') {\r\n                    param.description = \"\";\r\n                }\r\n\r\n                // Upgrade parameter schema\r\n                process.parameters[i] = upgradeSchema(param, version);\r\n            }\r\n        }\r\n        else {\r\n            process.parameters = [];\r\n        }\r\n\r\n        // Update return value\r\n        if (!Utils.isObject(process.returns)) {\r\n            process.returns = {};\r\n        }\r\n        process.returns = upgradeSchema(process.returns, version, false);\r\n\r\n        // Remove process graphs from examples (and ensure there are arguments given)\r\n        if (Array.isArray(process.examples)) {\r\n            process.examples = process.examples.filter(example => Utils.isObject(example) && Utils.isObject(example.arguments));\r\n        }\r\n\r\n        if (typeof process.links !== 'undefined') { // links not required, so only apply if defined anyway\r\n            process.links = MigrateCommons.migrateLinks(process.links, version);\r\n        }\r\n\r\n        // Update process graph -> nothing to do yet\r\n\r\n        return process;\r\n    }\r\n\r\n}\r\n    \r\nfunction upgradeSchema(obj, version, isParam = true) {\r\n    var schema = {};\r\n    if (obj.schema && typeof obj.schema === 'object') { // array or object?\r\n        schema = obj.schema;\r\n    }\r\n\r\n    if (Versions.compare(version, \"0.4.x\", \"=\")) {\r\n        // Remove anyOf/oneOf wrapper\r\n        for(let type of ['anyOf', 'oneOf']) {\r\n            if (Array.isArray(schema[type])) {\r\n                // Parameters only: Move default value to parameter-level\r\n                if (isParam && typeof schema.default !== 'undefined') {\r\n                    obj.default = schema.default;\r\n                }\r\n                // Move array one level up, removing anyOf and oneOf\r\n                schema = schema[type];\r\n                break;\r\n            }\r\n        }\r\n\r\n        let moveMediaType = (Versions.compare(version, \"0.4.x\") <= 0 && typeof obj.media_type !== 'undefined');\r\n        let schemas = Array.isArray(schema) ? schema : [schema];\r\n        for(let subSchema of schemas) {\r\n            // Rename format to subtype recursively\r\n            subSchema = renameFormat(subSchema);\r\n\r\n            // Parameters only: Move default value to parameter-level\r\n            if (isParam && typeof subSchema.default !== 'undefined') {\r\n                obj.default = subSchema.default;\r\n                delete subSchema.default;\r\n            }\r\n\r\n            // Replace media_type field with contentMediaType from JSON Schemas\r\n            if (moveMediaType) {\r\n                subSchema.contentMediaType = obj.media_type;\r\n            }\r\n        }\r\n\r\n        // Remove the media type\r\n        if (moveMediaType) {\r\n            delete obj.media_type;\r\n        }\r\n    }\r\n\r\n    // Clients SHOULD automatically set `optional` to `true`, if a default value is specified.\r\n    if (Versions.compare(version, \"0.4.x\", \">\")) {\r\n        if (typeof obj.default !== 'undefined') {\r\n            obj.optional = true;\r\n        }\r\n    }\r\n\r\n    obj.schema = schema;\r\n    return obj;\r\n}\r\n\r\nfunction renameFormat(schema) {\r\n    if (Utils.isObject(schema) && typeof schema.type !== 'undefined' && typeof schema.format === 'string') {\r\n        switch(schema.format) {\r\n            case 'url':\r\n                schema.format = 'uri';\r\n                break;\r\n            case 'proj-definition':\r\n                schema.deprecated = true;\r\n                break;\r\n            case 'callback':\r\n                schema.format = 'process-graph';\r\n                if (Utils.isObject(schema.parameters)) {\r\n                    let params = [];\r\n                    for(let name in schema.parameters) {\r\n                        let paramSchema = schema.parameters[name];\r\n                        let param = {\r\n                            name: name,\r\n                            description: typeof paramSchema.description === 'string' ? paramSchema.description : \"\",\r\n                            schema: paramSchema\r\n                        };\r\n                        params.push(param);\r\n                    }\r\n                    schema.parameters = params;\r\n                }\r\n                break;\r\n        }\r\n\r\n        schema.subtype = schema.format;\r\n        // Leave format for \"well-known\" formats defined in JSON Schema\r\n        if (!['date-time', 'time', 'date', 'uri'].includes(schema.format)) {\r\n            delete schema.format;\r\n        }\r\n    }\r\n    for(let i in schema) {\r\n        if (schema[i] && typeof schema[i] === 'object') {\r\n            schema[i] = renameFormat(schema[i]);\r\n        }\r\n    }\r\n    return schema;\r\n}\r\n\r\nmodule.exports = MigrateProcesses;","const Utils = require('./utils');\r\n\r\n/**\r\n * Wrapper class for a single data type definition in a schema (e.g. process parameter schema, return value schema).\r\n * \r\n * @class\r\n */\r\nclass ProcessDataType {\r\n\t\r\n\t/**\r\n\t * Constructs a new process data type based on JSON Schema.\r\n\t * \r\n\t * @param {object} schema\r\n\t * @param {?ProcessSchema} [parent=null]\r\n\t * @param {*} [defaultValue=undefined]\r\n\t */\r\n\tconstructor(schema, parent = null, defaultValue = undefined) {\r\n\t\tthis.schema = schema;\r\n\t\tif (typeof this.schema.default === 'undefined') {\r\n\t\t\tthis.schema.default = defaultValue;\r\n\t\t}\r\n\t\tthis.parent = parent;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts the schema to a JSON-serializable representation.\r\n\t * \r\n\t * @returns {object}\r\n\t */\r\n\ttoJSON() {\r\n\t\treturn Object.assign({}, this.schema, {default: this.default()});\r\n\t}\r\n\r\n\t/**\r\n\t * Checks whether the data type is only `null`.\r\n\t * \r\n\t * @returns {boolean}\r\n\t */\r\n\tisAny() {\r\n\t\treturn this.dataType() === 'any';\r\n\t}\r\n\r\n\t/**\r\n\t * Checks whether the data type is only `null`.\r\n\t * \r\n\t * @returns {boolean}\r\n\t */\r\n\tisNull() {\r\n\t\treturn this.schema.type === 'null';\r\n\t}\r\n\r\n\t/**\r\n\t * Checks whether the data type allows `null`.\r\n\t * \r\n\t * @returns {boolean}\r\n\t */\r\n\tnullable() {\r\n\t\treturn this.isNull() || this.isAny();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns whether the data type is editable.\r\n\t * \r\n\t * This means it returns `true`, unless certain data types are detected that\r\n\t * can't be transmitted via JSON in the openEO API (e.g. data cubes or labeled arrays).\r\n\t * \r\n\t * @returns {boolean}\r\n\t */\r\n\tisEditable() {\r\n\t\treturn !ProcessDataType.NON_EDITABLE.includes(this.dataType());\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the data type.\r\n\t * \r\n\t * The priority is as such:\r\n\t * - subtype\r\n\t * - native data type\r\n\t * - \"any\"\r\n\t * \r\n\t * @param {boolean} [native=false] - Set to true to only return the native data type.\r\n\t * @returns {string}\r\n\t */\r\n\tdataType(native = false) {\r\n\t\tlet nativeType = this.schema.type || \"any\";\r\n\t\treturn native ? nativeType : (this.schema.subtype || nativeType);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the native data type of the schema.\r\n\t * \r\n\t * One of: array, object, null, string, boolean, number or any\r\n\t * \r\n\t * @returns {string}\r\n\t */\r\n\tnativeDataType() {\r\n\t\treturn this.dataType(true);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks whether the data type contains an enumeration of values.\r\n\t * \r\n\t * @returns {boolean}\r\n\t * @see ProcessDataType#getEnumChoices\r\n\t */\r\n\tisEnum() {\r\n\t\treturn Array.isArray(this.schema.enum) && this.schema.enum.length > 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the allowed enumeration of values.\r\n\t * \r\n\t * @returns {array}\r\n\t * @see ProcessDataType#isEnum\r\n\t */\r\n\tgetEnumChoices() {\r\n\t\treturn this.isEnum() ? this.schema.enum : [];\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the parameters for a \"child process\" that is defined for the data type.\r\n\t * \r\n\t * @returns {array<object>}\r\n\t */\r\n\tgetCallbackParameters() {\r\n\t\tif (Array.isArray(this.schema.parameters)) { // For \"normal\" callbacks\r\n\t\t\treturn this.schema.parameters;\r\n\t\t}\r\n\t\telse if (Utils.isObject(this.schema.additionalProperties) && Array.isArray(this.schema.additionalProperties.parameters)) {\r\n\t\t\treturn this.schema.additionalProperties.parameters; // Used for metadata-filter\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn [];\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the group of the data type.\r\n\t * \r\n\t * Group is a \"extension\" of JSON Schema, which allows to group schemas by certain criteria.\r\n\t * \r\n\t * @returns {string}\r\n\t */\r\n\tgroup() {\r\n\t\treturn Utils.hasText(this.schema.group) ? this.schema.group : ProcessDataType.DEFAULT_GROUP;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the title of the data type.\r\n\t * \r\n\t * If no title is present, returns a \"prettified\" version of the data type\r\n\t * (e.g. \"Temporal Interval\" for the data type \"temporal-interval\").\r\n\t * \r\n\t * @returns {string}\r\n\t */\r\n\ttitle() {\r\n\t\tif (Utils.hasText(this.schema.title)) {\r\n\t\t\treturn this.schema.title;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn Utils.prettifyString(this.dataType());\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the description of the data type.\r\n\t * \r\n\t * @returns {string}\r\n\t */\r\n\tdescription() {\r\n\t\treturn Utils.hasText(this.schema.description) ? this.schema.description : \"\";\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the default value of the data type.\r\n\t * \r\n\t * This may return `undefined`.\r\n\t * \r\n\t * @returns {*}\r\n\t */\r\n\tdefault() {\r\n\t\tif (typeof this.schema.default === 'function') {\r\n\t\t\treturn this.schema.default();\r\n\t\t}\r\n\t\treturn this.schema.default;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * The name of the default group for schemas.\r\n * \r\n * Defaults to `Other`.\r\n * \r\n * @type {string}\r\n */\r\nProcessDataType.DEFAULT_GROUP = 'Other';\r\n/**\r\n * A list of data types that can't be edited.\r\n * \r\n * Non-editable data types can't be transmitted via JSON through the openEO API\r\n * (e.g. data cubes or labeled arrays).\r\n * \r\n * @type {array<string>}\r\n */\r\nProcessDataType.NON_EDITABLE = [\r\n\t'raster-cube',\r\n\t'vector-cube',\r\n\t'labeled-array'\r\n];\r\n\r\nmodule.exports = ProcessDataType;","const ProcessSchema = require('./processSchema');\r\n\r\n/**\r\n * Wrapper class for a process parameter.\r\n * \r\n * @class\r\n */\r\nclass ProcessParameter extends ProcessSchema {\r\n\r\n\t/**\r\n\t * Constructs a new process parameter based on the openEO API representation.\r\n\t * \r\n\t * @param {object} parameter \r\n\t */\r\n\tconstructor(parameter) {\r\n\t\tsuper(parameter.schema, parameter.default);\r\n\r\n\t\tObject.assign(this, parameter);\r\n\t}\r\n\r\n}\r\n\r\nmodule.exports = ProcessParameter;","const Utils = require('./utils');\r\n\r\n/**\r\n * Central registry for processes.\r\n * \r\n * @class\r\n */\r\nclass ProcessRegistry {\r\n\r\n\t/**\r\n\t * Creates a new registry of all processes.\r\n\t * \r\n\t * @param {Array.<object>|ProcessRegistry} [processes=[]] - Optionally, a list of predefined processes.\r\n\t * @param {boolean} [addNamespace=false] - Add a namespace property to processes if set to `true`.\r\n\t */\r\n\tconstructor(processes = [], addNamespace = false) {\r\n\t\t/**\r\n\t\t * List of listeners for change events.\r\n\t\t * @public\r\n\t\t */\r\n\t\tthis.listeners = [];\r\n\t\t/**\r\n\t\t * Object of namespaces and processes.\r\n\t\t * @protected\r\n\t\t * @type {object.<string,object.<string,object>>}\r\n\t\t */\r\n\t\tthis.processes = {};\r\n\t\t/**\r\n\t\t * Add a namespace property to processes if set to `true`.\r\n\t\t * @protected\r\n\t\t * @type {boolean}\r\n\t\t */\r\n\t\tthis.addNamespace = addNamespace;\r\n\r\n\t\t// Fill process list\r\n\t\tif (processes instanceof ProcessRegistry) {\r\n\t\t\tfor(let namespace in processes.processes) {\r\n\t\t\t\tthis.addAll(processes.processes[namespace]);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.addAll(processes);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Event that is fired on changes, notifies listeners.\r\n\t * \r\n\t * @param {string} event - One of 'add', 'addAll' or 'remove'.\r\n\t * @param {*} data \r\n\t * @param {string} namespace \r\n\t */\r\n\tonChange(event, data, namespace) {\r\n\t\tfor(let listener of this.listeners) {\r\n\t\t\tlistener(event, data, namespace);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a list of processes for a given namespace.\r\n\t * \r\n\t * Replaces an existing process in the given namespace if it exists.\r\n\t * \r\n\t * Fires 'addAll' event.\r\n\t * \r\n\t * @param {Array.<object>} processes Optionally, a list of processes\r\n\t * @param {string} [namespace=\"backend\"] The namespace for the processes (defaults to 'backend', i.e. pre-defined processes)\r\n\t */\r\n\taddAll(processes, namespace = 'backend') {\r\n\t\tfor(var i in processes) {\r\n\t\t\tthis.add(processes[i], namespace, false);\r\n\t\t}\r\n\t\tthis.onChange('addAll', processes, namespace);\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a single process to a given namespace.\r\n\t * \r\n\t * Replaces an existing process in the given namespace if it exists.\r\n\t * \r\n\t * Fires 'add' event.\r\n\t * \r\n\t * @param {object} processes A process definition\r\n\t * @param {string} [namespace=\"backend\"] The namespace for the process (defaults to 'backend', i.e. pre-defined processes)\r\n\t */\r\n\tadd(process, namespace = 'backend', fireEvent = true) {\r\n\t\tif (!Utils.isObject(process)) {\r\n\t\t\tthrow new Error(\"Invalid process; not an object.\");\r\n\t\t}\r\n\t\tif (typeof process.id !== 'string') {\r\n\t\t\tthrow new Error(\"Invalid process; no id specified.\");\r\n\t\t}\r\n\t\tif (typeof namespace !== 'string') {\r\n\t\t\tthrow new Error(\"Invalid namespace; not a string.\");\r\n\t\t}\r\n\r\n\t\tif (!this.processes[namespace]) {\r\n\t\t\tthis.processes[namespace] = {};\r\n\t\t}\r\n\t\tprocess = Object.assign(this.addNamespace ? {namespace} : {}, process);\r\n\t\tthis.processes[namespace][process.id] = process;\r\n\t\tif (fireEvent) {\r\n\t\t\tthis.onChange('add', process, namespace);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the count of all processes independant of the namespaces.\r\n\t * \r\n\t * @returns {number} \r\n\t */\r\n\tcount() {\r\n\t\treturn Utils.size(this.all());\r\n\t}\r\n\r\n\t/**\r\n\t * Returns all processes as a list, independant of the namespaces.\r\n\t * \r\n\t * @returns {Array.<object>} \r\n\t */\r\n\tall() {\r\n\t\tlet processes = [];\r\n\t\tfor(let ns in this.processes) {\r\n\t\t\tprocesses = processes.concat(Object.values(this.processes[ns]));\r\n\t\t}\r\n\t\treturn processes;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks whether a namespace exists (i.e. at least one process for the namespace exists)\r\n\t * \r\n\t * @param {string} namespace The namespace\r\n\t * @returns {boolean}\r\n\t */\r\n\thasNamespace(namespace) {\r\n\t\tif(typeof namespace !== 'string') {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn Boolean(this.processes[namespace]);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a (sorted) list of all available namespaces.\r\n\t * \r\n\t * @returns {Array.<string>} \r\n\t */\r\n\tnamespaces() {\r\n\t\treturn Object.keys(this.processes).sort();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns all processes from a specific namespace.\r\n\t * \r\n\t * Returns an empty list if the namespace is not defined.\r\n\t * \r\n\t * @param {string} namespace The namespace of the processes to return (e.g. 'backend' for pre-defined processes)\r\n\t * @returns {Array.<object>} \r\n\t */\r\n\tnamespace(namespace) {\r\n\t\tif(typeof namespace !== 'string') {\r\n\t\t\treturn [];\r\n\t\t}\r\n\t\tlet processes = this.processes[namespace];\r\n\t\treturn processes ? Object.values(processes) : [];\r\n\t}\r\n\r\n\t/**\r\n\t * Checks whether a process with the given ID exists in the given namespace.\r\n\t * \r\n\t * If the namespace is set to `null` (default) then it checks both user processes and backend processes.\r\n\t * The default namespace for pre-defined processes is `backend`.\r\n\t * \r\n\t * @param {string} id The process identifier\r\n\t * @param {?string} [namespace=null] The namespace of the process\r\n\t * @returns {boolean} \r\n\t */\r\n\thas(id, namespace = null) {\r\n\t\treturn Boolean(this.get(id, namespace));\r\n\t}\r\n\t\r\n\t/**\r\n\t * Retrieve the process with the given ID fron the given namespace.\r\n\t * \r\n\t * If the namespace is set to `null` (default) then it retrieces from both (1) `user` processes and (2) `backend` processes\r\n\t * with preference to user processes on conflict. The default namespace for pre-defined processes is `backend`.\r\n\t * \r\n\t * @param {string} id The process identifier\r\n\t * @param {?string} [namespace=null] The namespace of the process\r\n\t * @returns {object} \r\n\t */\r\n\tget(id, namespace = null) {\r\n\t\tif (typeof id !== 'string') {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\t// If no namespace is set, prefer the user namespace over backend namespace\r\n\t\tif (namespace === null) {\r\n\t\t\treturn this.get(id, 'user') || this.get(id, 'backend');\r\n\t\t}\r\n\r\n\t\tif (this.processes[namespace]) {\r\n\t\t\treturn this.processes[namespace][id] || null;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t * Removes a single process or a complete namespace from the registry.\r\n\t * \r\n\t * If nothing is given, removes the namespace 'user'.\r\n\t * If only a namespace is given, removes the whole namespace.\r\n\t * If only a process is given, removes a process from the namespace `user`.\r\n\t * If both parameters are given, removes a process from the given namespace.\r\n\t * \r\n\t * Returns `true` on succes, `false` on failure.\r\n\t * \r\n\t * Fires 'remove' event.\r\n\t * \r\n\t * @param {?string} [id=null] The process identifier\r\n\t * @param {?string} [namespace=\"user\"] The namespace, defaults to `user`\r\n\t * @returns {boolean}\r\n\t */\r\n\tremove(id = null, namespace = 'user') {\r\n\t\tif (typeof namespace !== 'string') {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (this.processes[namespace]) {\r\n\t\t\tif (typeof id === 'string') {\r\n\t\t\t\tif (this.processes[namespace][id]) {\r\n\t\t\t\t\tlet process = this.processes[namespace][id];\r\n\t\t\t\t\tdelete this.processes[namespace][id];\r\n\t\t\t\t\tif (Utils.size(this.processes[namespace]) === 0) {\r\n\t\t\t\t\t\tdelete this.processes[namespace];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.onChange('remove', process, namespace);\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdelete this.processes[namespace];\r\n\t\t\t\tthis.onChange('remove', null, namespace);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n}\r\n\r\nmodule.exports = ProcessRegistry;","const ProcessUtils = require('./processUtils');\r\nconst ProcessDataType = require('./processDataType');\r\nconst Utils = require('./utils');\r\n\r\n/**\r\n * Wrapper class for the process schemas (i.e. from parameters or return value).\r\n * \r\n * @class\r\n */\r\nclass ProcessSchema {\r\n\t\r\n\t/**\r\n\t * Constructs a new process schema based on the openEO API representation.\r\n\t * \r\n\t * Can be array or JSON Schema object. The array consists of multiple JSON Schemas then.\r\n\t * \r\n\t * @param {?object|array} [schema=null]\r\n\t * @param {*} [defaultValue=undefined]\r\n\t */\r\n\tconstructor(schema = null, defaultValue = undefined) {\r\n\t\tif (!Utils.isObject(schema) && !Array.isArray(schema)) {\r\n\t\t\tthis.unspecified = true;\r\n\t\t\tthis.schemas = [];\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.unspecified = false;\r\n\t\t\tthis.schemas = ProcessUtils.normalizeJsonSchema(schema, true).map(s => new ProcessDataType(s, this, defaultValue));\r\n\r\n\t\t\t// Find and assign the default value from sub-schemas if no defaultValue was given\r\n\t\t\tif (typeof defaultValue === 'undefined') {\r\n\t\t\t\tlet defaults = this.schemas\r\n\t\t\t\t\t.map(s => s.default())\r\n\t\t\t\t\t.filter(d => typeof d !== 'undefined');\r\n\t\t\t\tthis.default = defaults[0];\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.default = defaultValue;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.refs = [];\r\n\t}\r\n\r\n\t/**\r\n\t * Converts the schemas to a JSON-serializable representation.\r\n\t * \r\n\t * @returns {object}\r\n\t */\r\n\ttoJSON() {\r\n\t\treturn this.schemas.map(s => s.toJSON());\r\n\t}\r\n\r\n\t/**\r\n\t * Returns whether the schema is editable.\r\n\t * \r\n\t * This means it returns `true`, unless certain data types are detected that\r\n\t * can't be transmitted via JSON in the openEO API (e.g. data cubes or labeled arrays).\r\n\t * \r\n\t * @returns {boolean}\r\n\t */\r\n\tisEditable() {\r\n\t\treturn (this.unspecified || this.schemas.filter(s => s.isEditable() && !s.isNull()).length > 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks whether the schema is exactly and only of the given data type.\r\n\t * \r\n\t * Can be a native type or a openEO \"subtype\".\r\n\t * \r\n\t * @param {string} type \r\n\t * @returns {boolean}\r\n\t */\r\n\tis(type) {\r\n\t\tvar types = this.dataTypes();\r\n\t\treturn (types.length === 1 && types[0] === type);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the native data type of the schema.\r\n\t * \r\n\t * One of: array, object, null, string, boolean, number\r\n\t * \r\n\t * @returns {string}\r\n\t */\r\n\tnativeDataType() {\r\n\t\treturn this.dataType(true);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the data type of the associated schemas.\r\n\t * \r\n\t * Setting `native` to `true` will only consider native JSON data types and \"any\".\r\n\t * Otherwise, subtypes will also be considered.\r\n\t * \r\n\t * If the schema has a two data types and one of them is `null`, \r\n\t * `null` is ignored and just the other data type is returned.\r\n\t * \r\n\t * `nullable()` can be used to check whether a schema allows `null`.\r\n\t * \r\n\t * Returns `mixed` if multiple data types are allowed.\r\n\t * \r\n\t * @param {boolean} [native=false]\r\n\t * @returns {string}\r\n\t * @see ProcessSchema#nullable\r\n\t */\r\n\tdataType(native = false) {\r\n\t\tvar types = this.dataTypes(true, native);\r\n\t\tvar nullIndex = types.indexOf('null');\r\n\t\tif (types.length === 1) {\r\n\t\t\treturn types[0];\r\n\t\t}\r\n\t\telse if (types.length === 2 && nullIndex !== -1) {\r\n\t\t\treturn types[nullIndex === 0 ? 1 : 0];\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn 'mixed';\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a set of all supported distinct data types (or 'any').\r\n\t * \r\n\t * By default, `null` is not included in the list of data types.\r\n\t * Setting `includeNull` to `true` to include `null` in the list.\r\n\t * \r\n\t * Setting `native` to `true` will only consider native JSON data types and \"any\".\r\n\t * Otherwise, subtypes will also be considered.\r\n\t * \r\n\t * @param {boolean} [includeNull=false]\r\n\t * @param {boolean} [native=false]\r\n\t * @returns {array<string>}\r\n\t */\r\n\tdataTypes(includeNull = false, native = false) {\r\n\t\tvar types = this.schemas\r\n\t\t\t.map(s => s.dataType(native))\r\n\t\t\t.filter((v, i, a) => a.indexOf(v) === i); // Return each type only once\r\n\t\tif (types.length === 0 || types.includes('any')) {\r\n\t\t\treturn ['any'];\r\n\t\t}\r\n\t\treturn includeNull ? types : types.filter(s => s !== 'null');\r\n\t}\r\n\r\n\t/**\r\n\t * Checks whether one of the schemas allows the value to be `null`.\r\n\t * \r\n\t * @returns {boolean}\r\n\t */\r\n\tnullable() {\r\n\t\treturn (this.unspecified || this.schemas.filter(s => s.nullable()).length > 0);\r\n\t}\r\n\r\n}\r\n\r\nmodule.exports = ProcessSchema;","const Utils = require('./utils');\r\n\r\n/**\r\n * Utilities to parse process specs and JSON schemas.\r\n * \r\n * @class\r\n */\r\nclass ProcessUtils {\r\n\r\n\t/**\r\n\t * From a \"complex\" JSON Schema with allOf/anyOf/oneOf, make separate schemas.\r\n\t * \r\n\t * So afterwards each schema has it's own array entry.\r\n\t * It merges allOf, resolves anyOf/oneOf into separate schemas.\r\n\t * May also split the JSON Schema type arrays into separate entries by setting `splitTypes` to `true`.\r\n\t * \r\n\t * @param {object|array} schemas - The JSON Schema(s) to convert\r\n\t * @returns {array}\r\n\t */\r\n\tstatic normalizeJsonSchema(schemas, splitTypes = false) {\r\n\t\t// Make schemas always an array\r\n\t\tif (Utils.isObject(schemas)) {\r\n\t\t\tschemas = [schemas];\r\n\t\t}\r\n\t\telse if (Array.isArray(schemas)) {\r\n\t\t\tschemas = schemas;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tschemas = [];\r\n\t\t}\r\n\r\n\t\t// Merge allOf, resolve anyOf/oneOf into separate schemas\r\n\t\tlet normalized = [];\r\n\t\tfor(let schema of schemas) {\r\n\t\t\tif (Array.isArray(schema.allOf)) {\r\n\t\t\t\tnormalized.push(Object.assign({}, ...schema.allOf));\r\n\t\t\t}\r\n\t\t\telse if (Array.isArray(schema.oneOf) || Array.isArray(schema.anyOf)) {\r\n\t\t\t\tlet copy = Utils.omitFromObject(schema, ['oneOf', 'anyOf']);\r\n\t\t\t\tlet subSchemas = schema.oneOf || schema.anyOf;\r\n\t\t\t\tfor(let subSchema of subSchemas) {\r\n\t\t\t\t\tnormalized.push(Object.assign({}, copy, subSchema));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tnormalized.push(schema);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!splitTypes) {\r\n\t\t\treturn normalized;\r\n\t\t}\r\n\r\n\t\t// Split type field into separate schemas\r\n\t\tschemas = [];\r\n\t\tfor(let schema of normalized) {\r\n\t\t\tif (Array.isArray(schema.type)) {\r\n\t\t\t\t/* jshint ignore:start */\r\n\t\t\t\tschemas = schemas.concat(schema.type.map(type => Object.assign({}, schema, {type: type})));\r\n\t\t\t\t/* jshint ignore:end */\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tschemas.push(schema);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn schemas;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the callback parameters for a given process parameter.\r\n\t * \r\n\t * @param {object} processParameter - The process parameter spec to parse.\r\n\t * @returns {array}\r\n\t * @throws {Error}\r\n\t */\r\n\tstatic getCallbackParameters(processParameter, keyPath = []) {\r\n\t\tif (!Utils.isObject(processParameter) || !processParameter.schema) {\r\n\t\t\treturn [];\r\n\t\t}\r\n\r\n\t\tlet schemas = ProcessUtils.normalizeJsonSchema(processParameter.schema);\r\n\t\tlet key;\r\n\t\twhile(key = keyPath.shift()) { // jshint ignore:line\r\n\t\t\tschemas = schemas.map(schema => ProcessUtils.normalizeJsonSchema(ProcessUtils.getElementJsonSchema(schema, key))); // jshint ignore:line\r\n\t\t\tschemas = schemas.concat(...schemas);\r\n\t\t}\r\n\r\n\r\n\t\tlet cbParams = [];\r\n\t\tfor(let schema of schemas) {\r\n\t\t\tlet params = null;\r\n\t\t\tif (Array.isArray(schema.parameters)) { // For \"normal\" callbacks\r\n\t\t\t\tparams = schema.parameters;\r\n\t\t\t}\r\n\t\t\telse if (Utils.isObject(schema.additionalProperties) && Array.isArray(schema.additionalProperties.parameters)) {\r\n\t\t\t\tparams = schema.additionalProperties.parameters; // Used for metadata-filter\r\n\t\t\t}\r\n\t\t\tif (Array.isArray(params)) {\r\n\t\t\t\tif (cbParams.length > 0 && !Utils.equals(cbParams, params)) {\r\n\t\t\t\t\tthrow new Error(\"Multiple schemas with different callback parameters found.\");\r\n\t\t\t\t}\r\n\t\t\t\tcbParams = params;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn cbParams;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the callback parameters for a given process parameter from a full process spec.\r\n\t * \r\n\t * @param {object} process - The process to parse.\r\n\t * @param {string} parameterName - The name of the parameter to get the callback parameters for.\r\n\t * @returns {array}\r\n\t * @throws {Error}\r\n\t */\r\n\tstatic getCallbackParametersForProcess(process, parameterName, path = []) {\r\n\t\tif (!Utils.isObject(process) || !Array.isArray(process.parameters)) {\r\n\t\t\treturn [];\r\n\t\t}\r\n\r\n\t\tlet param = process.parameters.find(p => p.name === parameterName);\r\n\t\treturn ProcessUtils.getCallbackParameters(param, path);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns *all* the native JSON data types allowed for the schema.\r\n\t * \r\n\t * @param {object} schema \r\n\t * @param {boolean} anyIsEmpty\r\n\t * @returns {array}\r\n\t */\r\n\tstatic getNativeTypesForJsonSchema(schema, anyIsEmpty = false) {\r\n\t\tif (Utils.isObject(schema) && Array.isArray(schema.type)) {\r\n\t\t\t// Remove duplicate and invalid types\r\n\t\t\tlet validTypes = Utils.unique(schema.type).filter(type => ProcessUtils.JSON_SCHEMA_TYPES.includes(type));\r\n\t\t\tif (validTypes.length > 0 && validTypes.length < ProcessUtils.JSON_SCHEMA_TYPES.length) {\r\n\t\t\t\treturn validTypes;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn anyIsEmpty ? [] : ProcessUtils.JSON_SCHEMA_TYPES;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (Utils.isObject(schema) && typeof schema.type === 'string' && ProcessUtils.JSON_SCHEMA_TYPES.includes(schema.type)) {\r\n\t\t\treturn [schema.type];\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn anyIsEmpty ? [] : ProcessUtils.JSON_SCHEMA_TYPES;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the schema for a property of an object or an element of an array.\r\n\t * \r\n\t * If you want to retrieve the schema for a specific key, use the parameter `key`.\r\n\t * \r\n\t * @param {object} schema - The JSON schema to parse.\r\n\t * @param {string|integer|null} key - If you want to retrieve the schema for a specific key, otherwise null.\r\n\t * @returns {object} - JSON Schema\r\n\t */\r\n\tstatic getElementJsonSchema(schema, key = null) {\r\n\t\tlet types = ProcessUtils.getNativeTypesForJsonSchema(schema);\r\n\t\tif (Utils.isObject(schema) && types.includes('array') && typeof key !== 'string') {\r\n\t\t\tif (Utils.isObject(schema.items)) {\r\n\t\t\t\t// Array with one schema for all items: https://json-schema.org/understanding-json-schema/reference/array.html#id5\r\n\t\t\t\treturn schema.items;\r\n\t\t\t}\r\n\t\t\telse if (Array.isArray(schema.items)) {\r\n\t\t\t\t// Tuple validation: https://json-schema.org/understanding-json-schema/reference/array.html#id6\r\n\t\t\t\tif (key !== null && Utils.isObject(schema.items[key])) {\r\n\t\t\t\t\treturn schema.items[key];\r\n\t\t\t\t}\r\n\t\t\t\telse if (Utils.isObject(schema.additionalItems)) {\r\n\t\t\t\t\treturn schema.additionalItems;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (Utils.isObject(schema) && types.includes('object')) {\r\n\t\t\tif (key !== null && Utils.isObject(schema.properties) && Utils.isObject(schema.properties[key])) {\r\n\t\t\t\treturn schema.properties[key];\r\n\t\t\t}\r\n\t\t\telse if (Utils.isObject(schema.additionalProperties)) {\r\n\t\t\t\treturn schema.additionalProperties;\r\n\t\t\t}\r\n\t\t\t// ToDo: No support for patternProperties yet\r\n\t\t}\r\n\r\n\t\treturn {};\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * A list of all allowed JSON Schema type values.\r\n * \r\n * @type {array}\r\n */\r\nProcessUtils.JSON_SCHEMA_TYPES = ['string', 'number', 'integer', 'boolean', 'array', 'object', 'null'];\r\n\r\nmodule.exports = ProcessUtils;","var equal = require('fast-deep-equal/es6');\r\n\r\n/**\r\n * General utilities\r\n * \r\n * @class\r\n */\r\nclass Utils {\r\n\r\n\t/**\r\n\t * Checks whether a variable is a real object or not.\r\n\t * \r\n\t * This is a more strict version of `typeof x === 'object'` as this example would also succeeds for arrays and `null`.\r\n\t * This function only returns `true` for real objects and not for arrays, `null` or any other data types.\r\n\t * \r\n\t * @param {*} obj - A variable to check.\r\n\t * @returns {boolean} - `true` is the given variable is an object, `false` otherwise.\r\n\t */\r\n\tstatic isObject(obj) {\r\n\t\treturn (typeof obj === 'object' && obj === Object(obj) && !Array.isArray(obj));\r\n\t}\r\n\r\n\t/**\r\n\t * Checks whether a variable is a string and contains at least one character.\r\n\t * \r\n\t * @param {*} string - A variable to check.\r\n\t * @returns {boolean} - `true` is the given variable is an string with length > 0, `false` otherwise.\r\n\t */\r\n\tstatic hasText(string) {\r\n\t\treturn (typeof string === 'string' && string.length > 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Performs a deep comparison between two values to determine if they are equivalent.\r\n\t * \r\n\t * @param {*} x - The value to compare.\r\n\t * @param {*} y - The other value to compare.\r\n\t * @returns {boolean} - Returns true if the values are equivalent, else false.\r\n\t */\r\n\tstatic equals(x, y) {\r\n\t\treturn equal(x, y);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates an object composed of the picked object properties.\r\n\t * \r\n\t * Returns a shallow copy!\r\n\t * \r\n\t * @param {object} obj - The source object.\r\n\t * @param {string|array} toPick - The properties to pick.\r\n\t * @returns {object}\r\n\t */\r\n\tstatic pickFromObject(obj, toPick) {\r\n\t\tobj = Object(obj);\r\n\t\tif (typeof toPick === 'string') {\r\n\t\t\ttoPick = [toPick];\r\n\t\t}\r\n\t\tconst copy = {};\r\n\t\ttoPick.forEach(key => copy[key] = obj[key]);\r\n\t\treturn copy;\r\n\t}\r\n\r\n\t/**\r\n\t * This method creates an object composed of the own and inherited enumerable property paths of object that are not omitted.\r\n\t * \r\n\t * Returns a shallow copy!\r\n\t * \r\n\t * @param {object} obj - The source object.\r\n\t * @param {string|array} toOmit - The properties to omit.\r\n\t * @returns {object}\r\n\t */\r\n\tstatic omitFromObject(obj, toOmit) {\r\n\t\tobj = Object(obj);\r\n\t\tif (typeof toOmit === 'string') {\r\n\t\t\ttoOmit = [toOmit];\r\n\t\t}\r\n\t\tvar copy = Object.assign({}, obj);\r\n\t\tfor(let key of toOmit) {\r\n\t\t\tdelete copy[key];\r\n\t\t}\r\n\t\treturn copy;\r\n\t}\r\n\r\n\t/**\r\n\t *  Creates an array of values by running each property of `object` thru function.\r\n\t * \r\n\t * The function is invoked with three arguments: (value, key, object).\r\n\t * \r\n\t * @param {object} obj \r\n\t * @param {function} func \r\n\t * @returns {object}\r\n\t */\r\n\tstatic mapObject(obj, func) {\r\n\t\t// Taken from lodash, see https://github.com/lodash/lodash/blob/master/mapObject.js\r\n\t\tconst props = Object.keys(obj);\r\n\t\tconst result = new Array(props.length);\r\n\t\tprops.forEach((key, index) => {\r\n\t\t\tresult[index] = func(obj[key], key, obj);\r\n\t\t});\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates an object with the same keys as object and values generated by running each own enumerable string keyed property of object thru the function.\r\n\t * \r\n\t * The function is invoked with three arguments: (value, key, object).\r\n\t * \r\n\t * @param {object} obj \r\n\t * @param {function} func \r\n\t * @returns {object}\r\n\t */\r\n\tstatic mapObjectValues(obj, func) {\r\n\t\t// Taken from lodash, see https://github.com/lodash/lodash/blob/master/mapValue.js\r\n\t\tobj = Object(obj);\r\n\t\tconst result = {};\r\n\t\tObject.keys(obj).forEach((key) => {\r\n\t\t\tresult[key] = func(obj[key], key, obj);\r\n\t\t});\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a duplicate-free version of an array.\r\n\t * \r\n\t * If useEquals is set to true, uses the `Utils.equals` function for comparison instead of \r\n\t * the JS === operator. Thus, if the array contains objects, you likely want to set \r\n\t * `useEquals` to `true`.\r\n\t * \r\n\t * @param {array} array\r\n\t * @param {boolean} useEquals\r\n\t * @returns {array}\r\n\t */\r\n\tstatic unique(array, useEquals = false) {\r\n\t\tif (useEquals) {\r\n\t\t\treturn array.filter((s1, pos, arr) => arr.findIndex(s2 => Utils.equals(s1, s2)) === pos);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn [...new Set(array)];\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Computes the size of an array (number of array elements) or object (number of key-value-pairs).\r\n\t * \r\n\t * Returns 0 for all other data types.\r\n\t * \r\n\t * @param {*} obj \r\n\t * @returns {integer}\r\n\t */\r\n\tstatic size(obj) {\r\n\t\tif (typeof obj === 'object' && obj !== null) {\r\n\t\t\tif (Array.isArray(obj)) {\r\n\t\t\t\treturn obj.length;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn Object.keys(obj).length;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks whether a variable is numeric.\r\n\t * \r\n\t * Numeric is every string with numeric data or a number, excluding NaN and finite numbers.\r\n\t * \r\n\t * @param {*} n - A variable to check.\r\n\t * @returns {boolean} - `true` is the given variable is numeric, `false` otherwise.\r\n\t */\r\n\tstatic isNumeric(n) {\r\n\t\treturn !isNaN(parseFloat(n)) && isFinite(n);\r\n    }\r\n    \r\n    /**\r\n     * Deep clone for JSON-compatible data.\r\n     * \r\n     * @param {*} x - The data to clone.\r\n     * @returns {*} - The cloned data.\r\n     */\r\n    static deepClone(x) {\r\n\t\treturn JSON.parse(JSON.stringify(x));\r\n    }\r\n\r\n\t/**\r\n\t * Normalize a URL (mostly handling leading and trailing slashes).\r\n\t * \r\n\t * @static\r\n\t * @param {string} baseUrl - The URL to normalize\r\n\t * @param {string} path - An optional path to add to the URL\r\n\t * @returns {string} Normalized URL.\r\n\t */\r\n\tstatic normalizeUrl(baseUrl, path = null) {\r\n\t\tlet url = baseUrl.replace(/\\/$/, \"\"); // Remove trailing slash from base URL\r\n\t\tif (typeof path === 'string') {\r\n\t\t\tif (path.substr(0, 1) !== '/') {\r\n\t\t\t\tpath = '/' + path; // Add leading slash to path\r\n\t\t\t}\r\n\t\t\turl = url + path.replace(/\\/$/, \"\"); // Remove trailing slash from path\r\n\t\t}\r\n\t\treturn url;\r\n\t}\r\n\r\n\t/**\r\n\t * Replaces placeholders in this format: `{var}`.\r\n\t * \r\n\t * This can be used for the placeholders/variables in the openEO API's errors.json file.\r\n\t * \r\n\t * @param {string} message - The string to replace the placeholders in.\r\n\t * @param {object} variables - A map with the placeholder names as keys and the replacement value as value.\r\n\t */\r\n\tstatic replacePlaceholders(message, variables = {}) {\r\n\t\tif (typeof message === 'string' && Utils.isObject(variables)) {\r\n\t\t\tfor(var placeholder in variables) {\r\n\t\t\t\tlet vars = variables[placeholder];\r\n\t\t\t\tmessage = message.replace('{' + placeholder + '}', Array.isArray(vars) ? vars.join(\"; \") : vars);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn message;\r\n\t}\r\n\r\n\t/**\r\n\t * Compares two strings case-insensitive, including natural ordering for numbers.\r\n\t * \r\n\t * @param {string} a \r\n\t * @param {string} b \r\n\t * @returns {integer} Numeric value compatible with the [Array.sort(fn) interface](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#Parameters).\r\n\t */\r\n    static compareStringCaseInsensitive(a, b) {\r\n        if (typeof a !== 'string') {\r\n            a = String(a);\r\n        }\r\n        if (typeof b !== 'string') {\r\n            b = String(b);\r\n        }\r\n        return a.localeCompare(b, undefined, {numeric: true, sensitivity: 'base'});\r\n    }\r\n\r\n\t/**\r\n\t * Tries to make a string more readable by capitalizing it.\r\n\t * Only applies to words with more than two characters.\r\n\t * \r\n\t * Supports converting from:\r\n\t * - Snake Case (abc_def => Abc Def)\r\n\t * - Kebab Case (abc-def => Abc Def)\r\n\t * - Camel Case (abcDef => Abc Def)\r\n\t * \r\n\t * Doesn't capitalize if the words are not in any of the casing formats above.\r\n\t * \r\n\t * @param {*} strings - String(s) to make readable\r\n\t * @param {string} arraySep - String to separate array elements with\r\n\t * @returns {string}\r\n\t */\r\n    static prettifyString(strings, arraySep = '; ') {\r\n\t\tif (!Array.isArray(strings)) {\r\n\t\t\tstrings = [String(strings)];\r\n\t\t}\r\n\t\tstrings = strings.map(str => {\r\n\t\t\tif (str.length >= 3) {\r\n\t\t\t\tconst replacer = (_,a,b) => a + ' ' + b.toUpperCase();\r\n\t\t\t\tif (str.includes('_')) {\r\n\t\t\t\t\t// Snake case converter\r\n\t\t\t\t\tstr = str.replace(/([a-zA-Z\\d])_([a-zA-Z\\d])/g, replacer);\r\n\t\t\t\t}\r\n\t\t\t\telse if (str.includes('-')) {\r\n\t\t\t\t\t// Kebab case converter\r\n\t\t\t\t\tstr = str.replace(/([a-zA-Z\\d])-([a-zA-Z\\d])/g, replacer);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// Camelcase converter\r\n\t\t\t\t\tstr = str.replace(/([a-z])([A-Z])/g, replacer);\r\n\t\t\t\t}\r\n\t\t\t\t// Uppercase the first letter in the first word, too.\r\n\t\t\t\treturn str.charAt(0).toUpperCase() + str.substr(1);\r\n\t\t\t}\r\n\t\t\treturn str;\r\n\t\t});\r\n\t\treturn strings.join(arraySep);\t\r\n    }\r\n\r\n\t/**\r\n\t * Makes link lists from the openEO API more user-friendly.\r\n\t * \r\n\t * Supports:\r\n\t * - Set a reasonable title, if not available. Make title more readable.\r\n\t * - Sorting by title (see `sort` parameter)\r\n\t * - Removing given relation types (`rel` property, see `ignoreRel` parameter)\r\n\t * \r\n\t * @param {array} linkList - List of links\r\n\t * @param {boolean} sort - Enable/Disable sorting by title. Enabled (true) by default.\r\n\t * @param {array} ignoreRel - A list of rel types to remove. By default, removes the self links (rel type = `self`).\r\n\t * @returns {array}\r\n\t */\r\n    static friendlyLinks(linkList, sort = true, ignoreRel = ['self']) {\r\n        let links = [];\r\n        if (!Array.isArray(linkList)) {\r\n            return links;\r\n        }\r\n\r\n        for(let link of linkList) {\r\n            link = Object.assign({}, link); // Make sure to work on a copy\r\n            if (typeof link.rel === 'string' && ignoreRel.includes(link.rel.toLowerCase())) {\r\n                continue;\r\n            }\r\n            if (typeof link.title !== 'string' || link.title.length === 0) {\r\n                if (typeof link.rel === 'string' && link.rel.length > 1) {\r\n                    link.title = Utils.prettifyString(link.rel);\r\n                }\r\n                else {\r\n                    link.title = link.href.replace(/^https?:\\/\\/(www.)?/i, '').replace(/\\/$/i, '');\r\n                }\r\n            }\r\n            links.push(link);\r\n        }\r\n        if (sort) {\r\n            links.sort((a, b) => Utils.compareStringCaseInsensitive(a.title, b.title));\r\n        }\r\n        return links;\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = Utils;","const VersionCompare = require('compare-versions');\r\n\r\n/** Version Number related methods */\r\nclass Versions {\r\n\r\n  /**\r\n   * Compare [semver](https://semver.org/) version strings.\r\n   * \r\n   * @param {string} firstVersion First version to compare\r\n   * @param {string} secondVersion Second version to compare\r\n   * @param {string|null} operator Optional; Arithmetic operator to use (>, >=, =, <=, <, !=). Defaults to `null`.\r\n   * @returns {boolean|integer} If operator is not `null`: true` if the comparison between the firstVersion and the secondVersion satisfies the operator, `false` otherwise. If operator is `null`: Numeric value compatible with the [Array.sort(fn) interface](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#Parameters).\r\n   * ```\r\n   */\r\n    static compare(v1, v2, operator = null) {\r\n\t\tif (operator !== null) {\r\n\t\t\treturn VersionCompare.compare(v1, v2, operator);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn VersionCompare(v1, v2);\r\n\t\t}\r\n\t}\r\n\r\n  /**\r\n   * Validate [semver](https://semver.org/) version strings.\r\n   * \r\n   * @param {*} version - Version number to validate\r\n   * @returns - `true` if the version number is a valid semver version number, `false` otherwise.\r\n   */\r\n\tstatic validate(version) {\r\n\t\treturn VersionCompare.validate(version);\r\n\t}\r\n\r\n\t/**\r\n\t * Tries to determine the most suitable version from a well-known discovery document that software is compatible to.\r\n\t * \r\n\t * @static\r\n\t * @param {array} wkVersions - A well-known discovery document compliant to the API specification.\r\n\t * @param {boolean} preferProduction - Set to `false` to make no difference between production and non-production versions.\r\n\t * @param {string|null} minVersion - The minimum version that should be returned.\r\n\t * @param {string|null} maxVersion - The maximum version that should be returned.\r\n\t * @returns {object[]} - Gives a list that lists all compatible versions (as still API compliant objects) ordered from the most suitable to the least suitable.\r\n\t */\r\n\tstatic findCompatible(wkVersions, preferProduction = true, minVersion = null, maxVersion = null) {\r\n\t\tif (!Array.isArray(wkVersions) || wkVersions.length === 0) {\r\n\t\t\treturn [];\r\n\t\t}\r\n\r\n\t\tlet compatible = wkVersions.filter(c => {\r\n\t\t\tif (typeof c.url === 'string' && Versions.validate(c.api_version)) {\r\n\t\t\t\tlet hasMinVer = Versions.validate(minVersion);\r\n\t\t\t\tlet hasMaxVer = Versions.validate(maxVersion);\r\n\t\t\t\tif (hasMinVer && hasMaxVer) {\r\n\t\t\t\t\treturn Versions.compare(c.api_version, minVersion, \">=\") && Versions.compare(c.api_version, maxVersion, \"<=\");\r\n\t\t\t\t}\r\n\t\t\t\telse if (hasMinVer) {\r\n\t\t\t\t\treturn Versions.compare(c.api_version, minVersion, \">=\");\r\n\t\t\t\t}\r\n\t\t\t\telse if (hasMaxVer) {\r\n\t\t\t\t\treturn Versions.compare(c.api_version, maxVersion, \"<=\");\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t });\r\n\t\tif (compatible.length === 0) {\r\n\t\t\treturn [];\r\n\t\t}\r\n\r\n\t\treturn compatible.sort((c1, c2) => {\r\n\t\t\tlet p1 = c1.production === true;\r\n\t\t\tlet p2 = c2.production === true;\r\n\t\t\tif (!preferProduction || p1 === p2) {\r\n\t\t\t\treturn Versions.compare(c1.api_version, c2.api_version) * -1; // `* -1` to sort in descending order.\r\n\t\t\t}\r\n\t\t\telse if (p1) {\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Find the latest version from well-known discovery that applies to the specified rules.\r\n\t * \r\n\t * This is basically the same as calling `findCompatible` and using the first element from the result.\r\n\t * \r\n\t * @param {array} wkVersions - A well-known discovery document compliant to the API specification.\r\n\t * @param {boolean} preferProduction - Set to `false` to make no difference between production and non-production versions.\r\n\t * @param {string|null} minVersion - The minimum version that should be returned.\r\n\t * @param {string|null} maxVersion - The maximum version that should be returned.\r\n\t * @returns {object|null}\r\n\t */\r\n\tstatic findLatest(wkVersions, preferProduction = true, minVersion = null, maxVersion = null) {\r\n\t\tlet versions = Versions.findCompatible(wkVersions, preferProduction, minVersion, maxVersion);\r\n\t\tif (versions.length > 0) {\r\n\t\t\treturn versions[0];\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\t\r\n}\r\n\r\nmodule.exports = Versions;","const Utils = require('./utils');\r\n\r\nconst MESSAGES = {\r\n\t\"MultipleResultNodes\": \"Multiple result nodes specified for the process.\",\r\n\t\"StartNodeMissing\": \"No start nodes found for the process.\",\r\n\t\"ResultNodeMissing\": \"No result node found for the process.\",\r\n\t\"ReferencedNodeMissing\": \"Referenced process node '{node_id}' doesn't exist.\",\r\n\t\"NodeIdInvalid\": \"Invalid node id specified in the process.\",\r\n\t\"NodeInvalid\": \"Process node '{node_id}' is not a valid object.\",\r\n\t\"ProcessIdMissing\": \"Process node '{node_id}' doesn't contain a process id.\",\r\n\t\"ProcessGraphParameterMissing\": \"Invalid parameter '{argument}' referenced in process node '{node_id}' (process: {process_id}, namespace: {namespace}).\",\r\n\t\"ProcessUnsupported\": \"Process '{process}' (namespace: {namespace}) is not supported.\",\r\n\t\"ProcessArgumentUnsupported\": \"Process '{process}' (namespace: {namespace}) does not support the following arguments: {arguments}\",\r\n\t\"ProcessArgumentRequired\": \"Process '{process}' (namespace: {namespace}) requires argument '{argument}'.\",\r\n\t\"ProcessArgumentInvalid\": \"The argument '{argument}' in process '{process}' (namespace: {namespace}) is invalid: {reason}\",\r\n\t\"ProcessGraphMissing\": \"No process graph specified\",\r\n\t\"ProcessMissing\": \"No process specified\"\r\n};\r\n\r\n/**\r\n * An error class for this library.\r\n * \r\n * @class\r\n */\r\nclass ProcessGraphError extends Error {\r\n\r\n\tconstructor(codeOrMsg, variables = {}) {\r\n\t\tsuper();\r\n\t\tthis.variables = variables;\r\n\t\tif (typeof MESSAGES[codeOrMsg] === 'string') {\r\n\t\t\tthis.code = codeOrMsg;\r\n\t\t\tthis.message = Utils.replacePlaceholders(MESSAGES[codeOrMsg], variables);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.code = codeOrMsg.replace(/[^\\w\\d]+/g, '');\r\n\t\t\tthis.message = codeOrMsg;\r\n\t\t}\r\n\t}\r\n\r\n\ttoJSON() {\r\n\t\treturn {\r\n\t\t\tcode: this.code,\r\n\t\t\tmessage: this.message\r\n\t\t};\r\n\t}\r\n\r\n}\r\n\r\nmodule.exports = ProcessGraphError;","/**\r\n * A list of errors.\r\n * \r\n * @class\r\n */\r\nclass ErrorList {\r\n\r\n\tconstructor() {\r\n\t\tthis.errors = [];\r\n\t}\r\n\r\n\tfirst() {\r\n\t\treturn this.errors[0] || null;\r\n\t}\r\n\r\n\tlast() {\r\n\t\treturn this.errors[this.errors.length-1] || null;\r\n\t}\r\n\r\n\tmerge(errorList) {\r\n\t\tthis.errors = this.errors.concat(errorList.getAll());\r\n\t}\r\n\t\r\n\tadd(error) {\r\n\t\tthis.errors.push(error);\r\n\t}\r\n\r\n\tcount() {\r\n\t\treturn this.errors.length;\r\n\t}\r\n\r\n\ttoJSON() {\r\n\t\treturn this.errors.map(e => {\r\n\t\t\tif (typeof e.toJSON === 'function') {\r\n\t\t\t\treturn e.toJSON();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tcode: 'InternalError',\r\n\t\t\t\t\tmessage: e.message\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tgetMessage() {\r\n\t\tvar msg = '';\r\n\t\tfor (var i in this.errors) {\r\n\t\t\tmsg += (parseInt(i, 10)+1) + \". \" + this.errors[i].message + \"\\r\\n\";\r\n\t\t}\r\n\t\treturn msg.trim();\r\n\t}\r\n\r\n\tgetAll() {\r\n\t\treturn this.errors;\r\n\t}\r\n\r\n}\r\n\r\nmodule.exports = ErrorList;","const Ajv = require('ajv');\r\nconst Utils = require('./utils');\r\nconst ProcessUtils = require('@openeo/js-commons/src/processUtils.js');\r\nconst keywords = require('./keywords');\r\n\r\nvar geoJsonSchema = require(\"../assets/GeoJSON.json\");\r\nvar subtypeSchemas = require(\"../assets/subtype-schemas.json\");\r\n\r\n/**\r\n * JSON Schema Validator.\r\n * \r\n * @class\r\n */\r\nclass JsonSchemaValidator {\r\n\r\n\tconstructor() {\r\n\t\tthis.ajv = new Ajv({\r\n\t\t\tschemaId: 'auto',\r\n\t\t\tformat: 'full',\r\n\t\t\taddUsedSchema: false\r\n\t\t});\r\n\t\t// Add subtype + GeoJSON schemas\r\n\t\tthis.ajv.addSchema(geoJsonSchema);\r\n\t\t// Add openEO specific keywords\r\n\t\tthis.ajv.addKeyword('parameters', Object.assign(keywords.parameters, {\r\n\t\t\tvalid: true,\r\n\t\t\terrors: true\r\n\t\t}));\r\n\t\tthis.ajv.addKeyword('returns', Object.assign(keywords.returns, {\r\n\t\t\tvalid: true,\r\n\t\t\terrors: true\r\n\t\t}));\r\n\t\tthis.ajv.addKeyword('subtype', Object.assign(keywords.subtype, {\r\n\t\t\tvalidate: async (subtype, data, schema) => await this.validateSubtype(subtype, data, schema),\r\n\t\t\tasync: true,\r\n\t\t\terrors: true\r\n\t\t}));\r\n\r\n\t\tthis.collections = null;\r\n\t\tthis.epsgCodes = null;\r\n\t\tthis.fileFormats = {\r\n\t\t\tinput: null,\r\n\t\t\toutput: null\r\n\t\t};\r\n\t\tthis.processRegistry = null;\r\n\t\tthis.udfRuntimes = null;\r\n\t}\r\n\r\n\tgetFunctionName(subtype) {\r\n\t\t// compute the function name (camelCase), e.g. for `band-name` it will be `validateBandName`\r\n\t\treturn \"validate\" + subtype.replace(/(^|\\-)(\\w)/g, (a, b, char) => char.toUpperCase());\r\n\t}\r\n\r\n\tmakeSchema(schema, $async = false) {\r\n\t\tschema = Utils.deepClone(schema);\r\n\r\n\t\t// Make array of schemas to a anyOf schema\r\n\t\tif (Array.isArray(schema)) {\r\n\t\t\tschema = {\r\n\t\t\t\tanyOf: schema\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// Set applicable JSON Schema draft version if not already set\r\n\t\tif (typeof schema.$schema === 'undefined') {\r\n\t\t\tschema.$schema = \"http://json-schema.org/draft-07/schema#\";\r\n\t\t}\r\n\r\n\t\t// Set async execution\r\n\t\tif ($async) {\r\n\t\t\tschema.$async = true;\r\n\t\t\tif (Utils.isObject(schema.definitions)) {\r\n\t\t\t\tfor(let key in schema.definitions) {\r\n\t\t\t\t\tschema.definitions[key].$async = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn schema;\r\n\t}\r\n\r\n\tasync validateValue(value, schema) {\r\n\t\tschema = this.makeSchema(schema, true);\r\n\r\n\t\ttry {\r\n\t\t\tawait this.ajv.validate(schema, value);\r\n\t\t\treturn [];\r\n\t\t} catch (e) {\r\n\t\t\tif (Array.isArray(e.errors)) {\r\n\t\t\t\treturn e.errors.map(e => e.message);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthrow e;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tasync validateSubtype(subtype, data, schema) {\r\n\t\tif (typeof subtypeSchemas.definitions[subtype] !== 'undefined') {\r\n\t\t\tschema = this.makeSchema(subtypeSchemas, true);\r\n\t\t\t// Make the schema for this subtype the default schema to be checked\r\n\t\t\tschema = Object.assign({}, subtypeSchemas.definitions[subtype], schema);\r\n\t\t\tif (subtype === 'process-graph') {\r\n\t\t\t\t// Special case: all validation will be done in validateProcessGraph()\r\n\t\t\t\tdelete schema.required;\r\n\t\t\t\tdelete schema.properties;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tschema = this.makeSchema(schema, true);\r\n\t\t}\r\n\r\n\t\t// Remove subtype to avoid recursion\r\n\t\tdelete schema.subtype;\r\n\r\n\t\tlet validated = await this.ajv.validate(schema, data);\r\n\t\tlet funcName = this.getFunctionName(subtype);\r\n\t\tif (validated && typeof this[funcName] === 'function') {\r\n\t\t\treturn await this[funcName](data);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn validated;\r\n\t\t}\r\n\t}\r\n\r\n\tsetUdfRuntimes(udfRuntimes) {\r\n\t\tif (!Utils.isObject(udfRuntimes)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.udfRuntimes = udfRuntimes;\r\n\t}\r\n\r\n\tsetCollections(collections) {\r\n\t\tif (!Array.isArray(collections)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.collections = [];\r\n\t\tfor(let c of collections) {\r\n\t\t\tif (Utils.isObject(c) && typeof c.id === 'string') {\r\n\t\t\t\tthis.collections.push(c.id);\r\n\t\t\t}\r\n\t\t\telse if (typeof c === 'string') {\r\n\t\t\t\tthis.collections.push(c);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Expects API compatible file formats (see GET /file_formats).\r\n\tsetFileFormats(fileFormats) {\r\n\t\tif (!Utils.isObject(fileFormats)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfor(let io of ['input', 'output']) {\r\n\t\t\tthis.fileFormats[io] = {};\r\n\t\t\tif (!Utils.isObject(fileFormats[io])) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tfor (let key in fileFormats[io]) {\r\n\t\t\t\tthis.fileFormats[io][key.toUpperCase()] = fileFormats[io][key];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tsetEpsgCodes(epsgCodes) {\r\n\t\tif (Array.isArray(epsgCodes)) {\r\n\t\t\tthis.epsgCodes = epsgCodes.map(v => parseInt(v, 10));\r\n\t\t}\r\n\t}\r\n\r\n\tasync validateCollectionId(data) {\r\n\t\tif (Array.isArray(this.collections) && !this.collections.find(c => c === data)) {\r\n\t\t\tthrow new Ajv.ValidationError([{\r\n\t\t\t\tmessage: \"Collection with id '\" + data + \"' doesn't exist.\"\r\n\t\t\t}]);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tasync validateUdfRuntime(data) {\r\n\t\tif (Utils.isObject(this.udfRuntimes) && !(data in this.udfRuntimes)) {\r\n\t\t\tthrow new Ajv.ValidationError([{\r\n\t\t\t\tmessage: \"UDF runtime '\" + data + \"' is not supported.\"\r\n\t\t\t}]);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tasync validateEpsgCode(data) {\r\n\t\tif (Array.isArray(this.epsgCodes)) {\r\n\t\t\tif (this.epsgCodes.includes(data)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Rough check for valid numbers as we don't want to maintain a full epsg code list in this repo.\r\n\t\telse if (data >= 2000) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tthrow new Ajv.ValidationError([{\r\n\t\t\tmessage: \"Invalid EPSG code '\" + data + \"' specified.\"\r\n\t\t}]);\r\n\t}\r\n\t\r\n\tasync validateInputFormat(data) {\r\n\t\tif (Utils.isObject(this.fileFormats.input) && !(data.toUpperCase() in this.fileFormats.input)) {\r\n\t\t\tthrow new Ajv.ValidationError([{\r\n\t\t\t\tmessage: \"Input format  '\" + data + \"' not supported.\"\r\n\t\t\t}]);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tasync validateOutputFormat(data) {\r\n\t\tif (Utils.isObject(this.fileFormats.output) && !(data.toUpperCase() in this.fileFormats.output)) {\r\n\t\t\tthrow new Ajv.ValidationError([{\r\n\t\t\t\tmessage: \"Output format  '\" + data + \"' not supported.\"\r\n\t\t\t}]);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tasync validateProjDefinition(data) {\r\n\t\t// To be overridden by end-user application, just doing a very basic check here.\r\n\t\tif (!data.toLowerCase().includes(\"+proj\")) {\r\n\t\t\tthrow new Ajv.ValidationError([{\r\n\t\t\t\tmessage: \"Invalid PROJ string specified (doesn't contain '+proj').\"\r\n\t\t\t}]);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tasync validateWkt2Definition(data) {\r\n\t\t// To be overridden by end-user application, just doing a very basic check here based on code ported over from proj4js\r\n\t\tvar codeWords = [\r\n\t\t\t'BOUNDCRS',\r\n\t\t\t'COMPOUNDCRS',\r\n\t\t\t'ENGCRS', 'ENGINEERINGCRS',\r\n\t\t\t'GEODCRS', 'GEODETICCRS',\r\n\t\t\t'GEOGCRS', 'GEOGRAPHICCRS',\r\n\t\t\t'PARAMETRICCRS',\r\n\t\t\t'PROJCRS', 'PROJECTEDCRS',\r\n\t\t\t'TIMECRS',\r\n\t\t\t'VERTCRS', 'VERTICALCRS'\r\n\t\t];\r\n\t\tdata = data.toUpperCase();\r\n\t\tif (!codeWords.some(word => data.indexOf(word) !== -1)) {\r\n\t\t\tthrow new Ajv.ValidationError([{\r\n\t\t\t\tmessage: \"Invalid WKT2 string specified.\"\r\n\t\t\t}]);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tasync validateTemporalInterval(data) {\r\n\t\tif (data[0] === null && data[1] === null) {\r\n\t\t\tthrow new Ajv.ValidationError([{\r\n\t\t\t\tmessage: \"Temporal interval must not be open on both ends.\"\r\n\t\t\t}]);\r\n\t\t}\r\n\t\telse if (data[0] !== null && data[1] !== null) {\r\n\t\t\tlet date1 = new Date(data[0]);\r\n\t\t\tlet date2 = new Date(data[1]);\r\n\t\t\tif (date2.getTime() < date1.getTime()) {\r\n\t\t\t\tthrow new Ajv.ValidationError([{\r\n\t\t\t\t\tmessage: \"The second timestamp can't be before the first timestamp.\"\r\n\t\t\t\t}]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tasync validateTemporalIntervals(data) {\r\n\t\tfor(let interval of data) {\r\n\t\t\t// throws if invalid\r\n\t\t\tawait this.validateTemporalInterval(interval);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tsetProcessGraphParser(processGraph) {\r\n\t\tthis.processGraph = processGraph;\r\n\t}\r\n\r\n\tasync validateProcessGraph(data) {\r\n\t\ttry {\r\n\t\t\tconst ProcessGraph = require('./processgraph');\r\n\t\t\tvar parser;\r\n\t\t\tif (data instanceof ProcessGraph) {\r\n\t\t\t\tparser = data;\r\n\t\t\t}\r\n\t\t\telse if (this.processGraph) {\r\n\t\t\t\tparser = this.processGraph.createProcessGraphInstance(data);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tparser = new ProcessGraph(data, null, this);\r\n\t\t\t}\r\n\t\t\tawait parser.validate();\r\n\t\t\treturn true;\r\n\t\t} catch (error) {\r\n\t\t\tthrow new Ajv.ValidationError([{\r\n\t\t\t\tmessage: error.message\r\n\t\t\t}]);\r\n\t\t}\r\n\t}\r\n\r\n\t// Checks whether the valueSchema is compatible to the paramSchema.\r\n\t// So would a value compatible with valueSchema be accepted by paramSchema?\r\n\t// allowValueAsElements: If true, it checks whether the valueSchema would be allowed as part of an array or object. For example number could be allowed as part of an array of numbers.\r\n\tstatic isSchemaCompatible(paramSchema, valueSchema, strict = false, allowValueAsElements = false) {\r\n\t\tvar paramSchemas = ProcessUtils.normalizeJsonSchema(paramSchema, true);\r\n\t\tvar valueSchemas = ProcessUtils.normalizeJsonSchema(valueSchema, true);\r\n\r\n\t\tvar compatible = paramSchemas.findIndex(ps => {\r\n\t\t\tfor(var i in valueSchemas) {\r\n\t\t\t\tvar vs = valueSchemas[i];\r\n\t\t\t\tif (typeof ps.type !== 'string' || (!strict && typeof vs.type !== 'string')) { // \"any\" type is always compatible\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t\telse if (ps.type === vs.type || (allowValueAsElements && (ps.type === 'array' || ps.type === 'object')) || (ps.type === 'number' && vs.type === 'integer') || (!strict && ps.type === 'integer' && vs.type === 'number')) {\r\n\t\t\t\t\tif (ps.type === 'array' && Utils.isObject(ps.items) && Utils.isObject(vs.items))  {\r\n\t\t\t\t\t\tif (allowValueAsElements && JsonSchemaValidator.isSchemaCompatible(ps.items, vs, strict)) {\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (JsonSchemaValidator.isSchemaCompatible(ps.items, vs.items, strict)) {\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (ps.type === 'object' && Utils.isObject(ps.properties) && Utils.isObject(vs.properties)) {\r\n\t\t\t\t\t\t// ToDo: Check properties, required properties etc.\r\n\t\t\t\t\t\t// If allowValueAsElements is true, all types are allowed to be part of the object.\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Check subtypes\r\n\t\t\t\t\telse if (!strict && (typeof ps.subtype !== 'string' || typeof vs.subtype !== 'string')) {\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (typeof ps.subtype !== 'string') { // types without subtype always accepts the same type with a subtype\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (ps.subtype === vs.subtype) {\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t});\r\n\r\n\t\treturn compatible !== -1;\r\n\t}\r\n\r\n}\r\n\r\nmodule.exports = JsonSchemaValidator;","module.exports = {\r\n\tsubtype: {\r\n\t\tmetaSchema: {\r\n\t\t\ttype: \"string\"\r\n\t\t}\r\n\t},\r\n\tparameters: {\r\n\t\tdependencies: [\r\n\t\t\t\"subtype\"\r\n\t\t],\r\n\t\tmetaSchema: {\r\n\t\t\ttype: \"array\",\r\n\t\t\titems: {\r\n\t\t\t\ttype: \"object\",\r\n\t\t\t\trequired: [\r\n\t\t\t\t\t\"name\",\r\n\t\t\t\t\t\"description\",\r\n\t\t\t\t\t\"schema\"\r\n\t\t\t\t],\r\n\t\t\t\tproperties: {\r\n\t\t\t\t\tname: {\r\n\t\t\t\t\t\ttype: \"string\",\r\n\t\t\t\t\t\tpattern: \"^\\\\w+$\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\tdescription: {\r\n\t\t\t\t\t\ttype: \"string\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\toptional: {\r\n\t\t\t\t\t\ttype: \"boolean\",\r\n\t\t\t\t\t\tdefault: false\r\n\t\t\t\t\t},\r\n\t\t\t\t\tdeprecated: {\r\n\t\t\t\t\t\ttype: \"boolean\",\r\n\t\t\t\t\t\tdefault: false\r\n\t\t\t\t\t},\r\n\t\t\t\t\texperimental: {\r\n\t\t\t\t\t\ttype: \"boolean\",\r\n\t\t\t\t\t\tdefault: false\r\n\t\t\t\t\t},\r\n\t\t\t\t\tdefault: {\r\n\t\t\t\t\t\t// Any type\r\n\t\t\t\t\t},\r\n\t\t\t\t\tschema: {\r\n\t\t\t\t\t\toneOf: [\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\"$ref\": \"http://json-schema.org/draft-07/schema\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\ttype: \"array\",\r\n\t\t\t\t\t\t\t\titems: {\r\n\t\t\t\t\t\t\t\t\t\"$ref\": \"http://json-schema.org/draft-07/schema\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\treturns: {\r\n\t\tdependencies: [\r\n\t\t\t\"subtype\"\r\n\t\t],\r\n\t\tmetaSchema: {\r\n\t\t\ttype: \"object\",\r\n\t\t\trequired: [\r\n\t\t\t\t\"schema\"\r\n\t\t\t],\r\n\t\t\tproperties: {\r\n\t\t\t\tdescription: {\r\n\t\t\t\t\ttype: \"string\"\r\n\t\t\t\t},\r\n\t\t\t\tschema: {\r\n\t\t\t\t\toneOf: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"$ref\": \"http://json-schema.org/draft-07/schema\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttype: \"array\",\r\n\t\t\t\t\t\t\titems: {\r\n\t\t\t\t\t\t\t\t\"$ref\": \"http://json-schema.org/draft-07/schema\"\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};","const BaseProcess = require('./process');\r\nconst ErrorList = require('./errorlist');\r\nconst JsonSchemaValidator = require('./jsonschema');\r\nconst ProcessGraph = require('./processgraph');\r\nconst ProcessGraphError = require('./error');\r\nconst ProcessGraphNode = require('./node');\r\nconst ProcessRegistry = require('./registry');\r\nconst Utils = require('./utils');\r\n\r\nmodule.exports = {\r\n\tBaseProcess,\r\n\tErrorList,\r\n\tJsonSchemaValidator,\r\n\tProcessGraph,\r\n\tProcessGraphError,\r\n\tProcessGraphNode,\r\n\tProcessRegistry,\r\n\tUtils\r\n};","const ProcessGraphError = require('./error');\r\nconst Utils = require('./utils');\r\n\r\n/**\r\n * A Process graph node.\r\n * \r\n * @class\r\n */\r\nclass ProcessGraphNode {\r\n\r\n\tconstructor(node, id, parent = null) {\r\n\t\tif (typeof id !== 'string' || id.length === 0) {\r\n\t\t\tthrow new ProcessGraphError('NodeIdInvalid');\r\n\t\t}\r\n\t\tif (!Utils.isObject(node)) {\r\n\t\t\tthrow new ProcessGraphError('NodeInvalid', {node_id: id});\r\n\t\t}\r\n\t\tif (typeof node.process_id !== 'string') {\r\n\t\t\tthrow new ProcessGraphError('ProcessIdMissing', {node_id: id});\r\n\t\t}\r\n\r\n\t\tthis.id = id;\r\n\t\tthis.processGraph = parent;\r\n\t\tthis.source = node;\r\n\t\tthis.process_id = node.process_id;\r\n\t\tthis.namespace = node.namespace || null;\r\n\t\tthis.arguments = Utils.isObject(node.arguments) ? Utils.deepClone(node.arguments) : {};\r\n\t\tthis.description = node.description || null;\r\n\t\tthis.isResultNode = node.result || false;\r\n\t\tthis.expectsFrom = []; // From which node do we expect results from\r\n\t\tthis.receivedFrom = []; // From which node have received results from so far\r\n\t\tthis.passesTo = [];\r\n\t\tthis.computedResult = undefined;\r\n\t}\r\n\r\n\ttoJSON() {\r\n\t\tlet args = Utils.mapObjectValues(this.arguments, arg => Utils.isObject(arg) && typeof arg.toJSON === 'function' ? arg.toJSON() : arg);\r\n\t\treturn Object.assign({}, this.source, {\r\n\t\t\tprocess_id: this.process_id,\r\n\t\t\tnamespace: this.namespace,\r\n\t\t\tdescription: this.description,\r\n\t\t\targuments: args,\r\n\t\t\tresult: this.isResultNode\r\n\t\t});\r\n\t}\r\n\r\n\tgetProcessGraph() {\r\n\t\treturn this.processGraph;\r\n\t}\r\n\r\n\tgetParent() {\r\n\t\tif (this.processGraph !== null) {\r\n\t\t\treturn this.processGraph.getParentNode();\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tgetArgumentNames() {\r\n\t\treturn Object.keys(this.arguments);\r\n\t}\r\n\r\n\thasArgument(name) {\r\n\t\treturn typeof this.arguments[name] !== 'undefined';\r\n\t}\r\n\r\n\tgetArgumentType(name) {\r\n\t\treturn Utils.getType(this.getRawArgument(name));\r\n\t}\r\n\r\n\tgetRawArgument(name) {\r\n\t\treturn Utils.isObject(this.source.arguments) ? this.source.arguments[name] : undefined;\r\n\t}\r\n\r\n\tgetParsedArgument(name) {\r\n\t\treturn this.arguments[name];\r\n\t}\r\n\r\n\tgetArgument(name, defaultValue = undefined) {\r\n\t\tif (typeof this.arguments[name] === 'undefined') {\r\n\t\t\treturn defaultValue;\r\n\t\t}\r\n\t\treturn this.evaluateArgument(this.arguments[name]);\r\n\t}\r\n\r\n\tgetArgumentRefs(name) {\r\n\t\treturn Utils.getRefs(this.getRawArgument(name), false);\r\n\t}\r\n\r\n\tgetRefs() {\r\n\t\treturn Utils.getRefs(this.source.arguments, false);\r\n\t}\r\n\r\n\tgetProcessGraphParameterValue(name) {\r\n\t\t// 1. Check local parameter, then check parents\r\n\t\t// 2. Check parents\r\n\t\t// 3. Try to get default value\r\n\t\t// 4. Fail if no value is available\r\n\t\tlet defaultValue;\r\n\t\tlet pg = this.processGraph;\r\n\t\tdo {\r\n\t\t\tif (pg.hasArgument(name)) {\r\n\t\t\t\treturn pg.getArgument(name);\r\n\t\t\t}\r\n\t\t\tif (pg.hasParameterDefault(name)) {\r\n\t\t\t\tdefaultValue = pg.getParameterDefault(name);\r\n\t\t\t}\r\n\t\t\tpg = pg.getParent();\r\n\t\t} while (pg !== null);\r\n\r\n\t\tif (typeof defaultValue !== 'undefined') {\r\n\t\t\treturn defaultValue;\r\n\t\t}\r\n\r\n\t\tif (!this.processGraph.allowUndefinedParameterRefs) {\r\n\t\t\tthrow new ProcessGraphError('ProcessGraphParameterMissing', {\r\n\t\t\t\targument: name,\r\n\t\t\t\tnode_id: this.id,\r\n\t\t\t\tprocess_id: this.process_id,\r\n\t\t\t\tnamespace: this.namespace || 'n/a'\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tevaluateArgument(arg) {\r\n\t\tvar type = Utils.getType(arg);\r\n\t\tswitch(type) {\r\n\t\t\tcase 'result':\r\n\t\t\t\treturn this.processGraph.getNode(arg.from_node).getResult();\r\n\t\t\tcase 'callback':\r\n\t\t\t\treturn arg;\r\n\t\t\tcase 'parameter':\r\n\t\t\t\treturn this.getProcessGraphParameterValue(arg.from_parameter);\r\n\t\t\tcase 'array':\r\n\t\t\tcase 'object':\r\n\t\t\t\tlet copy = type === 'array' ? [] : {};\r\n\t\t\t\tfor(var i in arg) {\r\n\t\t\t\t\tcopy[i] = this.evaluateArgument(arg[i]);\r\n\t\t\t\t}\r\n\t\t\t\treturn copy;\r\n\t\t\tdefault:\r\n\t\t\t\treturn arg;\r\n\t\t}\r\n\t}\r\n\r\n\tisStartNode() {\r\n\t\treturn (this.expectsFrom.length === 0);\r\n\t}\r\n\r\n\taddPreviousNode(node) {\r\n\t\tif (!this.expectsFrom.find(other => other.id === node.id)) {\r\n\t\t\tthis.expectsFrom.push(node);\r\n\t\t}\r\n\t}\r\n\r\n\tgetPreviousNodes() {\r\n\t\t// Sort nodes to ensure a consistent execution order\r\n\t\treturn this.expectsFrom.sort((a,b) => a.id.localeCompare(b.id));\r\n\t}\r\n\r\n\taddNextNode(node) {\r\n\t\tif (!this.passesTo.find(other => other.id === node.id)) {\r\n\t\t\tthis.passesTo.push(node);\r\n\t\t}\r\n\t}\r\n\r\n\tgetNextNodes() {\r\n\t\t// Sort nodes to ensure a consistent execution order\r\n\t\treturn this.passesTo.sort((a,b) => a.id.localeCompare(b.id));\r\n\t}\r\n\r\n\treset() {\r\n\t\tthis.computedResult = undefined;\r\n\t\tthis.receivedFrom = [];\r\n\t}\r\n\r\n\tgetDescription() {\r\n\t\treturn this.description;\r\n\t}\r\n\r\n\tsetDescription(description) {\r\n\t\tif (typeof description === 'string') {\r\n\t\t\tthis.description = description;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.description = null;\r\n\t\t}\r\n\t}\r\n\r\n\tsetResult(result) {\r\n\t\tthis.computedResult = result;\r\n\t}\r\n\r\n\tgetResult() {\r\n\t\treturn this.computedResult;\r\n\t}\r\n\r\n\tsolveDependency(dependencyNode) {\r\n\t\tif (dependencyNode !== null && this.expectsFrom.includes(dependencyNode)) {\r\n\t\t\tthis.receivedFrom.push(dependencyNode);\r\n\t\t}\r\n\t\treturn (this.expectsFrom.length === this.receivedFrom.length); // all dependencies solved?\r\n\t}\r\n\r\n}\r\n\r\nmodule.exports = ProcessGraphNode;","const JsonSchemaValidator = require('./jsonschema');\r\nconst ProcessGraphError = require('./error');\r\nconst ProcessUtils = require('@openeo/js-commons/src/processUtils');\r\nconst Utils = require('./utils');\r\n\r\n/**\r\n * Base Process class\r\n * \r\n * @class\r\n */\r\nclass BaseProcess {\r\n\r\n\tconstructor(spec) {\r\n\t\t// Make properties easily accessible \r\n\t\tObject.assign(this, spec);\r\n\r\n\t\tif (typeof this.id !== 'string') {\r\n\t\t\tthrow new Error(\"Invalid process specified, no id given.\");\r\n\t\t}\r\n\t\tif (!Array.isArray(this.parameters)) {\r\n\t\t\tthis.parameters = [];\r\n\t\t}\r\n\t}\r\n\r\n\ttoJSON() {\r\n\t\treturn Utils.omitFromObject(this, [\"validate\", \"validateArgument\", \"execute\", \"test\"]);\r\n\t}\r\n\r\n\tasync validate(node) {\r\n\t\t// Check for arguments we don't support and throw error\r\n\t\tlet unsupportedArgs = node.getArgumentNames().filter(name => this.parameters.findIndex(p => p.name === name) === -1);\r\n\t\tif (unsupportedArgs.length > 0) {\r\n\t\t\tthrow new ProcessGraphError('ProcessArgumentUnsupported', {\r\n\t\t\t\tprocess: this.id,\r\n\t\t\t\tnamespace: this.namespace || 'n/a',\r\n\t\t\t\targuments: unsupportedArgs\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// Validate against JSON Schema\r\n\t\tfor(let key in this.parameters) {\r\n\t\t\tlet param = this.parameters[key];\r\n\r\n\t\t\tif (!node.hasArgument(param.name)) {\r\n\t\t\t\tif (!param.optional) {\r\n\t\t\t\t\tthrow new ProcessGraphError('ProcessArgumentRequired', {\r\n\t\t\t\t\t\tprocess: this.id,\r\n\t\t\t\t\t\tnamespace: this.namespace || 'n/a',\r\n\t\t\t\t\t\targument: param.name\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlet arg = node.getParsedArgument(param.name);\r\n\t\t\tlet rawArg = node.getRawArgument(param.name);\r\n\t\t\tawait this.validateArgument(arg, rawArg, node, param);\r\n\t\t}\r\n\t}\r\n\r\n\tasync validateArgument(arg, rawArg, node, param, path = null) {\r\n\t\tif (!path) {\r\n\t\t\tpath = param.name;\r\n\t\t}\r\n\t\tlet argType = Utils.getType(arg);\r\n\t\tlet pg = node.getProcessGraph();\r\n\t\tswitch(argType) {\r\n\t\t\tcase 'parameter':\r\n\t\t\t\t// Validate callback parameters (no value available yet)\r\n\t\t\t\tlet callbackParam = pg.getCallbackParameter(arg.from_parameter);\r\n\t\t\t\tif (callbackParam) {\r\n\t\t\t\t\tif (!JsonSchemaValidator.isSchemaCompatible(param.schema, callbackParam.schema)) {\r\n\t\t\t\t\t\tthrow new ProcessGraphError('ProcessArgumentInvalid', {\r\n\t\t\t\t\t\t\tprocess: this.id,\r\n\t\t\t\t\t\t\tnamespace: this.namespace || 'n/a',\r\n\t\t\t\t\t\t\targument: path,\r\n\t\t\t\t\t\t\treason: \"Schema for parameter '\" + arg.from_parameter + \"' not compatible with reference\"\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Validate all other parameters (value must be available if allowUndefinedParameterRefs is false)\r\n\t\t\t\tlet value = node.getProcessGraphParameterValue(arg.from_parameter);\r\n\t\t\t\tif (typeof value === 'undefined' && !pg.allowUndefinedParameterRefs) {\r\n\t\t\t\t\tthrow new ProcessGraphError('ProcessGraphParameterMissing', {\r\n\t\t\t\t\t\targument: arg.from_parameter,\r\n\t\t\t\t\t\tnode_id: node.id,\r\n\t\t\t\t\t\tprocess_id: node.process_id,\r\n\t\t\t\t\t\tnamespace: node.namespace || 'n/a'\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet parameter = pg.getProcessParameter(arg.from_parameter);\r\n\t\t\t\tif (Utils.isObject(parameter) && parameter.schema) {\r\n\t\t\t\t\tif (typeof value !== 'undefined') {\r\n\t\t\t\t\t\tawait this.validateArgument(value, rawArg, node, parameter, path);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!JsonSchemaValidator.isSchemaCompatible(param.schema, parameter.schema)) {\r\n\t\t\t\t\t\tthrow new ProcessGraphError('ProcessArgumentInvalid', {\r\n\t\t\t\t\t\t\tprocess: this.id,\r\n\t\t\t\t\t\t\tnamespace: this.namespace || 'n/a',\r\n\t\t\t\t\t\t\targument: path,\r\n\t\t\t\t\t\t\treason: \"Schema for parameter '\" + arg.from_parameter + \"' not compatible\"\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// else: Parameter not available, everything is valid\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'result':\r\n\t\t\t\tlet resultNode = pg.getNode(arg.from_node);\r\n\t\t\t\tlet process = pg.getProcess(resultNode);\r\n\t\t\t\tif (!JsonSchemaValidator.isSchemaCompatible(param.schema, process.returns.schema)) {\r\n\t\t\t\t\tthrow new ProcessGraphError('ProcessArgumentInvalid', {\r\n\t\t\t\t\t\tprocess: this.id,\r\n\t\t\t\t\t\tnamespace: this.namespace || 'n/a',\r\n\t\t\t\t\t\targument: path,\r\n\t\t\t\t\t\treason: \"Schema for result '\" + arg.from_node + \"' not compatible\"\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'array':\r\n\t\t\tcase 'object':\r\n\t\t\t\tlet schemas = ProcessUtils.normalizeJsonSchema(param.schema).filter(schema => ['array', 'object'].includes(schema.type));\r\n\t\t\t\t// Check if it is expected to be a process. If yes, do normal validation. Handles the issue discussed in https://github.com/Open-EO/openeo-js-processgraphs/issues/4\r\n\t\t\t\tlet isProcessGraphSchema = (schemas.length === 1 && schemas[0].subtype === 'process-graph');\r\n\t\t\t\tif (Utils.containsRef(rawArg) && !isProcessGraphSchema) {\r\n\t\t\t\t\t// This tries to at least be compliant to one of the element schemas\r\n\t\t\t\t\t// It's better than validating nothing, but it's still not 100% correct\r\n\t\t\t\t\tfor(var key in arg) {\r\n\t\t\t\t\t\tlet elementSchema = schemas.map(schema =>  ProcessUtils.getElementJsonSchema(schema, key)).filter(schema => Object.keys(schema).length); // jshint ignore:line\r\n\t\t\t\t\t\tif (elementSchema.length > 0) {\r\n\t\t\t\t\t\t\tlet validated = 0;\r\n\t\t\t\t\t\t\tlet lastError = null;\r\n\t\t\t\t\t\t\tfor(let schema of elementSchema) {\r\n\t\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\t\t// ToDo: Check against JSON schema required property\r\n\t\t\t\t\t\t\t\t\tawait this.validateArgument(arg[key], rawArg[key], node, {schema}, path + '/' + key);\r\n\t\t\t\t\t\t\t\t\tvalidated++;\r\n\t\t\t\t\t\t\t\t} catch (error) {\r\n\t\t\t\t\t\t\t\t\tlastError = error;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (validated === 0 && lastError) {\r\n\t\t\t\t\t\t\t\tthrow lastError;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// Use default behavior below, so no break; needed\r\n\t\t\t\t} // jshint ignore:line\r\n\t\t\tdefault:\r\n\t\t\t\tlet validator = node.getProcessGraph().getJsonSchemaValidator();\r\n\t\t\t\t// Validate against JSON schema\r\n\t\t\t\tlet errors = await validator.validateValue(arg, param.schema);\r\n\t\t\t\tif (errors.length > 0) {\r\n\t\t\t\t\tthrow new ProcessGraphError('ProcessArgumentInvalid', {\r\n\t\t\t\t\t\tprocess: this.id,\r\n\t\t\t\t\t\tnamespace: this.namespace || 'n/a',\r\n\t\t\t\t\t\targument: path,\r\n\t\t\t\t\t\treason: errors\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/* istanbul ignore next */\r\n\tasync execute(/*node*/) {\r\n\t\tthrow new Error(`execute not implemented yet for process '${this.id}' (namespace: ${this.namespace || 'n/a'})`);\r\n\t}\r\n\r\n\t/* istanbul ignore next */\r\n\ttest() {\r\n\t\t// Run the tests from the examples\r\n\t\tthrow new Error(`test not implemented yet for process '${this.id}' (namespace: ${this.namespace || 'n/a'})`);\r\n\t}\r\n\r\n}\r\n\r\nmodule.exports =  BaseProcess;","const BaseProcess = require('./process');\r\nconst ErrorList = require('./errorlist');\r\nconst JsonSchemaValidator = require('./jsonschema');\r\nconst ProcessGraphError = require('./error');\r\nconst ProcessGraphNode = require('./node');\r\nconst Utils = require('./utils');\r\nconst ProcessUtils = require('@openeo/js-commons/src/processUtils.js');\r\n\r\nconst processKeys = [\r\n\t'id',\r\n\t'summary',\r\n\t'description',\r\n\t'categories',\r\n\t'parameters',\r\n\t'returns',\r\n\t'deprecated',\r\n\t'experimental',\r\n\t'exceptions',\r\n\t'examples',\r\n\t'links',\r\n\t'process_graph'\r\n];\r\n\r\n/**\r\n * Process parser, validator and executor.\r\n * \r\n * @class\r\n */\r\nclass ProcessGraph {\r\n\r\n\t// ToDo: Also parse and validate other parts of the process, e.g. id, parameters, etc.\r\n\r\n\tconstructor(process, processRegistry = null, jsonSchemaValidator = null) {\r\n\t\tthis.process = process;\r\n\t\tthis.nodes = {};\r\n\t\tthis.startNodes = [];\r\n\t\tthis.resultNode = null;\r\n\t\tthis.children = [];\r\n\t\tthis.parentNode = null;\r\n\t\tthis.parsed = false;\r\n\t\tthis.validated = false;\r\n\t\tthis.errors = new ErrorList();\r\n\t\tthis.callbackParameters = [];\r\n\t\t// Sub process graphs need to copy these:\r\n\t\tthis.processRegistry = processRegistry;\r\n\t\tthis.jsonSchemaValidator = jsonSchemaValidator;\r\n\t\tthis.arguments = {};\r\n\t\tthis.allowEmptyGraph = false;\r\n\t\tthis.fillProcessParameters = false;\r\n\t\tthis.allowUndefinedParameterRefs = true;\r\n\t}\r\n\r\n\ttoJSON() {\r\n\t\treturn this.process;\r\n\t}\r\n\r\n\tgetJsonSchemaValidator() {\r\n\t\tif (this.jsonSchemaValidator === null) {\r\n\t\t\tthis.jsonSchemaValidator = this.createJsonSchemaValidatorInstance();\r\n\t\t}\r\n\t\tthis.jsonSchemaValidator.setProcessGraphParser(this);\r\n\t\treturn this.jsonSchemaValidator;\r\n\t}\r\n\r\n\tcreateJsonSchemaValidatorInstance() {\r\n\t\treturn new JsonSchemaValidator();\r\n\t}\r\n\r\n\tcreateNodeInstance(nodeObj, id, parent) {\r\n\t\treturn new ProcessGraphNode(nodeObj, id, parent);\r\n\t}\r\n\r\n\tcreateProcessGraphInstance(process) {\r\n\t\tlet pg = new ProcessGraph(process, this.processRegistry, this.getJsonSchemaValidator());\r\n\t\treturn this.copyProcessGraphInstanceProperties(pg);\r\n\t}\r\n\r\n\tcreateProcessInstance(process) {\r\n\t\treturn new BaseProcess(process);\r\n\t}\r\n\r\n\tcopyProcessGraphInstanceProperties(pg) {\r\n\t\tpg.allowEmptyGraph = this.allowEmptyGraph;\r\n\t\tpg.fillProcessParameters = this.fillProcessParameters;\r\n\t\tpg.allowUndefinedParameterRefs = this.allowUndefinedParameterRefs;\r\n\t\treturn pg;\r\n\t}\r\n\r\n\tcreateChildProcessGraph(process, node, parameterPath = []) {\r\n\t\tvar pg = this.createProcessGraphInstance(process);\r\n\t\tpg.setArguments(this.arguments);\r\n\t\tpg.setParentNode(node);\r\n\t\tif (parameterPath.length > 0) {\r\n\t\t\tlet parameterName = parameterPath.shift();\r\n\t\t\tpg.setCallbackParameters(ProcessUtils.getCallbackParametersForProcess(pg.getParentProcess(), parameterName, parameterPath));\r\n\t\t}\r\n\t\tpg.parse();\r\n\t\tthis.children.push(pg);\r\n\t\treturn pg;\r\n\t}\r\n\r\n\tgetParentNode() {\r\n\t\treturn this.parentNode;\r\n\t}\r\n\r\n\tgetParent() {\r\n\t\tif (this.parentNode) {\r\n\t\t\treturn this.parentNode.getProcessGraph();\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tsetParentNode(parent) {\r\n\t\tif (parent instanceof ProcessGraphNode) {\r\n\t\t\tthis.parentNode = parent;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.parentNode = null;\r\n\t\t}\r\n\t}\r\n\r\n\tisValid() {\r\n\t\treturn this.validated && this.errors.count() === 0;\r\n\t}\r\n\r\n\taddError(error) {\r\n\t\tthis.errors.add(error);\r\n\t}\r\n\r\n\tallowUndefinedParameters(allow = true) {\r\n\t\tif (!allow) {\r\n\t\t\tthis.fillProcessParameters = false;\r\n\t\t}\r\n\t\tthis.allowUndefinedParameterRefs = allow;\r\n\t}\r\n\r\n\tfillUndefinedParameters(fill = true) {\r\n\t\tif (fill) {\r\n\t\t\tthis.allowUndefinedParameterRefs = true;\r\n\t\t}\r\n\t\tthis.fillProcessParameters = fill;\r\n\t}\r\n\r\n\tallowEmpty(allow = true) {\r\n\t\tthis.allowEmptyGraph = allow;\r\n\t}\r\n\r\n\tparse() {\r\n\t\tif (this.parsed) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst makeError = (errorId) => {\r\n\t\t\tif (this.getParentProcessId()) {\r\n\t\t\t\treturn new ProcessGraphError(\r\n\t\t\t\t\terrorId + 'Callback',\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tprocess_id: this.getParentProcessId(),\r\n\t\t\t\t\t\tnode_id: this.parentNode ? this.parentNode.id : 'N/A'\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn new ProcessGraphError(errorId);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif (!Utils.isObject(this.process)) {\r\n\t\t\tthrow makeError('ProcessMissing');\r\n\t\t}\r\n\r\n\t\tif (Utils.size(this.process.process_graph) === 0) {\r\n\t\t\tif (this.allowEmptyGraph) {\r\n\t\t\t\tlet hasProcessKey = Object.keys(this.process).find(key => processKeys.includes(key));\r\n\t\t\t\tif (Utils.size(this.process) === 0 || hasProcessKey) {\r\n\t\t\t\t\tthis.parsed = true;\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthrow makeError('ProcessGraphMissing');\r\n\t\t}\r\n\r\n\t\tthis.nodes = Utils.mapObjectValues(this.process.process_graph, (pg, id) => this.createNodeInstance(pg, id, this));\r\n\r\n\t\tfor(let id in this.nodes) {\r\n\t\t\tvar node = this.nodes[id];\r\n\t\t\tif (node.isResultNode) {\r\n\t\t\t\tif (this.resultNode !== null) {\r\n\t\t\t\t\tthrow makeError('MultipleResultNodes');\r\n\t\t\t\t}\r\n\t\t\t\tthis.resultNode = node;\r\n\t\t\t}\r\n\r\n\t\t\tthis.parseNodeArguments(id, node);\r\n\t\t}\r\n\t\tif (this.resultNode === null) {\r\n\t\t\tthrow makeError('ResultNodeMissing');\r\n\t\t}\r\n\r\n\t\t// Find/Cache start nodes, only possible after parseNodeArguments have been called for all nodes\r\n\t\t// Sort nodes to ensure a consistent execution order\r\n\t\tthis.startNodes = Object.values(this.nodes).filter(node => node.isStartNode()).sort((a,b) => a.id.localeCompare(b.id));\r\n\t\tif (this.startNodes.length === 0) {\r\n\t\t\tthrow makeError('StartNodeMissing');\r\n\t\t}\r\n\r\n\t\tthis.parsed = true;\r\n\t}\r\n\r\n\tasync validate(throwOnErrors = true) {\r\n\t\tif (this.validated) {\r\n\t\t\tif (throwOnErrors && this.errors.count() > 0) {\r\n\t\t\t\tthrow this.errors.first();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn this.errors;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.validated = true;\r\n\r\n\t\t// Parse\r\n\t\ttry {\r\n\t\t\tthis.parse();\r\n\t\t} catch (error) {\r\n\t\t\tthis.addError(error);\r\n\t\t\tif (throwOnErrors) {\r\n\t\t\t\tthrow error;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Validate\r\n\t\tawait this.validateNodes(this.getStartNodes(), throwOnErrors);\r\n\t\treturn this.errors;\r\n\t}\r\n\r\n\tasync execute(args = null) {\r\n\t\tthis.allowUndefinedParameters(false);\r\n\t\tthis.setArguments(args);\r\n\t\tawait this.validate();\r\n\t\tthis.reset();\r\n\t\tawait this.executeNodes(this.getStartNodes());\r\n\t\treturn this.getResultNode();\r\n\t}\r\n\r\n\tasync validateNodes(nodes, throwOnErrors, previousNode = null) {\r\n\t\tif (nodes.length === 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar promises = nodes.map(async (node) => {\r\n\t\t\t// Validate this node after all dependencies are available\r\n\t\t\tif (!node.solveDependency(previousNode)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Get process and validate\r\n\t\t\ttry {\r\n\t\t\t\tawait this.validateNode(node);\r\n\t\t\t} catch (e) {\r\n\t\t\t\tif (e instanceof ErrorList) {\r\n\t\t\t\t\tthis.errors.merge(e);\r\n\t\t\t\t\tif (throwOnErrors) {\r\n\t\t\t\t\t\tthrow e.first();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.addError(e);\r\n\t\t\t\t\tif (throwOnErrors) {\r\n\t\t\t\t\t\tthrow e;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tawait this.validateNodes(node.getNextNodes(), throwOnErrors, node);\r\n\t\t});\r\n\r\n\t\tawait Promise.all(promises);\r\n\t}\r\n\r\n\tasync validateNode(node) {\r\n\t\tvar process = this.getProcess(node);\r\n\t\tif (process) {\r\n\t\t\treturn await process.validate(node);\r\n\t\t}\r\n\t}\r\n\r\n\tasync executeNodes(nodes, previousNode = null) {\r\n\t\tif (nodes.length === 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar promises = nodes.map(async (node) => {\r\n\t\t\t// Execute this node after all dependencies are available\r\n\t\t\tif (!node.solveDependency(previousNode)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tvar result = await this.executeNode(node);\r\n\t\t\tnode.setResult(result);\r\n\r\n\t\t\t// Execute next nodes in chain\r\n\t\t\tawait this.executeNodes(node.getNextNodes(), node);\r\n\r\n\t\t});\r\n\r\n\t\treturn await Promise.all(promises);\r\n\t}\r\n\r\n\tasync executeNode(node) {\r\n\t\tvar process = this.getProcess(node);\r\n\t\treturn await process.execute(node);\r\n\t}\r\n\r\n\tparseNodeArguments(nodeId, node, parameterPath = [], args = undefined) {\r\n\t\tif (typeof args === 'undefined') {\r\n\t\t\targs = node.arguments;\r\n\t\t}\r\n\t\tfor(let argumentName in args) {\r\n\t\t\tlet arg = args[argumentName];\r\n\t\t\t// Make a \"path\" that consists of the parameter name and the keys of arrays/objects, if applicable.\r\n\t\t\tlet path = parameterPath.concat([argumentName]);\r\n\t\t\tlet type = Utils.getType(arg);\r\n\t\t\tswitch(type) {\r\n\t\t\t\tcase 'result':\r\n\t\t\t\t\t// Connect the nodes with each other\r\n\t\t\t\t\tvar prevNode = this.nodes[arg.from_node];\r\n\t\t\t\t\tif (typeof prevNode === 'undefined') {\r\n\t\t\t\t\t\tthrow new ProcessGraphError('ReferencedNodeMissing', {node_id: arg.from_node});\r\n\t\t\t\t\t}\r\n\t\t\t\t\tnode.addPreviousNode(prevNode);\r\n\t\t\t\t\tprevNode.addNextNode(node);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'callback':\r\n\t\t\t\t\t// Create a new process graph for the callback\r\n\t\t\t\t\targs[argumentName] = this.createChildProcessGraph(arg, node, path);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'parameter':\r\n\t\t\t\t\t// If we found a parameter and it's not defined yet (includes that it's not a callback parameter) and fillProcessParameters is set to true: Add it to the process spec.\r\n\t\t\t\t\tif (this.fillProcessParameters && !this.hasParameter(arg.from_parameter)) {\r\n\t\t\t\t\t\tthis.addProcessParameter(arg.from_parameter);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'array':\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\t// Parse everything hidden in arrays and objects\r\n\t\t\t\t\tthis.parseNodeArguments(nodeId, node, path, arg);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tsetCallbackParameters(parameters) {\r\n\t\tthis.callbackParameters = parameters;\r\n\t}\r\n\r\n\tgetCallbackParameter(name) {\r\n\t\treturn this.getCallbackParameters().find(p => p.name === name) || null;\r\n\t}\r\n\r\n\tgetCallbackParameters() {\t\t\r\n\t\treturn this.callbackParameters;\r\n\t}\r\n\r\n\taddProcessParameter(name, description = '', schema = {}) {\r\n\t\tif (!Array.isArray(this.process.parameters)) {\r\n\t\t\tthis.process.parameters = [];\r\n\t\t}\r\n\t\tthis.process.parameters.push({\r\n\t\t\tname, description, schema\r\n\t\t});\r\n\t}\r\n\r\n\thasParameterDefault(name) {\r\n\t\treturn this.getParameterDefault(name) !== undefined;\r\n\t}\r\n\r\n\tgetParameterDefault(name) {\r\n\t\tlet param = this.getParameter(name);\r\n\t\tif (param !== null) {\r\n\t\t\treturn param.default;\r\n\t\t}\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\thasParameter(name) {\r\n\t\treturn this.getParameter(name) !== null;\r\n\t}\r\n\r\n\tgetProcessParameters(includeUndefined = false) {\r\n\t\tlet parameters = Array.isArray(this.process.parameters) ? this.process.parameters.slice(0) : [];\r\n\t\tif (includeUndefined && !this.fillProcessParameters) {\r\n\t\t\tfor (let key in this.nodes) {\r\n\t\t\t\tlet refs = this.nodes[key].getRefs();\r\n\t\t\t\tfor(let ref of refs) {\r\n\t\t\t\t\tif (ref.from_parameter && !parameters.find(other => other.name === ref.from_parameter)) { // jshint ignore:line\r\n\t\t\t\t\t\tparameters.push({\r\n\t\t\t\t\t\t\tname: ref.from_parameter,\r\n\t\t\t\t\t\t\tdescription: '',\r\n\t\t\t\t\t\t\tschema: {}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn parameters;\r\n\t}\r\n\r\n\tgetProcessParameter(name, includeUndefined = false) {\r\n\t\treturn this.getProcessParameters(includeUndefined).find(p => p.name === name) || null;\r\n\t}\r\n\r\n\tgetParameter(name) {\r\n\t\tlet callbackParam = this.getCallbackParameter(name);\r\n\t\tlet processParam = this.getProcessParameter(name);\r\n\t\tif (callbackParam && processParam) {\r\n\t\t\t// ToDo: Take https://github.com/Open-EO/openeo-api/issues/332 into account\r\n\t\t\treturn Object.assign({}, callbackParam, processParam);\r\n\t\t}\r\n\t\telse if (callbackParam) {\r\n\t\t\treturn callbackParam;\r\n\t\t}\r\n\t\telse if (processParam) {\r\n\t\t\treturn processParam;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tsetArguments(args) {\r\n\t\tif (Utils.isObject(args)) {\r\n\t\t\tObject.assign(this.arguments, args);\r\n\t\t}\r\n\t}\r\n\r\n\thasArgument(name) {\r\n\t\treturn typeof this.arguments[name] !== 'undefined';\r\n\t}\r\n\r\n\tgetArgument(name) {\r\n\t\treturn this.arguments[name];\r\n\t}\r\n\r\n\treset() {\r\n\t\tfor(var id in this.nodes) {\r\n\t\t\tthis.nodes[id].reset();\r\n\t\t}\r\n\t\tthis.children.forEach(child => child.reset());\r\n\t}\r\n\r\n\tgetResultNode() {\r\n\t\treturn this.resultNode;\r\n\t}\r\n\r\n\tgetStartNodes() {\r\n\t\treturn this.startNodes;\r\n\t}\r\n\r\n\tgetStartNodeIds() {\r\n\t\treturn this.startNodes.map(node => node.id);\r\n\t}\r\n\r\n\tgetNode(nodeId) {\r\n\t\treturn nodeId in this.nodes ? this.nodes[nodeId] : null;\r\n\t}\r\n\r\n\tgetNodeCount() {\r\n\t\treturn Utils.size(this.nodes);\r\n\t}\r\n\r\n\tgetNodes() {\r\n\t\treturn this.nodes;\r\n\t}\r\n\r\n\tgetErrors() {\r\n\t\treturn this.errors;\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the process for the given process ID or node.\r\n\t * \r\n\t * @param {ProcessGraphNode|string} process \r\n\t * @param {?string} [namespace=null]\r\n\t * @returns {object|null}\r\n\t * @throws {ProcessGraphError} - ProcessUnsupported\r\n\t */\r\n\tgetProcess(process, namespace = null) {\r\n\t\tif (this.processRegistry === null) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tlet id;\r\n\t\tif (process instanceof ProcessGraphNode) {\r\n\t\t\tid = process.process_id;\r\n\t\t\tnamespace = process.namespace;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tid = process;\r\n\t\t}\r\n\t\tlet spec = this.processRegistry.get(id, namespace);\r\n\t\tif (spec === null) {\r\n\t\t\tthrow new ProcessGraphError('ProcessUnsupported', {process: id, namespace: namespace || 'n/a'});\r\n\t\t}\r\n\t\treturn this.createProcessInstance(spec);\r\n\t}\r\n\r\n\tgetParentProcessId() {\r\n\t\tif(this.getParentNode()) {\r\n\t\t\treturn this.getParentNode().process_id;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tgetParentProcess() {\r\n\t\tif (this.processRegistry === null) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn this.processRegistry.get(this.getParentProcessId());\r\n\t}\r\n\r\n}\r\n\r\nmodule.exports = ProcessGraph;","const CommonProcessRegistry = require('@openeo/js-commons/src/processRegistry');\r\n\r\n/**\r\n * Central registry for processes.\r\n * \r\n * Implementation has been moved to @openeo/js-commons.\r\n * This wrapper here is only available for backward compatibility.\r\n * \r\n * @todo Remove in 2.0.0.\r\n * @augments CommonProcessRegistry\r\n * @class\r\n * @deprecated\r\n */\r\nclass ProcessRegistry extends CommonProcessRegistry {\r\n\r\n}\r\n\r\nmodule.exports = ProcessRegistry;","const CommonUtils = require('@openeo/js-commons/src/utils.js');\r\n\r\n/**\r\n * Utilities\r\n * \r\n * @class\r\n */\r\nclass Utils extends CommonUtils {\r\n\r\n\t/**\r\n\t * Checks whether a value contains references (from_parameter, from_node).\r\n\t * \r\n\t * Doesn't return references from ProcessGraph objects if checkCallbacks is set to true.\r\n\t * \r\n\t * @param {*} value \r\n\t * @param {boolean} checkProcess - Set to `false` to not check for refs in a process if provided as value.\r\n\t * @param {boolean} checkCallbacks - Set to `true` to also check for refs in callbacks. Only applies if `checkProcess` is true.\r\n\t * @returns {boolean}\r\n\t */\r\n\tstatic containsRef(value, checkProcess = true, checkCallbacks = false) {\r\n\t\tlet type = Utils.getType(value);\r\n\t\tswitch(type) {\r\n\t\t\tcase 'result':\r\n\t\t\tcase 'parameter':\r\n\t\t\t\treturn true;\r\n\t\t\tcase 'callback':\r\n\t\t\t\tif (checkProcess && Utils.containsRef(value.process_graph, checkCallbacks, checkCallbacks)) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'array':\r\n\t\t\tcase 'object':\r\n\t\t\t\tfor(let key in value) {\r\n\t\t\t\t\tif (Utils.containsRef(value[key], checkProcess, checkCallbacks)) {\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns all distinct references (from_parameter, from_node) contained in a value.\r\n\t * \r\n\t * Doesn't return references from ProcessGraph objects if checkCallbacks is set to true.\r\n\t * \r\n\t * @param {*} value \r\n\t * @param {boolean} getFromProcess - Set to `false` to not get refs from a process if provided as value.\r\n\t * @param {boolean} getFromCallbacks - Set to `true` to also include refs in callbacks. Only applies if `getFromProcess` is true.\r\n\t * @returns {boolean}\r\n\t */\r\n\tstatic getRefs(value, getFromProcess = true, getFromCallbacks = false) {\r\n\t\tvar store = [];\r\n\t\tvar type = Utils.getType(value);\r\n\t\tswitch(type) {\r\n\t\t\tcase 'result':\r\n\t\t\tcase 'parameter':\r\n\t\t\t\tstore.push(value);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'callback':\r\n\t\t\t\tif (getFromProcess) {\r\n\t\t\t\t\tstore = store.concat(Utils.getRefs(value.process_graph, getFromCallbacks, getFromCallbacks));\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'array':\r\n\t\t\tcase 'object':\r\n\t\t\t\tfor(var key in value) {\r\n\t\t\t\t\tstore = store.concat(Utils.getRefs(value[key], getFromProcess, getFromCallbacks));\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\treturn Utils.unique(store, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the type of the value.\r\n\t * \r\n\t * Similar to typeof, but gives more details for objects (array, parameter, callback, result, null, object).\r\n\t * \r\n\t * @param {*} value \r\n\t * @returns {string}\r\n\t */\r\n\tstatic getType(value) {\r\n\t\tconst ProcessGraph = require('./processgraph');\r\n\t\tif (typeof value === 'object') {\r\n\t\t\tif (value === null) {\r\n\t\t\t\treturn 'null';\r\n\t\t\t}\r\n\t\t\telse if (Array.isArray(value)) {\r\n\t\t\t\treturn 'array';\r\n\t\t\t}\r\n\t\t\telse if(value.hasOwnProperty(\"process_graph\") || value instanceof ProcessGraph) {\r\n\t\t\t\treturn 'callback';\r\n\t\t\t}\r\n\t\t\telse if(value.hasOwnProperty(\"from_node\")) {\r\n\t\t\t\treturn 'result';\r\n\t\t\t}\r\n\t\t\telse if(value.hasOwnProperty(\"from_parameter\")) {\r\n\t\t\t\treturn 'parameter';\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn 'object';\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn (typeof value);\r\n\t}\r\n\r\n}\r\n\r\nmodule.exports = Utils;"],"names":["AuthProvider","constructor","type","connection","options","this","id","title","description","token","getId","getType","getProviderId","length","getTitle","getDescription","getToken","setToken","emit","setAuthProvider","login","args","Error","logout","module","exports","BaseEntity","properties","apiToClientNames","clientToApiNames","lastRefreshTime","extra","i","backend","client","Array","isArray","toJSON","obj","key","apiKey","Object","assign","setAll","metadata","name","Date","now","getDataAge","getAll","get","_convertToRequest","parameters","request","_supports","feature","capabilities","hasFeature","Environment","Utils","BasicProvider","super","username","password","response","_send","method","responseType","url","headers","base64encode","isObject","data","access_token","getName","getUrl","window","location","toString","setUrl","uri","handleErrorResponse","error","Promise","resolve","reject","fileReader","FileReader","onerror","event","abort","target","onload","res","result","ArrayBuffer","String","fromCharCode","apply","Uint16Array","JSON","parse","readAsText","getResponseType","str","btoa","fileNameForUpload","source","split","pop","dataForUpload","downloadResults","con","assets","targetFolder","saveToFile","filename","Blob","blobURL","URL","createObjectURL","tempLink","document","createElement","style","display","href","setAttribute","download","body","appendChild","click","removeChild","revokeObjectURL","console","BuilderNode","Parameter","axios","ProcessUtils","ProcessRegistry","PROCESS_META","Builder","fromVersion","version","fromURL","processes","parent","undefined","parentNode","parentParameter","nodes","idCounter","callbackParameterCache","all","forEach","process","createFunction","addProcessSpec","namespace","add","setParent","node","parameterName","createCallbackParameter","create","getParentCallbackParameters","callbackParams","getCallbackParametersForProcess","spec","map","param","warn","addParameter","parameter","root","find","p","builder","existing","findIndex","push","math","formula","Formula","setBuilder","generate","supports","processId","Boolean","includes","rest","join","process_graph","mapObjectValues","generateId","prefix","replace","substr","TapDigit","parser","Parser","tree","setResultNode","finalNode","parseTree","keys","parseFloat","Number","getRef","Identifier","Expression","FunctionCall","addOperatorProcess","Binary","operator","left","right","val","Unary","expression","value","startsWith","nodeId","substring","from_node","match","count","ref","processName","operatorMapping","processArgs","processDescription","processNamespace","arguments","namedArguments","_description","addParametersToProcess","arg","schema","exportArgument","createBuilder","toISOString","element","exportCallback","params","bind","array_create","constant","process_id","Proxy","nodeCache","receiver","Reflect","has","index","parseInt","label","set","defaultValue","optional","default","from_parameter","Token","Operator","SUP_MAPPING","SUP_STRING","Lexer","marker","T","peekNextChar","idx","charAt","getNextChar","ch","isWhiteSpace","isLetter","isDecimalDigit","createToken","start","end","skipSpaces","scanOperator","indexOf","isIdentifierStart","isAdditionalNamespaceChar","isIdentifierPart","ns","scanIdentifier","startCh","scanNumber","number","SyntaxError","reset","next","peek","e","lexer","matchOp","op","parseArgumentList","expr","parseExpression","parseFunctionCall","parsePrimary","parseUnary","parseSuperscript","parsePower","parseMultiplicative","parseAdditive","FEATURE_MAP","listFileTypes","listServiceTypes","listUdfRuntimes","listCollections","describeCollection","listCollectionItems","listProcesses","describeProcess","listAuthProviders","authenticateOIDC","authenticateBasic","describeAccount","listFiles","getFile","uploadFile","downloadFile","deleteFile","validateProcess","listUserProcesses","describeUserProcess","getUserProcess","setUserProcess","replaceUserProcess","deleteUserProcess","computeResult","listJobs","createJob","listServices","createService","getJob","describeJob","updateJob","deleteJob","estimateJob","debugJob","startJob","stopJob","listResults","describeService","getService","updateService","deleteService","debugService","Capabilities","featureMap","features","validate","init","api_version","endpoints","methods","path","toLowerCase","reduce","flat","concat","apiVersion","backendVersion","backend_version","isStable","production","links","listFeatures","sort","methodName","some","currency","billing","listPlans","plans","defaultPlan","default_plan","plan","addition","migrate","StacMigrate","OidcProvider","GdcCapabilities","Migrate","FileTypes","UserFile","Job","UserProcess","Service","CONFORMANCE_RELS","Connection","baseUrl","normalizeUrl","authProviderList","authProvider","capabilitiesObject","listeners","addNamespaceToProcess","_get","makeLinksAbsolute","conformsTo","conformanceLink","_getLinkHref","response2","refreshProcessCache","promises","namespaces","fn","userProcesses","isAuthenticated","remove","catch","message","getBaseUrl","collections","collection","stac_version","collectionId","spatialExtent","temporalExtent","limit","page","nextUrl","bbox","datetime","item","normalizeNamespace","matches","addAll","buildProcess","cap","oidcFactory","getOidcProviderFactory","providers","setOidcProviderFactory","providerFactoryFunc","oidcProviderFactory","isSupported","providerInfo","basic","on","callback","off","getAuthProvider","provider","setAuthToken","providerId","files","f","_toResponseArray","targetPath","statusCallback","abortController","file","_normalizeUserProcess","additional","_post","errors","oldProcesses","newProcesses","newProcess","oldProcess","jsonProcesses","pg","budget","requestBody","syncResult","costs","logs","link","logsResponse","downloadResult","oldJobs","newJobs","jobs","newJob","job","oldJob","oldServices","newServices","services","newService","service","oldService","enabled","configuration","arr","rel","l","base","config","baseURL","query","timeout","_put","_patch","_delete","authorize","authorization","Authorization","signal","checkContentType","enrichError","origin","code","errorResponse","error2","input","output","io","toUpperCase","getInputTypes","getOutputTypes","getInputType","_findType","getOutputType","checkConformance","hasConformance","isEndpoint","endpoint","pattern","regex","RegExp","test","returns","summary","inputs","filter","v","size","outputs","values","Logs","STOP_STATUS","jobId","status","progress","created","updated","monitorJob","interval","requestLogs","lastStatus","intervalId","logIterator","monitorFn","async","nextLogs","stopFn","setTimeout","setInterval","clearInterval","getResultsAsStac","stac","list","lastId","offset","log","fs","Stream","chunks","chunk","streamError","Buffer","buffer","from","basename","createReadStream","parsedUrl","pathname","Readable","writeStream","createWriteStream","err","pipe","Oidc","UserManager","signinCallback","setGrant","providerOptions","getOptions","oidc","manager","user","clientId","grant","issuer","scopes","refreshTokenScope","defaultClients","default_clients","defaultClient","detectDefaultClient","addListener","scope","events","removeListener","requestRefreshToken","setUser","getUser","uiMethod","signinPopup","signinRedirect","signoutPopup","signoutRedirect","post_logout_redirect_uri","response_type","slice","client_id","redirect_uri","redirectUrl","authority","validateSubOnSilentRenew","response_mode","setClientId","grants","grant_types","redirect_urls","Versions","MIN_API_VERSION","MAX_API_VERSION","OpenEO","connect","wellKnownUrl","versionedUrl","versions","findLatest","connectDirect","compare","clientVersion","AbortController","serviceId","attributes","monitorService","wasEnabled","modified","retrieveFile","onUploadProgress","progressEvent","percentCompleted","Math","round","loaded","total","categories","deprecated","experimental","exceptions","examples","processGraph","MigrateCapabilities","MigrateCollections","MigrateProcesses","ProcessDataType","ProcessParameter","ProcessSchema","MigrateCommons","NO_VERSION","guessApiVersion","convertCapabilitiesToLatestSpec","originalCapabilities","updateVersionNumbers","updateEndpointPaths","deepClone","convertBillingToLatestSpec","convertEndpointsToLatestSpec","migrateLinks","updatePaths","isV04","isLtV100RC2","addPutToPg","newPgPath","post","splice","patch","convertOutputFormatsToLatestSpec","formats","convertFileFormatsToLatestSpec","upgradeFileFormats","convertServiceTypesToLatestSpec","types","t","variables","process_parameters","variable_id","migrateDiscoveryParameters","convertUdfRuntimesToLatestSpec","runtimes","r","docker","GIS_DATA_TYPES","gis_data_types","extMap","fieldMap","moveToRoot","DIMENSION_TYPES","convertCollectionsToLatestSpec","c","convertCollectionToLatestSpec","originalCollection","extent","spatial","temporal","other_properties","props","min","max","a","b","summaries","license","extensions","stac_extensions","ext","fallbackRel","example","convertProcessesToLatestSpec","convertProcessToLatestSpec","parameter_order","required","upgradeSchema","isParam","moveMediaType","media_type","schemas","subSchema","renameFormat","contentMediaType","format","paramSchema","subtype","isAny","dataType","isNull","nullable","isEditable","NON_EDITABLE","native","nativeType","nativeDataType","isEnum","enum","getEnumChoices","getCallbackParameters","additionalProperties","group","hasText","DEFAULT_GROUP","prettifyString","addNamespace","onChange","listener","fireEvent","hasNamespace","unspecified","normalizeJsonSchema","s","defaults","d","refs","is","dataTypes","nullIndex","includeNull","splitTypes","normalized","allOf","oneOf","anyOf","copy","omitFromObject","subSchemas","processParameter","keyPath","shift","getElementJsonSchema","cbParams","equals","getNativeTypesForJsonSchema","anyIsEmpty","validTypes","unique","JSON_SCHEMA_TYPES","items","additionalItems","equal","string","x","y","pickFromObject","toPick","toOmit","mapObject","func","array","useEquals","s1","pos","s2","Set","isNumeric","n","isNaN","isFinite","stringify","replacePlaceholders","placeholder","vars","compareStringCaseInsensitive","localeCompare","numeric","sensitivity","strings","arraySep","replacer","_","friendlyLinks","linkList","ignoreRel","VersionCompare","v1","v2","findCompatible","wkVersions","preferProduction","minVersion","maxVersion","compatible","hasMinVer","hasMaxVer","c1","c2","p1","p2","MESSAGES","ProcessGraphError","codeOrMsg","ErrorList","first","last","merge","errorList","getMessage","msg","trim","Ajv","keywords","geoJsonSchema","subtypeSchemas","JsonSchemaValidator","ajv","schemaId","addUsedSchema","addSchema","addKeyword","valid","validateSubtype","epsgCodes","fileFormats","processRegistry","udfRuntimes","getFunctionName","char","makeSchema","$async","$schema","definitions","validateValue","validated","funcName","setUdfRuntimes","setCollections","setFileFormats","setEpsgCodes","validateCollectionId","ValidationError","validateUdfRuntime","validateEpsgCode","validateInputFormat","validateOutputFormat","validateProjDefinition","validateWkt2Definition","codeWords","word","validateTemporalInterval","date1","date2","getTime","validateTemporalIntervals","setProcessGraphParser","validateProcessGraph","ProcessGraph","createProcessGraphInstance","isSchemaCompatible","valueSchema","strict","allowValueAsElements","paramSchemas","valueSchemas","ps","vs","metaSchema","dependencies","BaseProcess","ProcessGraphNode","node_id","isResultNode","expectsFrom","receivedFrom","passesTo","computedResult","getProcessGraph","getParent","getParentNode","getArgumentNames","hasArgument","getArgumentType","getRawArgument","getParsedArgument","getArgument","evaluateArgument","getArgumentRefs","getRefs","getProcessGraphParameterValue","hasParameterDefault","getParameterDefault","allowUndefinedParameterRefs","argument","getNode","getResult","isStartNode","addPreviousNode","other","getPreviousNodes","addNextNode","getNextNodes","setDescription","setResult","solveDependency","dependencyNode","unsupportedArgs","rawArg","validateArgument","argType","callbackParam","getCallbackParameter","reason","getProcessParameter","resultNode","getProcess","isProcessGraphSchema","containsRef","elementSchema","lastError","validator","getJsonSchemaValidator","execute","processKeys","jsonSchemaValidator","startNodes","children","parsed","callbackParameters","allowEmptyGraph","fillProcessParameters","createJsonSchemaValidatorInstance","createNodeInstance","nodeObj","copyProcessGraphInstanceProperties","createProcessInstance","createChildProcessGraph","parameterPath","setArguments","setParentNode","setCallbackParameters","getParentProcess","isValid","addError","allowUndefinedParameters","allow","fillUndefinedParameters","fill","allowEmpty","makeError","errorId","getParentProcessId","hasProcessKey","parseNodeArguments","throwOnErrors","validateNodes","getStartNodes","executeNodes","getResultNode","previousNode","validateNode","executeNode","argumentName","prevNode","hasParameter","addProcessParameter","getParameter","getProcessParameters","includeUndefined","processParam","child","getStartNodeIds","getNodeCount","getNodes","getErrors","CommonProcessRegistry","CommonUtils","checkProcess","checkCallbacks","getFromProcess","getFromCallbacks","store","hasOwnProperty"],"sourceRoot":""}